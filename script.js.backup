// DOM Elements
document.addEventListener('DOMContentLoaded', function() {
  // 导航栏滚动效果
  const navbar = document.querySelector('.navbar');
  const heroSection = document.querySelector('.hero');
  
  if (navbar && heroSection) {
    const heroHeight = heroSection.offsetHeight;
    
    window.addEventListener('scroll', function() {
      if (window.scrollY > 100) {
        navbar.style.backgroundColor = 'rgba(47, 47, 47, 0.95)';
        navbar.style.color = '#FAF9F6';
      } else {
        navbar.style.backgroundColor = 'rgba(250, 249, 246, 0.95)';
        navbar.style.color = '#2F2F2F';
      }
    });
  }

  // 切换主题模式
  const themeSwitch = document.querySelector('.theme-switch');
  if (themeSwitch) {
    themeSwitch.addEventListener('click', function() {
      document.body.classList.toggle('dark-mode');
      if (document.body.classList.contains('dark-mode')) {
        themeSwitch.textContent = '☀️';
      } else {
        themeSwitch.textContent = '🌙';
      }
    });
  }

  // 语言切换
  const langSwitch = document.querySelector('.lang-switch');
  if (langSwitch) {
    langSwitch.addEventListener('click', function() {
      if (langSwitch.textContent === 'EN') {
        langSwitch.textContent = 'CN';
        setLanguage('zh');
      } else {
        langSwitch.textContent = 'EN';
        setLanguage('en');
      }
    });
  }

  // 按钮波纹效果
  const buttons = document.querySelectorAll('button:not(.tag)');
  buttons.forEach(button => {
    button.classList.add('ripple-button');
    button.addEventListener('click', createRipple);
  });

  function createRipple(event) {
    const button = event.currentTarget;
    const ripple = document.createElement('span');
    const rect = button.getBoundingClientRect();
    
    const size = Math.max(rect.width, rect.height);
    const x = event.clientX - rect.left - size / 2;
    const y = event.clientY - rect.top - size / 2;
    
    ripple.style.width = ripple.style.height = `${size}px`;
    ripple.style.left = `${x}px`;
    ripple.style.top = `${y}px`;
    
    button.appendChild(ripple);
    
    setTimeout(() => {
      ripple.remove();
    }, 600);
  }

  // 材料标签交互
  const materialTags = document.querySelectorAll('.material-tags .tag');
  if (materialTags.length > 0) {
    materialTags.forEach(tag => {
      tag.addEventListener('click', function() {
        materialTags.forEach(t => t.classList.remove('active'));
        this.classList.add('active');
        
        // 标签缝合动画效果
        const tagText = this.textContent;
        const filterDisplay = document.createElement('div');
        filterDisplay.classList.add('active-filter');
        filterDisplay.textContent = `已筛选: ${tagText}`;
        
        const filterContainer = document.querySelector('.material-tags');
        const existingFilter = document.querySelector('.active-filter');
        
        if (existingFilter) {
          filterContainer.removeChild(existingFilter);
        }
        
        if (tagText !== '全部') {
          filterContainer.appendChild(filterDisplay);
        }
        
        // 这里添加实际过滤逻辑
        filterProjects(tagText);
      });
    });
  }

  // 模拟项目过滤功能
  function filterProjects(category) {
    console.log(`Filtering projects by: ${category}`);
    // 实际项目中这里会根据类别过滤DOM元素或从服务器请求数据
  }

  // 生成3D展示墙
  initShowcase3D();

  // 生成项目展示卡片
  generateProjectCards();

  // 聊天界面交互
  initChatInterface();
  
  // 确保聊天界面加载完成后有默认消息
  setTimeout(function() {
    const chatMessages = document.querySelector('#chat-messages');
    if (chatMessages && chatMessages.children.length === 0) {
      console.log("Chat interface still empty after initialization, retrying...");
      initChatInterface();
    }
  }, 500);

  // 视差滚动效果
  initParallaxEffect();

  // 初始化对接进度面板
  initTrackingPanel();

  // 初始化统计数字动画
  animateStats();
  
  // 确保标题不会因滚动或动画而移动
  const sectionHeaders = document.querySelectorAll('.section-header');
  sectionHeaders.forEach(header => {
    // 为标题元素添加固定位置类
    header.classList.add('stable-position');
  });

  // 对所有标题应用固定样式
  const allHeadings = document.querySelectorAll('h2, h3');
  allHeadings.forEach(heading => {
    heading.style.minHeight = heading.offsetHeight + 'px';
  });

  // 初始化导航栏
  initNavbar();
  
  // 初始化语言切换
  initLanguageSwitch();
  
  // 初始化深色模式
  initDarkMode();
  
  // 初始化聊天界面
  initChatInterface();
  
  // 初始化对接进度面板
  initTrackingPanel();
  
  // 为页面添加平滑滚动
  addSmoothScrolling();
  
  // 滚动监听，高亮当前活动的导航菜单项
  initScrollSpy();
});

// 3D展示墙初始化
function initShowcase3D() {
  const container = document.querySelector('.showcase-container');
  if (!container) return;

  // 移除占位符
  const placeholder = container.querySelector('.placeholder-3d');
  if (placeholder) {
    container.removeChild(placeholder);
  }

  // 创建3D展示墙 - 简化版模拟
  // 在完整实现中，这里应该使用Three.js库
  
  // 创建6个展示卡片作为立方体的面
  const cube = document.createElement('div');
  cube.classList.add('showcase-cube');
  
  for (let i = 0; i < 6; i++) {
    const face = document.createElement('div');
    face.classList.add('cube-face', `face-${i+1}`);
    
    const image = document.createElement('img');
    image.src = `assets/project-${i+1}.jpg`;
    image.alt = `改造项目 ${i+1}`;
    
    face.appendChild(image);
    cube.appendChild(face);
    
    // 点击展开详情
    face.addEventListener('click', function() {
      showProjectDetail(i+1);
    });
  }
  
  container.appendChild(cube);
  
  // 添加拖动交互
  let isDragging = false;
  let previousX = 0;
  let previousY = 0;
  let rotX = 0;
  let rotY = 0;
  
  container.addEventListener('mousedown', function(e) {
    isDragging = true;
    previousX = e.clientX;
    previousY = e.clientY;
    container.style.cursor = 'grabbing';
  });
  
  window.addEventListener('mousemove', function(e) {
    if (isDragging) {
      const dx = e.clientX - previousX;
      const dy = e.clientY - previousY;
      
      rotY += dx * 0.5;
      rotX -= dy * 0.5;
      
      cube.style.transform = `rotateX(${rotX}deg) rotateY(${rotY}deg)`;
      
      previousX = e.clientX;
      previousY = e.clientY;
    }
  });
  
  window.addEventListener('mouseup', function() {
    isDragging = false;
    container.style.cursor = 'grab';
  });
}

// 项目详情弹窗
function showProjectDetail(projectId) {
  // 创建模态框
  const modal = document.createElement('div');
  modal.classList.add('project-modal');
  
  const modalContent = document.createElement('div');
  modalContent.classList.add('modal-content');
  
  // 添加关闭按钮
  const closeBtn = document.createElement('button');
  closeBtn.classList.add('close-modal');
  closeBtn.innerHTML = '&times;';
  closeBtn.addEventListener('click', function() {
    document.body.removeChild(modal);
  });
  
  // 添加项目内容
  const projectContent = document.createElement('div');
  projectContent.classList.add('project-detail');
  
  const projectTitle = document.createElement('h3');
  projectTitle.textContent = `改造项目 ${projectId}`;
  
  const beforeAfterContainer = document.createElement('div');
  beforeAfterContainer.classList.add('before-after-slider');
  
  // 这里简化实现，实际项目中应该使用更复杂的滑块对比组件
  const beforeImg = document.createElement('img');
  beforeImg.src = `assets/project-${projectId}-before.jpg`;
  beforeImg.alt = '改造前';
  
  const afterImg = document.createElement('img');
  afterImg.src = `assets/project-${projectId}-after.jpg`;
  afterImg.alt = '改造后';
  
  beforeAfterContainer.appendChild(beforeImg);
  beforeAfterContainer.appendChild(afterImg);
  
  const projectDesc = document.createElement('p');
  projectDesc.textContent = '这是一个旧牛仔裤改造项目，通过拼接剪裁和手工装饰，将废旧牛仔裤变成时尚单肩包。采用零浪费设计原则，甚至将拉链和纽扣也重新利用。';
  
  const designSketch = document.createElement('img');
  designSketch.classList.add('design-sketch');
  designSketch.src = `assets/sketch-${projectId}.jpg`;
  designSketch.alt = '设计草图';
  
  projectContent.appendChild(projectTitle);
  projectContent.appendChild(beforeAfterContainer);
  projectContent.appendChild(projectDesc);
  projectContent.appendChild(designSketch);
  
  modalContent.appendChild(closeBtn);
  modalContent.appendChild(projectContent);
  modal.appendChild(modalContent);
  
  document.body.appendChild(modal);
}

// 生成项目卡片
function generateProjectCards() {
  const projectsGrid = document.querySelector('.projects-grid');
  if (!projectsGrid) return;
  
  // 模拟数据
  const projectsData = [
    { id: 1, title: '牛仔外套改造', material: '牛仔', difficulty: 4, imageUrl: 'assets/project-1.jpg' },
    { id: 2, title: '丝质围巾变裙', material: '丝绸', difficulty: 3, imageUrl: 'assets/project-2.jpg' },
    { id: 3, title: '亚麻衬衫翻新', material: '棉麻', difficulty: 2, imageUrl: 'assets/project-3.jpg' },
    { id: 4, title: '皮夹克改造', material: '皮革', difficulty: 5, imageUrl: 'assets/project-4.jpg' },
    { id: 5, title: '针织衫重构', material: '针织', difficulty: 3, imageUrl: 'assets/project-5.jpg' },
    { id: 6, title: '牛仔裤变包', material: '牛仔', difficulty: 4, imageUrl: 'assets/project-6.jpg' },
    { id: 7, title: '丝巾再造', material: '丝绸', difficulty: 2, imageUrl: 'assets/project-7.jpg' },
    { id: 8, title: '棉布拼接', material: '棉麻', difficulty: 3, imageUrl: 'assets/project-8.jpg' }
  ];
  
  projectsData.forEach(project => {
    const card = document.createElement('div');
    card.classList.add('project-card', 'card-3d');
    card.dataset.material = project.material;
    
    const cardInner = document.createElement('div');
    cardInner.classList.add('card-inner');
    
    // 卡片正面
    const cardFront = document.createElement('div');
    cardFront.classList.add('card-front');
    
    const image = document.createElement('img');
    image.src = project.imageUrl;
    image.alt = project.title;
    
    const title = document.createElement('h4');
    title.textContent = project.title;
    
    const difficultyContainer = document.createElement('div');
    difficultyContainer.classList.add('difficulty-stars');
    
    // 添加难度星级
    for (let i = 0; i < 5; i++) {
      const star = document.createElement('span');
      star.classList.add('star');
      if (i < project.difficulty) {
        star.classList.add('filled');
      }
      difficultyContainer.appendChild(star);
    }
    
    cardFront.appendChild(image);
    cardFront.appendChild(title);
    cardFront.appendChild(difficultyContainer);
    
    // 卡片背面
    const cardBack = document.createElement('div');
    cardBack.classList.add('card-back');
    
    const materialChart = document.createElement('div');
    materialChart.classList.add('material-chart');
    materialChart.innerHTML = `<h5>材料成分</h5>
      <div class="chart-container">
        <canvas class="radar-chart" width="150" height="150"></canvas>
      </div>
      <p>主要材质: ${project.material}</p>`;
    
    const storyPreview = document.createElement('div');
    storyPreview.classList.add('story-preview');
    storyPreview.innerHTML = `<p>这是一个关于如何给旧衣物赋予新生命的故事，点击查看完整改造过程...</p>`;
    
    const viewButton = document.createElement('button');
    viewButton.classList.add('view-button');
    viewButton.textContent = '查看详情';
    viewButton.addEventListener('click', function() {
      showProjectDetail(project.id);
    });
    
    cardBack.appendChild(materialChart);
    cardBack.appendChild(storyPreview);
    cardBack.appendChild(viewButton);
    
    cardInner.appendChild(cardFront);
    cardInner.appendChild(cardBack);
    card.appendChild(cardInner);
    
    projectsGrid.appendChild(card);
  });
}

// 聊天界面交互
function initChatInterface() {
  console.log("Initializing chat interface...");
  
  const chatInterface = document.querySelector('.chat-interface');
  if (!chatInterface) {
    console.error("Chat interface not found");
    return;
  }
  
  const chatMessages = document.querySelector('#chat-messages');
  const chatInput = document.querySelector('.chat-input input');
  const sendButton = document.querySelector('.send-button');
  const chatSidebar = document.querySelector('.chat-sidebar');
  
  if (!chatMessages || !chatInput || !sendButton) {
    console.error("Chat components missing:", {
      messages: !!chatMessages,
      input: !!chatInput,
      button: !!sendButton
    });
    return;
  }
  
  console.log("Chat components found, continuing initialization");
  
  // 变量用于存储当前会话状态
  let currentSessionId = localStorage.getItem('currentSessionId');
  let currentSessionTitle = "新对话";
  let previousTopics = {
    fabric: false,
    clothing: false,
    price: false,
    contact: false,
    seller: false,
    buyer: false
  };
  
  // 初始化聊天界面
  if (chatSidebar) {
    initChatHistory(chatSidebar);
  }
  
  // 如果有当前会话ID，加载该会话
  if (currentSessionId) {
    const chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || {};
    if (chatHistory[currentSessionId]) {
      loadSession(currentSessionId);
    } else {
      // 如果保存的会话ID不存在历史记录中，创建新会话
      startNewSession();
    }
  } else {
    // 无会话ID，创建新会话
    startNewSession();
  }
  
  // 检查聊天界面是否为空，如果是则重新初始化
  checkChatInterfaceEmpty();
  
  // 添加事件监听器
  if (sendButton) {
    sendButton.addEventListener('click', sendMessage);
  }
  
  if (chatInput) {
    chatInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        sendMessage();
      }
    });
    
    // 添加输入时的动态效果
    chatInput.addEventListener('focus', function() {
      if (this.parentElement) {
        this.parentElement.classList.add('input-active');
      }
    });
    
    chatInput.addEventListener('blur', function() {
      if (this.parentElement) {
        this.parentElement.classList.remove('input-active');
      }
    });
  }
  
  // 初始调整高度
  adjustChatHeight();
  
  // 监听窗口大小变化，重新调整高度
  window.addEventListener('resize', adjustChatHeight);
  
  // 如果聊天框为空，添加一个新会话
  function checkChatInterfaceEmpty() {
    if (!chatMessages || chatMessages.children.length === 0) {
      console.log("Chat interface is empty, reinitializing...");
      startNewSession();
    }
  }

  // 发送消息
  function sendMessage() {
    if (!chatInput || !chatMessages) {
      console.error("Cannot send message: UI elements not found");
      return;
    }
    
    const message = chatInput.value.trim();
    if (message === '') return;
    
    console.log("Sending message:", message);
    
    // 创建用户消息
    const userMessage = document.createElement('div');
    userMessage.classList.add('message', 'user-message');
    userMessage.textContent = message;
    
    chatMessages.appendChild(userMessage);
    
    // 清空输入框
    chatInput.value = '';
    
    // 滚动到底部
    chatMessages.scrollTop = chatMessages.scrollHeight;
    
    // 确保聊天界面高度适应内容
    adjustChatHeight();
    
    // 保存用户消息到当前会话
    saveMessageToHistory(currentSessionId, 'user', message);
    
    // 如果这是新会话的第一条消息，根据内容生成标题
    if (currentSessionTitle === "新对话") {
      currentSessionTitle = generateSessionTitle(message);
      updateSessionList();
    }
    
    // 模拟系统回复
    setTimeout(function() {
      // 获取自动回复
      const autoReply = getAutoReply(message);
      
      // 创建系统消息
      const systemMessage = document.createElement('div');
      systemMessage.classList.add('message', 'system-message');
      
      const needleIcon = document.createElement('span');
      needleIcon.classList.add('needle-icon');
      needleIcon.innerHTML = '🧵';
      
      const messageText = document.createElement('span');
      systemMessage.appendChild(needleIcon);
      systemMessage.appendChild(messageText);
      
      chatMessages.appendChild(systemMessage);
      
      // 添加内容
      messageText.innerHTML = autoReply;
      
      // 保存系统回复到当前会话
      saveMessageToHistory(currentSessionId, 'system', autoReply);
      
      // 添加打字动画效果
      addTypingAnimation(messageText);
      
      // 滚动到底部
      chatMessages.scrollTop = chatMessages.scrollHeight;
      
      // 再次调整聊天界面高度
      adjustChatHeight();
      
      // 基于系统回复再次更新对接进度
      updateTrackingFromChat(autoReply);
    }, 1000);
  }

  // 生成唯一的会话ID
  function generateSessionId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  }
  
  // 根据用户首条消息内容生成会话标题
  function generateSessionTitle(message) {
    // 提取消息的前10个字符作为标题，如果消息太短则全部使用
    const titleText = message.length > 10 ? message.substring(0, 10) + '...' : message;
    return titleText;
  }
  
  // 保存消息到本地存储
  function saveMessageToHistory(sessionId, sender, content) {
    // 从本地存储获取已有历史记录
    let chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || {};
    
    // 如果会话不存在，则创建新会话
    if (!chatHistory[sessionId]) {
      chatHistory[sessionId] = {
        id: sessionId,
        title: currentSessionTitle,
        date: new Date().toISOString(),
        messages: []
      };
    }
    
    // 添加新消息
    chatHistory[sessionId].messages.push({
      sender: sender,
      content: content,
      timestamp: new Date().toISOString()
    });
    
    // 更新最后活动时间
    chatHistory[sessionId].lastActive = new Date().toISOString();
    
    // 更新会话标题（如果已生成）
    if (currentSessionTitle !== "新对话") {
      chatHistory[sessionId].title = currentSessionTitle;
    }
    
    // 保存回本地存储
    localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
    
    // 更新当前会话ID到localStorage
    localStorage.setItem('currentSessionId', sessionId);
    
    // 更新会话列表
    updateSessionList();
  }
  
  // 添加打字动画效果
  function addTypingAnimation(element) {
    const text = element.innerHTML;
    element.innerHTML = '';
    let i = 0;
    
    function typeWriter() {
      if (i < text.length) {
        element.innerHTML += text.charAt(i);
        i++;
        // 随机打字速度，让效果更自然
        setTimeout(typeWriter, Math.random() * 10 + 20);
      }
    }
    
    // 考虑到文本较长且有HTML标签，这里简化不使用真实的打字效果
    element.innerHTML = text;
    element.style.opacity = '0';
    setTimeout(() => {
      element.style.transition = 'opacity 0.5s';
      element.style.opacity = '1';
    }, 100);
  }
  
  // 初始化聊天历史
  function initChatHistory(sidebar) {
    // 确保历史会话标题已添加
    if (!sidebar.querySelector('.sidebar-header')) {
      const header = document.createElement('div');
      header.classList.add('sidebar-header');
      header.innerHTML = '历史会话<span class="current-time"></span>';
      sidebar.appendChild(header);
    }
    
    // 更新当前北京时间显示
    updateCurrentTime();
    
    // 更新会话列表
    updateSessionList();
    
    // 每秒更新一次时间
    setInterval(updateCurrentTime, 1000);
  }
  
  // 更新当前北京时间显示
  function updateCurrentTime() {
    const now = new Date();
    now.setTime(now.getTime() + (8 * 60 * 60 * 1000)); // 调整为UTC+8
    const hours = String(now.getUTCHours()).padStart(2, '0');
    const minutes = String(now.getUTCMinutes()).padStart(2, '0');
    const seconds = String(now.getUTCSeconds()).padStart(2, '0');
    const currentTime = `${hours}:${minutes}:${seconds}`;
    
    const timeElement = chatSidebar.querySelector('.sidebar-header .current-time');
    if (timeElement) {
      timeElement.textContent = `北京时间 ${currentTime}`;
    }
  }
  
  // 格式化日期为更友好的格式
  function formatDate(dateString) {
    const date = new Date(dateString);
    // 调整为北京时间
    date.setTime(date.getTime() + (8 * 60 * 60 * 1000));
    
    const now = new Date();
    now.setTime(now.getTime() + (8 * 60 * 60 * 1000));
    
    const today = new Date(now);
    today.setUTCHours(0, 0, 0, 0);
    
    const yesterday = new Date(today);
    yesterday.setUTCDate(yesterday.getUTCDate() - 1);
    
    // 检查是否是今天
    if (date >= today) {
      const hours = String(date.getUTCHours()).padStart(2, '0');
      const minutes = String(date.getUTCMinutes()).padStart(2, '0');
      return `今天 ${hours}:${minutes}`;
    }
    
    // 检查是否是昨天
    if (date >= yesterday && date < today) {
      return "昨天";
    }
    
    // 一周内显示星期
    const weekDays = ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];
    const diffDays = Math.floor((today - date) / (1000 * 60 * 60 * 24));
    
    if (diffDays < 7) {
      return weekDays[date.getUTCDay()];
    }
    
    // 更早的日期显示完整日期
    const year = date.getUTCFullYear();
    const month = String(date.getUTCMonth() + 1).padStart(2, '0');
    const day = String(date.getUTCDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }
  
  // 更新会话列表
  function updateSessionList() {
    // 从本地存储获取历史记录
    const chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || {};
    
    // 获取所有会话并按最后活动时间排序
    const sessions = Object.values(chatHistory).sort((a, b) => 
      new Date(b.lastActive || b.date) - new Date(a.lastActive || a.date)
    );
    
    // 清空已有的历史会话项目
    chatSidebar.querySelectorAll('.session-item').forEach(item => item.remove());
    
    // 如果没有历史会话记录，添加新会话按钮
    if (sessions.length === 0) {
      const newChatButton = document.createElement('div');
      newChatButton.classList.add('session-item', 'new-chat');
      newChatButton.innerHTML = '<div class="session-title">开始新对话</div>';
      
      newChatButton.addEventListener('click', () => {
        startNewSession();
      });
      
      chatSidebar.appendChild(newChatButton);
      return;
    }
    
    // 添加新会话按钮
    const newChatButton = document.createElement('div');
    newChatButton.classList.add('session-item', 'new-chat');
    newChatButton.innerHTML = '<div class="session-title">开始新对话</div>';
    
    newChatButton.addEventListener('click', () => {
      startNewSession();
    });
    
    chatSidebar.appendChild(newChatButton);
    
    // 添加历史会话
    sessions.forEach(session => {
      const sessionItem = document.createElement('div');
      sessionItem.classList.add('session-item');
      sessionItem.dataset.sessionId = session.id;
      
      if (session.id === currentSessionId) {
        sessionItem.classList.add('active');
      }
      
      const sessionTitle = document.createElement('div');
      sessionTitle.classList.add('session-title');
      sessionTitle.textContent = session.title || "无标题对话";
      
      const sessionDate = document.createElement('div');
      sessionDate.classList.add('session-date');
      
      const formattedDate = formatDate(session.lastActive || session.date);
      sessionDate.innerHTML = `<span class="date-icon">🕒</span> ${formattedDate}`;
      
      // 完整日期作为悬停提示
      const fullDate = new Date(session.lastActive || session.date);
      fullDate.setTime(fullDate.getTime() + (8 * 60 * 60 * 1000)); // 调整为北京时间
      
      const fullDateStr = `${fullDate.getUTCFullYear()}-${String(fullDate.getUTCMonth() + 1).padStart(2, '0')}-${String(fullDate.getUTCDate()).padStart(2, '0')} ${String(fullDate.getUTCHours()).padStart(2, '0')}:${String(fullDate.getUTCMinutes()).padStart(2, '0')}`;
      sessionDate.title = fullDateStr;
      
      // 添加删除按钮
      const deleteButton = document.createElement('span');
      deleteButton.classList.add('delete-session');
      deleteButton.innerHTML = '✕';
      deleteButton.title = '删除对话';
      deleteButton.onclick = (e) => {
        e.stopPropagation(); // 阻止事件冒泡，避免触发会话点击事件
        deleteSession(session.id);
      };
      
      sessionItem.appendChild(sessionTitle);
      sessionItem.appendChild(sessionDate);
      sessionItem.appendChild(deleteButton);
      
      // 点击切换会话
      sessionItem.addEventListener('click', () => {
        loadSession(session.id);
      });
      
      chatSidebar.appendChild(sessionItem);
    });
  }
  
  // 删除会话
  function deleteSession(sessionId) {
    if (confirm('确认删除这个对话记录吗？此操作无法撤销。')) {
      // 从本地存储中获取会话数据
      const chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || {};
      
      // 删除指定会话
      if (chatHistory[sessionId]) {
        delete chatHistory[sessionId];
        
        // 保存更新后的会话数据
        localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
        
        // 如果删除的是当前会话，则开始新会话
        if (sessionId === currentSessionId) {
          startNewSession();
        } else {
          // 仅更新会话列表
          updateSessionList();
        }
      }
    }
  }
  
  // 加载指定会话
  function loadSession(sessionId) {
    console.log("Loading session:", sessionId);
    
    const chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || {};
    
    if (!chatHistory[sessionId]) {
      console.error("Session not found:", sessionId);
      startNewSession();
      return;
    }
    
    // 更新当前会话
    currentSessionId = sessionId;
    localStorage.setItem('currentSessionId', currentSessionId);
    
    // 更新会话标题
    currentSessionTitle = chatHistory[sessionId].title || "未命名对话";
    
    // 清空当前消息区域
    if (chatMessages) {
      chatMessages.innerHTML = '';
      
      // 恢复历史消息
      if (chatHistory[sessionId].messages && chatHistory[sessionId].messages.length > 0) {
        chatHistory[sessionId].messages.forEach(msgObj => {
          const messageElement = document.createElement('div');
          
          if (msgObj.sender === 'user') {
            messageElement.classList.add('message', 'user-message');
            messageElement.textContent = msgObj.content;
          } else {
            messageElement.classList.add('message', 'system-message');
            
            const needleIcon = document.createElement('span');
            needleIcon.classList.add('needle-icon');
            needleIcon.innerHTML = '🧵';
            
            const messageText = document.createElement('span');
            messageText.innerHTML = msgObj.content;
            
            messageElement.appendChild(needleIcon);
            messageElement.appendChild(messageText);
          }
          
          chatMessages.appendChild(messageElement);
        });
      } else {
        // 如果没有消息，添加默认欢迎消息
        const systemMessage = document.createElement('div');
        systemMessage.classList.add('message', 'system-message');
        
        const needleIcon = document.createElement('span');
        needleIcon.classList.add('needle-icon');
        needleIcon.innerHTML = '🧵';
        
        const messageText = document.createElement('span');
        messageText.innerHTML = '欢迎回来！有什么我可以帮助您的吗？';
        
        systemMessage.appendChild(needleIcon);
        systemMessage.appendChild(messageText);
        
        chatMessages.appendChild(systemMessage);
        
        // 保存欢迎消息
        saveMessageToHistory(currentSessionId, 'system', messageText.innerHTML);
      }
      
      // 更新会话列表中的活动状态
      updateSessionList();
      
      // 滚动到底部
      chatMessages.scrollTop = chatMessages.scrollHeight;
      
      // 调整聊天界面高度
      adjustChatHeight();
    } else {
      console.error("Chat messages container not found when loading session");
    }
  }
  
  // 开始新会话
  function startNewSession() {
    console.log("Starting new session");
    
    // 生成新的会话ID
    currentSessionId = generateSessionId();
    localStorage.setItem('currentSessionId', currentSessionId);
    
    currentSessionTitle = "新对话";
    
    // 清空消息区域
    if (chatMessages) {
      chatMessages.innerHTML = '';
      
      // 添加默认欢迎消息
      const systemMessage = document.createElement('div');
      systemMessage.classList.add('message', 'system-message');
      
      const needleIcon = document.createElement('span');
      needleIcon.classList.add('needle-icon');
      needleIcon.innerHTML = '🧵';
      
      const messageText = document.createElement('span');
      messageText.innerHTML = '欢迎来到Fashion Reborn服装改造艺术空间！我是您的顾问，有任何关于清理库存、收购库存，改造成衣或面料的问题都可以咨询我。如需直接联系，请添加微信：<strong>JJ1598929032</strong>';
      
      systemMessage.appendChild(needleIcon);
      systemMessage.appendChild(messageText);
      
      chatMessages.appendChild(systemMessage);
      
      // 保存欢迎消息到历史记录
      saveMessageToHistory(currentSessionId, 'system', messageText.innerHTML);
      
      // 更新会话列表
      updateSessionList();
      
      // 滚动到底部
      chatMessages.scrollTop = chatMessages.scrollHeight;
      
      // 调整高度
      adjustChatHeight();
    } else {
      console.error("Chat messages container not found");
    }
  }
  
  // 调整聊天界面高度以适应内容
  function adjustChatHeight() {
    // 确保我们有必要的DOM元素
    if (!chatInterface || !chatMessages) {
      console.error("Cannot adjust chat height: Required elements not found");
      return;
    }
    
    // 确保对话框内容完全显示
    chatMessages.style.maxHeight = '520px'; // 保持最大高度限制
    
    // 确保整个聊天界面不遮挡对接进度面板
    const trackingPanel = document.querySelector('.tracking-panel');
    if (trackingPanel) {
      const chatBottom = chatInterface.getBoundingClientRect().bottom;
      const trackingTop = trackingPanel.getBoundingClientRect().top;
      
      // 如果聊天界面底部超出跟踪面板顶部，增加上边距
      if (chatBottom > trackingTop) {
        const currentMargin = parseInt(getComputedStyle(trackingPanel).marginTop) || 0;
        trackingPanel.style.marginTop = (currentMargin + (chatBottom - trackingTop) + 20) + 'px';
      }
    }
    
    // 为消息添加动画效果
    const messages = document.querySelectorAll('.message');
    messages.forEach((message, index) => {
      if (!message.style.animationDelay) {
        message.style.animationDelay = `${index * 0.1}s`;
      }
    });
  }
}

// 视差滚动效果
function initParallaxEffect() {
  const sections = document.querySelectorAll('section');
  
  window.addEventListener('scroll', function() {
    const scrollPosition = window.scrollY;
    
    sections.forEach(section => {
      // 排除标题元素，只对内容区域应用视差效果
      const contentElements = section.querySelectorAll('.showcase-container, .projects-grid, .community-market, .challenge-entries, .resources-grid');
      
      contentElements.forEach(element => {
        const distance = element.getBoundingClientRect().top;
        const speed = 0.1;
        
        if (Math.abs(distance) < window.innerHeight) {
          // 只在元素进入视口时应用微小的视差效果，避免影响布局
          const translate = distance * speed;
          element.style.transform = `translateY(${translate}px)`;
        }
      });
      
      // 确保标题元素保持稳定
      const sectionHeader = section.querySelector('.section-header');
      if (sectionHeader) {
        sectionHeader.style.transform = 'none';
      }
    });
  });
}

// 对接进度面板功能
function initTrackingPanel() {
  const trackingPanel = document.querySelector('.process-flow');
  if (!trackingPanel) return;

  // 初始化进度流程图 - 从localStorage获取当前状态
  let currentTrackingData = JSON.parse(localStorage.getItem('trackingData'));
  
  // 如果没有保存的跟踪数据或者是新会话，初始化默认数据
  if (!currentTrackingData) {
    currentTrackingData = {
      currentStage: 1,
      stages: [
        { id: 1, name: '需求提交', status: 'pending', timestamp: new Date().toISOString() },
        { id: 2, name: '匹配库存', status: 'pending', timestamp: null },
        { id: 3, name: '卖家确认', status: 'pending', timestamp: null },
        { id: 4, name: '买家确认', status: 'pending', timestamp: null },
        { id: 5, name: '确认对接', status: 'pending', timestamp: null }
      ],
      lastUpdated: new Date().toISOString(),
      isSeller: false,
      isBuyer: false,
      needType: '',
      productType: '',
      quantity: '',
      budgetRange: ''
    };
    
    // 保存初始数据
    localStorage.setItem('trackingData', JSON.stringify(currentTrackingData));
  }
  
  // 清空默认内容
  trackingPanel.innerHTML = '';
  
  // 创建进度条
  const progressBar = document.createElement('div');
  progressBar.classList.add('progress-bar');
  
  // 添加各个阶段
  currentTrackingData.stages.forEach(stage => {
    const stageElement = document.createElement('div');
    stageElement.classList.add('progress-stage', `status-${stage.status}`);
    stageElement.dataset.stageId = stage.id;
    
    const stageNumber = document.createElement('div');
    stageNumber.classList.add('stage-number');
    stageNumber.textContent = stage.id;
    
    const stageName = document.createElement('div');
    stageName.classList.add('stage-name');
    stageName.textContent = stage.name;
    
    stageElement.appendChild(stageNumber);
    stageElement.appendChild(stageName);
    
    // 点击阶段显示详情
    stageElement.addEventListener('click', () => showStageDetail(stage, currentTrackingData));
    
    progressBar.appendChild(stageElement);
    
    // 添加连接线（除了最后一个阶段）
    if (stage.id < currentTrackingData.stages.length) {
      const connector = document.createElement('div');
      connector.classList.add('stage-connector', `status-${stage.status}`);
      progressBar.appendChild(connector);
    }
  });
  
  trackingPanel.appendChild(progressBar);
  
  // 添加说明文字
  const statusInfo = document.createElement('div');
  statusInfo.classList.add('status-info');
  
  // 找到当前活跃的阶段
  const activeStage = currentTrackingData.stages.find(stage => stage.status === 'active');
  const stageName = activeStage ? activeStage.name : '准备中';
  
  // 计算最后更新时间
  const lastUpdateTime = getTimeDifference(new Date(currentTrackingData.lastUpdated), new Date());
  
  statusInfo.innerHTML = `当前状态：<span class="status-active">${stageName}</span> · 更新于 ${lastUpdateTime}`;
  trackingPanel.appendChild(statusInfo);
  
  // 添加进度概要
  const progressSummary = document.createElement('div');
  progressSummary.classList.add('progress-summary');
  
  // 根据用户身份显示不同的进度概要
  const isSeller = currentTrackingData.isSeller;
  const isBuyer = currentTrackingData.isBuyer;
  
  // 获取买卖需求类型
  const needTypeDisplay = currentTrackingData.needType ? currentTrackingData.needType : '等待确认';
  const productTypeDisplay = currentTrackingData.productType ? currentTrackingData.productType : '等待确认';
  
  let summaryHTML = '';
  if (isSeller) {
    summaryHTML = `
      <h4>出售信息摘要</h4>
      <ul>
        <li>商品类型: ${productTypeDisplay}</li>
        <li>库存数量: ${currentTrackingData.quantity || '等待确认'}</li>
        <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
      </ul>
    `;
  } else if (isBuyer) {
    summaryHTML = `
      <h4>采购信息摘要</h4>
      <ul>
        <li>需求类型: ${needTypeDisplay}</li>
        <li>产品类型: ${productTypeDisplay}</li>
        <li>预算范围: ${currentTrackingData.budgetRange || '等待确认'}</li>
        <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
      </ul>
    `;
  } else {
    summaryHTML = `
      <h4>对接信息摘要</h4>
      <ul>
        <li>请在聊天中说明您是需要出售还是采购</li>
        <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
      </ul>
    `;
  }
  
  progressSummary.innerHTML = summaryHTML;
  trackingPanel.appendChild(progressSummary);
  
  // 添加刷新按钮
  const refreshButton = document.createElement('button');
  refreshButton.classList.add('refresh-tracking');
  refreshButton.textContent = '请求更新进度';
  refreshButton.addEventListener('click', function() {
    // 请求平台更新进度
    updateTrackingProgress();
    
    // 添加刷新动画
    this.classList.add('refreshing');
    // 更改按钮文本
    this.textContent = '正在请求平台确认...';
    setTimeout(() => {
      this.classList.remove('refreshing');
      this.textContent = '请求更新进度';
    }, 2000);
  });
  
  // 添加平台确认说明
  const confirmNote = document.createElement('div');
  confirmNote.classList.add('platform-note');
  confirmNote.innerHTML = '提示：所有进度更新需要平台确认后才能生效';
  
  trackingPanel.appendChild(refreshButton);
  trackingPanel.appendChild(confirmNote);
}

// 根据聊天内容更新对接进度
function updateTrackingFromChat(message, isSeller, isBuyer) {
  // 获取当前进度数据
  let trackingData = JSON.parse(localStorage.getItem('trackingData'));
  
  if (!trackingData) {
    // 如果没有数据，初始化默认数据
    trackingData = {
      currentStage: 1,
      stages: [
        { id: 1, name: '需求提交', status: 'pending', timestamp: new Date().toISOString() },
        { id: 2, name: '匹配库存', status: 'pending', timestamp: null },
        { id: 3, name: '卖家确认', status: 'pending', timestamp: null },
        { id: 4, name: '买家确认', status: 'pending', timestamp: null },
        { id: 5, name: '确认对接', status: 'pending', timestamp: null }
      ],
      lastUpdated: new Date().toISOString(),
      isSeller: false,
      isBuyer: false,
      needType: '',
      productType: '',
      quantity: '',
      budgetRange: ''
    };
  }
  
  // 更新买卖身份
  if (isSeller !== undefined) {
    trackingData.isSeller = isSeller;
  }
  
  if (isBuyer !== undefined) {
    trackingData.isBuyer = isBuyer;
  }
  
  // 处理阶段1：需求提交
  if (trackingData.stages[0].status !== 'completed') {
    // 只要有消息，就认为需求已提交
    trackingData.stages[0].status = 'completed';
    trackingData.stages[0].timestamp = new Date().toISOString();
    
    // 进入第二阶段
    trackingData.stages[1].status = 'active';
    trackingData.currentStage = 2;
  }
  
  // 提取产品类型信息
  const productTypes = ['牛仔', '丝绸', '棉麻', '羊毛', '尼龙', '涤纶'];
  for (const type of productTypes) {
    if (message.includes(type)) {
      trackingData.productType = type;
      break;
    }
  }
  
  // 提取需求类型
  if (message.includes('面料') || message.includes('布料') || message.includes('布')) {
    trackingData.needType = '面料';
  } else if (message.includes('服装') || message.includes('衣服') || message.includes('成衣')) {
    trackingData.needType = '服装';
  }
  
  // 提取数量信息
  const quantityMatch = message.match(/(\d+)([件条米吨个])/);
  if (quantityMatch) {
    trackingData.quantity = quantityMatch[0];
  }
  
  // 提取价格/预算信息
  if (message.includes('价格') || message.includes('多少钱') || message.includes('预算')) {
    const priceMatch = message.match(/(\d+)[-~到至](\d+)[元块]/);
    if (priceMatch) {
      trackingData.budgetRange = priceMatch[0];
    }
  }
  
  // 阶段2：匹配库存 - 根据关键词判断
  if (trackingData.currentStage === 2 && trackingData.stages[1].status === 'active') {
    // 当用户提供了具体的产品和需求类型时，进入到下一阶段
    if (trackingData.productType && trackingData.needType) {
      if (message.includes('匹配') || message.includes('库存') || message.includes('资源') || 
          message.includes('找到') || message.includes('有货') || containsSpecificProductInfo(message)) {
        trackingData.stages[1].status = 'completed';
        trackingData.stages[1].timestamp = new Date().toISOString();
        
        // 根据用户身份决定下一步
        if (trackingData.isSeller) {
          // 卖家寻找买家，进入到买家确认阶段
          trackingData.stages[3].status = 'active';
          trackingData.currentStage = 4;
        } else if (trackingData.isBuyer) {
          // 买家寻找卖家，进入到卖家确认阶段
          trackingData.stages[2].status = 'active';
          trackingData.currentStage = 3;
        }
      }
    }
  }
  
  // 阶段3：卖家确认
  if (trackingData.currentStage === 3 && trackingData.stages[2].status === 'active') {
    if (message.includes('卖家确认') || message.includes('供应商确认') || message.includes('已确认') || 
        message.includes('可以供应') || message.includes('有库存')) {
      trackingData.stages[2].status = 'completed';
      trackingData.stages[2].timestamp = new Date().toISOString();
      
      // 进入买家确认阶段
      trackingData.stages[3].status = 'active';
      trackingData.currentStage = 4;
    }
  }
  
  // 阶段4：买家确认
  if (trackingData.currentStage === 4 && trackingData.stages[3].status === 'active') {
    if (message.includes('买家确认') || message.includes('客户确认') || message.includes('确认购买') || 
        message.includes('接受') || message.includes('满意')) {
      trackingData.stages[3].status = 'completed';
      trackingData.stages[3].timestamp = new Date().toISOString();
      
      // 进入最终确认阶段
      trackingData.stages[4].status = 'active';
      trackingData.currentStage = 5;
    }
  }
  
  // 阶段5：确认对接
  if (trackingData.currentStage === 5 && trackingData.stages[4].status === 'active') {
    if (message.includes('交易成功') || message.includes('已对接') || message.includes('成交') || 
        message.includes('已完成') || message.includes('感谢合作')) {
      trackingData.stages[4].status = 'completed';
      trackingData.stages[4].timestamp = new Date().toISOString();
    }
  }
  
  // 更新最后更新时间
  trackingData.lastUpdated = new Date().toISOString();
  
  // 保存更新后的数据
  localStorage.setItem('trackingData', JSON.stringify(trackingData));
  
  // 重新初始化进度面板以显示最新状态
  initTrackingPanel();
}

// 显示阶段详细信息
function showStageDetail(stage, trackingData) {
  const wechatContact = '<strong>JJ1598929032</strong>';
  const modal = document.createElement('div');
  modal.classList.add('progress-modal');
  
  const modalContent = document.createElement('div');
  modalContent.classList.add('modal-content');
  
  // 添加关闭按钮
  const closeBtn = document.createElement('button');
  closeBtn.classList.add('close-modal');
  closeBtn.innerHTML = '&times;';
  closeBtn.addEventListener('click', function() {
    document.body.removeChild(modal);
  });
  
  // 阶段详情内容
  const stageContent = document.createElement('div');
  stageContent.classList.add('stage-detail');
  
  const stageTitle = document.createElement('h3');
  stageTitle.innerHTML = `阶段 ${stage.id}: ${stage.name} <span class="stage-status status-${stage.status}">${getStatusText(stage.status)}</span>`;
  
  const stageTimestamp = document.createElement('div');
  stageTimestamp.classList.add('stage-timestamp');
  if (stage.timestamp) {
    const date = new Date(stage.timestamp);
    stageTimestamp.textContent = `更新时间: ${formatDateTime(date)}`;
  } else {
    stageTimestamp.textContent = '尚未开始';
  }
  
  const stageDescription = document.createElement('p');
  let descriptionText = '';
  
  // 根据不同阶段和用户身份显示不同内容
  const isSeller = trackingData.isSeller;
  const isBuyer = trackingData.isBuyer;
  
  switch(stage.id) {
    case 1:
      if (stage.status === 'completed') {
        descriptionText = `您的${isSeller ? '出售' : isBuyer ? '采购' : ''}需求已成功提交！我们的系统正在进行初步分析，以便更好地匹配合适的${isSeller ? '买家' : '资源'}。如需补充具体要求或查询进度，请添加客服微信：${wechatContact}`;
      } else {
        descriptionText = `请在聊天框中说明您的${isSeller ? '出售' : isBuyer ? '采购' : '需求'}意向，系统将自动为您匹配${isSeller ? '买家' : '资源'}。您可以随时添加客服微信：${wechatContact} 获取帮助。`;
      }
      break;
    case 2:
      if (stage.status === 'completed') {
        descriptionText = `系统已成功为您匹配到符合要求的${isSeller ? '潜在买家' : '库存资源'}。现在进入${isSeller ? '买家' : '卖家'}确认阶段。如需了解匹配详情，请添加微信：${wechatContact}`;
      } else if (stage.status === 'active') {
        descriptionText = `系统正在根据您提供的要求匹配${isSeller ? '买家资源' : '库存'}。这个过程通常需要12小时内完成。如需加快进度或提供更详细的需求，请立即添加微信：${wechatContact}`;
      } else {
        descriptionText = `此阶段尚未开始。系统将在需求提交后自动为您匹配${isSeller ? '买家' : '库存资源'}。`;
      }
      break;
    case 3:
      if (stage.status === 'completed') {
        descriptionText = `卖家已确认库存有效，现在等待买家最终确认。如有任何问题，请添加微信：${wechatContact}`;
      } else if (stage.status === 'active') {
        descriptionText = `我们已找到符合要求的库存，正在等待卖家确认。通常会在24小时内得到回复。如想优先处理或了解更多详情，请添加微信：${wechatContact}`;
      } else {
        descriptionText = `此阶段尚未开始。系统将在匹配到合适库存后联系卖家确认。`;
      }
      break;
    case 4:
      if (stage.status === 'completed') {
        descriptionText = `买家已确认购买意向，现在进入最终确认阶段。请添加微信：${wechatContact} 完成交易细节确认。`;
      } else if (stage.status === 'active') {
        descriptionText = `卖家已确认库存有效，等待您的最终确认。为确保交易顺利进行，请添加微信：${wechatContact} 进行后续沟通`;
      } else {
        descriptionText = `此阶段尚未开始。系统将在卖家确认后联系买家最终确认。`;
      }
      break;
    case 5:
      if (stage.status === 'completed') {
        descriptionText = `恭喜！交易已成功对接。请通过微信：${wechatContact} 完成后续交易流程。`;
      } else if (stage.status === 'active') {
        descriptionText = `恭喜！双方已达成对接意向。为保障交易安全和顺利完成后续流程，请立即添加微信：${wechatContact} 获取详细指导`;
      } else {
        descriptionText = `此阶段尚未开始。系统将在买家确认后进入最终对接确认阶段。`;
      }
      break;
    default:
      descriptionText = `当前阶段状态更新中。如需及时了解最新进展，请添加客服微信：${wechatContact}`;
  }
  
  stageDescription.innerHTML = descriptionText;
  
  const nextStepsTitle = document.createElement('h4');
  nextStepsTitle.textContent = '下一步操作';
  
  const nextStepsList = document.createElement('ul');
  const nextSteps = getNextSteps(stage.id, stage.status, trackingData);
  
  nextSteps.forEach(step => {
    const listItem = document.createElement('li');
    listItem.innerHTML = step;
    nextStepsList.appendChild(listItem);
  });
  
  // 添加平台确认提示
  const platformConfirmNote = document.createElement('div');
  platformConfirmNote.classList.add('platform-confirmation-note');
  platformConfirmNote.innerHTML = `<i>注意：对接进度由平台根据实际情况确认更新，阶段进度无法手动修改。如需加速进度，请添加客服微信：${wechatContact}</i>`;
  
  stageContent.appendChild(stageTitle);
  stageContent.appendChild(stageTimestamp);
  stageContent.appendChild(stageDescription);
  stageContent.appendChild(nextStepsTitle);
  stageContent.appendChild(nextStepsList);
  stageContent.appendChild(platformConfirmNote);
  
  modalContent.appendChild(closeBtn);
  modalContent.appendChild(stageContent);
  modal.appendChild(modalContent);
  
  document.body.appendChild(modal);
}

// 更新对接进度
function updateTrackingProgress() {
  let trackingData = JSON.parse(localStorage.getItem('trackingData'));
  
  if (!trackingData) return;
  
  // 获取当前活跃阶段
  let currentActiveIndex = trackingData.stages.findIndex(stage => stage.status === 'active');
  
  // 显示进度更新中消息
  showProgressUpdateMessage();
  
  // 模拟平台确认过程（实际环境中应通过后端API获取确认结果）
  setTimeout(() => {
    // 平台审核确认后，更新进度
    // 注意：在实际环境中，这个确认过程应该来自服务器
    const platformConfirmed = Math.random() > 0.5; // 模拟平台确认结果
    
    if (platformConfirmed && currentActiveIndex !== -1 && currentActiveIndex < trackingData.stages.length - 1) {
      // 当前阶段完成
      trackingData.stages[currentActiveIndex].status = 'completed';
      trackingData.stages[currentActiveIndex].timestamp = new Date().toISOString();
      
      // 下一阶段激活
      trackingData.stages[currentActiveIndex + 1].status = 'active';
      trackingData.currentStage = currentActiveIndex + 2; // +2是因为stage id从1开始
      
      // 显示成功消息
      showNotification("进度已更新", "平台已确认您的进度更新", "success");
    } else {
      // 平台未确认
      showNotification("进度更新等待中", "您的进度更新请求正在等待平台确认", "info");
    }
    
    // 随机更新其他信息
    if (!trackingData.productType && Math.random() > 0.7) {
      const products = ['牛仔', '丝绸', '棉麻', '羊毛'];
      trackingData.productType = products[Math.floor(Math.random() * products.length)];
    }
    
    if (!trackingData.needType && Math.random() > 0.7) {
      trackingData.needType = Math.random() > 0.5 ? '面料' : '服装';
    }
    
    if (!trackingData.quantity && trackingData.isSeller && Math.random() > 0.7) {
      const units = ['件', '米', '条'];
      trackingData.quantity = `${Math.floor(Math.random() * 1000) + 10}${units[Math.floor(Math.random() * units.length)]}`;
    }
    
    if (!trackingData.budgetRange && trackingData.isBuyer && Math.random() > 0.7) {
      const min = Math.floor(Math.random() * 500) + 50;
      const max = min + Math.floor(Math.random() * 500) + 50;
      trackingData.budgetRange = `${min}-${max}元`;
    }
    
    // 更新最后更新时间
    trackingData.lastUpdated = new Date().toISOString();
    
    // 保存更新后的数据
    localStorage.setItem('trackingData', JSON.stringify(trackingData));
    
    // 重新初始化进度面板
    initTrackingPanel();
  }, 2000); // 模拟平台确认延迟
}

// 显示进度更新中的消息
function showProgressUpdateMessage() {
  const notification = document.createElement('div');
  notification.classList.add('progress-notification', 'updating');
  notification.innerHTML = `
    <div class="notification-icon">
      <div class="loading-spinner"></div>
    </div>
    <div class="notification-content">
      <h4>进度更新请求已提交</h4>
      <p>正在等待平台确认，这可能需要一些时间...</p>
    </div>
  `;
  
  document.body.appendChild(notification);
  
  // 1.5秒后移除通知
  setTimeout(() => {
    notification.classList.add('fade-out');
    setTimeout(() => {
      if (document.body.contains(notification)) {
        document.body.removeChild(notification);
      }
    }, 500);
  }, 1500);
}

// 显示通知
function showNotification(title, message, type = "info") {
  const notification = document.createElement('div');
  notification.classList.add('progress-notification', type);
  
  let icon = '';
  if (type === 'success') {
    icon = '<div class="notification-icon success">✓</div>';
  } else if (type === 'error') {
    icon = '<div class="notification-icon error">✗</div>';
  } else {
    icon = '<div class="notification-icon info">i</div>';
  }
  
  notification.innerHTML = `
    ${icon}
    <div class="notification-content">
      <h4>${title}</h4>
      <p>${message}</p>
    </div>
  `;
  
  document.body.appendChild(notification);
  
  // 3秒后移除通知
  setTimeout(() => {
    notification.classList.add('fade-out');
    setTimeout(() => {
      if (document.body.contains(notification)) {
        document.body.removeChild(notification);
      }
    }, 500);
  }, 3000);
}

// 获取状态文本描述
function getStatusText(status) {
  switch(status) {
    case 'pending': return '等待中';
    case 'active': return '进行中';
    case 'completed': return '已完成';
    default: return '未知状态';
  }
}

// 格式化日期时间
function formatDateTime(date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  
  return `${year}-${month}-${day} ${hours}:${minutes}`;
}

// 获取时间差异的友好描述
function getTimeDifference(oldDate, newDate) {
  const diffMs = newDate - oldDate;
  const diffSec = Math.floor(diffMs / 1000);
  const diffMin = Math.floor(diffSec / 60);
  const diffHour = Math.floor(diffMin / 60);
  const diffDay = Math.floor(diffHour / 24);
  
  if (diffSec < 60) {
    return '刚刚';
  } else if (diffMin < 60) {
    return `${diffMin}分钟前`;
  } else if (diffHour < 24) {
    return `${diffHour}小时前`;
  } else if (diffDay < 30) {
    return `${diffDay}天前`;
  } else {
    const month = String(oldDate.getMonth() + 1).padStart(2, '0');
    const day = String(oldDate.getDate()).padStart(2, '0');
    return `${month}-${day}`;
  }
}

// 获取已完成阶段的数量
function getCompletedStages(stages) {
  return stages.filter(stage => stage.status === 'completed').length;
}

// 判断消息是否包含具体产品信息
function containsSpecificProductInfo(message) {
  // 匹配具体的产品描述
  const patterns = [
    /\d+[件条米吨]/,  // 匹配数量单位
    /款式|型号|规格|尺寸|颜色|成分/,  // 匹配产品属性
    /牌|品牌|厂家|生产商/,  // 匹配品牌信息
    /价格|报价|元\/[米件条]/  // 匹配价格信息
  ];
  
  return patterns.some(pattern => pattern.test(message));
}

// 根据不同阶段和用户身份获取下一步操作指引
function getNextSteps(stageId, stageStatus, trackingData) {
  const wechatContact = '<strong>JJ1598929032</strong>';
  const isSeller = trackingData.isSeller;
  const isBuyer = trackingData.isBuyer;
  
  // 如果阶段已完成，返回空步骤列表
  if (stageStatus === 'completed') {
    return [`此阶段已完成，请继续推进下一阶段`, `如有问题请添加微信：${wechatContact} 咨询`];
  }
  
  // 如果阶段未开始，返回等待指引
  if (stageStatus === 'pending') {
    return [`请等待前序阶段完成后再进行此阶段`, `如需加速进度，请添加微信：${wechatContact}`];
  }
  
  // 阶段处于活跃状态，根据不同情况返回指引
  if (isSeller) {
    switch(stageId) {
      case 1:
        return [
          `详细描述您要出售的产品类型、数量和期望价格`,
          `提供产品图片或详细规格说明`,
          `添加微信：${wechatContact} 加速对接进程`
        ];
      case 2:
        return [
          `耐心等待系统为您匹配潜在买家`,
          `完善您的产品细节信息以提高匹配率`,
          `添加微信：${wechatContact} 获取实时匹配进度`
        ];
      case 3:
        return [
          `准备好详细的产品说明和价格资料`,
          `确认您的发货能力和库存情况`,
          `添加微信：${wechatContact} 了解买家需求细节`
        ];
      case 4:
        return [
          `准备详细的产品资料和报价单`,
          `确认您的仓库库存和物流配送方案`,
          `添加微信：${wechatContact} 与买家直接沟通`
        ];
      case 5:
        return [
          `确认交易细节和付款方式`,
          `准备产品发货和售后服务方案`,
          `必须添加微信：${wechatContact} 完成最终交易`
        ];
      default:
        return [`添加微信：${wechatContact} 获取指导`];
    }
  } else if (isBuyer) {
    switch(stageId) {
      case 1:
        return [
          `详细描述您需要的产品类型、数量和预算`,
          `说明您对产品质量和规格的要求`,
          `添加微信：${wechatContact} 加速对接进程`
        ];
      case 2:
        return [
          `耐心等待系统为您匹配合适库存`,
          `完善您的需求细节以提高匹配精准度`,
          `添加微信：${wechatContact} 获取实时匹配进度`
        ];
      case 3:
        return [
          `准备好与卖家沟通的具体问题`,
          `确认您的采购预算和付款方式`,
          `添加微信：${wechatContact} 了解卖家确认进度`
        ];
      case 4:
        return [
          `仔细评估卖家提供的产品信息`,
          `确认产品是否满足您的需求`,
          `添加微信：${wechatContact} 与卖家直接沟通`
        ];
      case 5:
        return [
          `确认交易细节和收货地址`,
          `准备付款和验收产品`,
          `必须添加微信：${wechatContact} 完成最终交易`
        ];
      default:
        return [`添加微信：${wechatContact} 获取指导`];
    }
  } else {
    // 用户身份未确定
    switch(stageId) {
      case 1:
        return [
          `请在聊天框中说明您是希望出售还是采购`,
          `详细描述您的需求或产品信息`,
          `添加微信：${wechatContact} 获取专业指导`
        ];
      default:
        return [
          `请先明确您的身份（买家/卖家）`,
          `添加微信：${wechatContact} 获取帮助`
        ];
    }
  }
}

// 为动画添加稳定性修复
function animateStats() {
  const statValues = document.querySelectorAll('.stat-value');
  
  statValues.forEach(statValue => {
    const targetValue = parseInt(statValue.textContent, 10);
    let currentValue = 0;
    const duration = 2000;
    const stepTime = 20;
    const totalSteps = duration / stepTime;
    const stepValue = targetValue / totalSteps;
    
    function updateValue() {
      currentValue += stepValue;
      
      if (currentValue < targetValue) {
        statValue.textContent = Math.floor(currentValue);
        requestAnimationFrame(updateValue);
      } else {
        statValue.textContent = targetValue;
        
        // 添加以防止数字变化导致布局移动
        statValue.style.minWidth = statValue.offsetWidth + 'px';
      }
    }
    
    // 当元素进入视口时启动动画
    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          updateValue();
          observer.unobserve(entry.target);
        }
      });
    });
    
    observer.observe(statValue);
  });
}

// 导航栏初始化与滚动效果
function initNavbar() {
  const navbar = document.querySelector('.navbar');
  
  // 滚动监听
  window.addEventListener('scroll', function() {
    if (window.scrollY > 50) {
      navbar.classList.add('scrolled');
    } else {
      navbar.classList.remove('scrolled');
    }
  });
  
  // 导航菜单项点击激活效果
  const navLinks = document.querySelectorAll('.main-nav a');
  
  navLinks.forEach(link => {
    link.addEventListener('click', function(e) {
      // 获取目标部分的ID
      const targetId = this.getAttribute('href');
      
      // 仅对页内锚点链接进行处理
      if (targetId.startsWith('#')) {
        e.preventDefault();
        
        const targetSection = document.querySelector(targetId);
        
        if (targetSection) {
          // 平滑滚动到目标部分
          window.scrollTo({
            top: targetSection.offsetTop - 70, // 减去导航栏高度
            behavior: 'smooth'
          });
          
          // 更新URL锚点，但不跳转
          history.pushState(null, null, targetId);
          
          // 移除所有active类
          navLinks.forEach(item => {
            item.parentElement.classList.remove('active');
          });
          
          // 为当前点击项添加active类
          this.parentElement.classList.add('active');
        }
      }
    });
  });
}

// 添加滚动监听，高亮当前视图中的部分
function initScrollSpy() {
  // 获取所有主要部分
  const sections = document.querySelectorAll('section[id]');
  const navLinks = document.querySelectorAll('.main-nav a');
  
  // 添加滚动监听
  window.addEventListener('scroll', function() {
    // 当前滚动位置
    const scrollPosition = window.scrollY + 100; // 添加一些偏移以提前激活
    
    // 检查每个部分的位置
    sections.forEach(section => {
      // 获取部分的顶部和底部位置
      const sectionTop = section.offsetTop;
      const sectionBottom = sectionTop + section.offsetHeight;
      
      // 检查当前滚动位置是否在该部分
      if (scrollPosition >= sectionTop && scrollPosition < sectionBottom) {
        // 找到对应的导航链接
        const targetId = '#' + section.getAttribute('id');
        
        // 移除所有active类
        navLinks.forEach(link => {
          link.parentElement.classList.remove('active');
          
          // 为当前部分的链接添加active类
          if (link.getAttribute('href') === targetId) {
            link.parentElement.classList.add('active');
          }
        });
      }
    });
  });
}

// 平滑滚动效果
function addSmoothScrolling() {
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function(e) {
      const targetId = this.getAttribute('href');
      
      if (targetId === '#') return;
      
      const target = document.querySelector(targetId);
      
      if (target) {
        e.preventDefault();
        
        window.scrollTo({
          top: target.offsetTop - 70, // 减去导航栏高度
          behavior: 'smooth'
        });
        
        // 更新URL锚点，但不跳转
        history.pushState(null, null, targetId);
      }
    });
  });
}

// 语言切换功能
function initLanguageSwitch() {
  const langButtons = document.querySelectorAll('.lang-btn');
  const defaultLang = localStorage.getItem('userLanguage') || 'zh';
  
  // 设置初始语言
  setLanguage(defaultLang);
  
  // 更新按钮状态
  updateLanguageButtons(defaultLang);
  
  langButtons.forEach(button => {
    button.addEventListener('click', function() {
      const lang = this.getAttribute('data-lang');
      setLanguage(lang);
      updateLanguageButtons(lang);
    });
  });
  
  // 更新语言按钮状态
  function updateLanguageButtons(activeLang) {
    langButtons.forEach(btn => {
      if (btn.getAttribute('data-lang') === activeLang) {
        btn.classList.add('active');
      } else {
        btn.classList.remove('active');
      }
    });
  }
}

// 设置语言
function setLanguage(lang) {
  // 保存用户语言选择
  localStorage.setItem('userLanguage', lang);
  
  // 获取所有需要翻译的元素
  const elements = document.querySelectorAll('[data-i18n]');
  
  // 加载翻译数据
  const translations = getTranslations();
  
  // 应用翻译
  elements.forEach(element => {
    const key = element.getAttribute('data-i18n');
    if (translations[key] && translations[key][lang]) {
      element.innerHTML = translations[key][lang];
    }
  });
  
  // 更新页面标题
  if (translations.pageTitle && translations.pageTitle[lang]) {
    document.title = translations.pageTitle[lang];
  }
  
  console.log(`Language changed to: ${lang}`);
}

// 获取翻译数据
function getTranslations() {
  return {
    pageTitle: {
      'zh': 'Fashion Reborn - 服装改造艺术空间',
      'en': 'Fashion Reborn - Clothing Reconstruction Art Space'
    },
    'nav.home': {
      'zh': '首页',
      'en': 'Home'
    },
    'nav.workshop': {
      'zh': '创意工坊',
      'en': 'Creative Workshop'
    },
    'nav.community': {
      'zh': '改造社区',
      'en': 'Redesign Community'
    },
    'nav.inventory': {
      'zh': '库存对接',
      'en': 'Inventory Matching'
    },
    'nav.about': {
      'zh': '关于我',
      'en': 'About Me'
    },
    'hero.subtitle': {
      'zh': '重新定义时尚，赋予旧衣新生',
      'en': 'Redefining fashion, giving old clothes new life'
    },
    'hero.cta': {
      'zh': '探索改造之旅',
      'en': 'Explore Redesign Journey'
    },
    'showcase.title': {
      'zh': '精选作品',
      'en': 'Featured Works'
    },
    'stats.items': {
      'zh': '累计改造衣物',
      'en': 'Items Redesigned'
    },
    'stats.fabric': {
      'zh': '节约布料(米)',
      'en': 'Fabric Saved (m)'
    },
    'stats.users': {
      'zh': '社区活跃用户',
      'en': 'Active Community Users'
    },
    'workshop.title': {
      'zh': '创意工坊',
      'en': 'Creative Workshop'
    },
    'material.all': {
      'zh': '全部',
      'en': 'All'
    },
    'material.cotton': {
      'zh': '棉麻',
      'en': 'Cotton & Linen'
    },
    'material.silk': {
      'zh': '丝绸',
      'en': 'Silk'
    },
    'material.denim': {
      'zh': '牛仔',
      'en': 'Denim'
    },
    'material.knit': {
      'zh': '针织',
      'en': 'Knit'
    },
    'material.leather': {
      'zh': '皮革',
      'en': 'Leather'
    },
    'video.title': {
      'zh': '教程视频',
      'en': 'Tutorial Videos'
    },
    'community.title': {
      'zh': '改造社区',
      'en': 'Redesign Community'
    },
    'community.map': {
      'zh': '社区热力图',
      'en': 'Community Heatmap'
    },
    'challenge.title': {
      'zh': '本月挑战: 旧牛仔重生计划',
      'en': 'Monthly Challenge: Denim Rebirth Project'
    },
    'knowledge.title': {
      'zh': '知识共享库',
      'en': 'Knowledge Sharing Library'
    },
    'inventory.title': {
      'zh': '库存匹配系统',
      'en': 'Inventory Matching System'
    },
    'inventory.description': {
      'zh': '输入您想要的服装信息，我们将为您匹配库存并提供专业服装改造建议',
      'en': 'Enter your clothing preferences, and we will match inventory and provide professional redesign advice'
    },
    'chat.history': {
      'zh': '历史会话',
      'en': 'Chat History'
    },
    'chat.placeholder': {
      'zh': '输入您的面料需求或问题...',
      'en': 'Enter your fabric needs or questions...'
    },
    'chat.send': {
      'zh': '发送',
      'en': 'Send'
    },
    'tracking.title': {
      'zh': '对接进度',
      'en': 'Connection Progress'
    },
    'tracking.refresh': {
      'zh': '请求更新进度',
      'en': 'Request Progress Update'
    },
    'tracking.note': {
      'zh': '提示：所有进度更新需要平台确认后才能生效',
      'en': 'Note: All progress updates require platform confirmation'
    },
    'footer.follow': {
      'zh': '关注我们',
      'en': 'Follow Us'
    },
    'social.weibo': {
      'zh': '官方微博',
      'en': 'Official Weibo'
    },
    'social.douyin': {
      'zh': '抖音号',
      'en': 'TikTok'
    },
    'social.xiaohongshu': {
      'zh': '小红书',
      'en': 'Xiaohongshu'
    },
    'social.message': {
      'zh': '关注我们的社交媒体，获取最新服装改造灵感和实用技巧，参与互动赢取精美礼品！',
      'en': 'Follow our social media for the latest clothing redesign inspiration and practical tips. Participate in interactions to win beautiful gifts!'
    },
    'newsletter.title': {
      'zh': '订阅新闻',
      'en': 'Subscribe to Newsletter'
    },
    'newsletter.description': {
      'zh': '订阅我们的电子报，了解最新的设计趋势、改造技巧和独家优惠信息。',
      'en': 'Subscribe to our newsletter to learn about the latest design trends, redesign techniques, and exclusive offers.'
    },
    'newsletter.placeholder': {
      'zh': '请输入您的电子邮箱',
      'en': 'Please enter your email'
    },
    'newsletter.button': {
      'zh': '立即订阅',
      'en': 'Subscribe Now'
    },
    'benefit.weekly': {
      'zh': '每周更新',
      'en': 'Weekly Updates'
    },
    'benefit.exclusive': {
      'zh': '专属优惠',
      'en': 'Exclusive Offers'
    },
    'benefit.unsubscribe': {
      'zh': '随时退订',
      'en': 'Unsubscribe Anytime'
    },
    'copyright': {
      'zh': '© 2023 Fashion Reborn. 保留所有权利。',
      'en': '© 2023 Fashion Reborn. All Rights Reserved.'
    },
    'certification': {
      'zh': '可持续时尚认证',
      'en': 'Sustainable Fashion Certified'
    },
    'visitor.count': {
      'zh': '访问量: ',
      'en': 'Visitors: '
    }
  };
}
  
  // 初始化深色模式
  function initDarkMode() {
    const darkModeToggle = document.querySelector('.dark-mode-toggle');
    if (darkModeToggle) {
      darkModeToggle.addEventListener('click', function() {
        document.body.classList.toggle('dark-mode');
        if (document.body.classList.contains('dark-mode')) {
          this.textContent = '☀️';
        } else {
          this.textContent = '🌙';
        }
      });
    }
  }
});
  
  // 初始化对接进度面板
  function initTrackingPanel() {
    const trackingPanel = document.querySelector('.process-flow');
    if (!trackingPanel) return;
  
    // 初始化进度流程图 - 从localStorage获取当前状态
    let currentTrackingData = JSON.parse(localStorage.getItem('trackingData'));
    
    // 如果没有保存的跟踪数据或者是新会话，初始化默认数据
    if (!currentTrackingData) {
      currentTrackingData = {
        currentStage: 1,
        stages: [
          { id: 1, name: '需求提交', status: 'pending', timestamp: new Date().toISOString() },
          { id: 2, name: '匹配库存', status: 'pending', timestamp: null },
          { id: 3, name: '卖家确认', status: 'pending', timestamp: null },
          { id: 4, name: '买家确认', status: 'pending', timestamp: null },
          { id: 5, name: '确认对接', status: 'pending', timestamp: null }
        ],
        lastUpdated: new Date().toISOString(),
        isSeller: false,
        isBuyer: false,
        needType: '',
        productType: '',
        quantity: '',
        budgetRange: ''
      };
      
      // 保存初始数据
      localStorage.setItem('trackingData', JSON.stringify(currentTrackingData));
    }
    
    // 清空默认内容
    trackingPanel.innerHTML = '';
    
    // 创建进度条
    const progressBar = document.createElement('div');
    progressBar.classList.add('progress-bar');
    
    // 添加各个阶段
    currentTrackingData.stages.forEach(stage => {
      const stageElement = document.createElement('div');
      stageElement.classList.add('progress-stage', `status-${stage.status}`);
      stageElement.dataset.stageId = stage.id;
      
      const stageNumber = document.createElement('div');
      stageNumber.classList.add('stage-number');
      stageNumber.textContent = stage.id;
      
      const stageName = document.createElement('div');
      stageName.classList.add('stage-name');
      stageName.textContent = stage.name;
      
      stageElement.appendChild(stageNumber);
      stageElement.appendChild(stageName);
      
      // 点击阶段显示详情
      stageElement.addEventListener('click', () => showStageDetail(stage, currentTrackingData));
      
      progressBar.appendChild(stageElement);
      
      // 添加连接线（除了最后一个阶段）
      if (stage.id < currentTrackingData.stages.length) {
        const connector = document.createElement('div');
        connector.classList.add('stage-connector', `status-${stage.status}`);
        progressBar.appendChild(connector);
      }
    });
    
    trackingPanel.appendChild(progressBar);
    
    // 添加说明文字
    const statusInfo = document.createElement('div');
    statusInfo.classList.add('status-info');
    
    // 找到当前活跃的阶段
    const activeStage = currentTrackingData.stages.find(stage => stage.status === 'active');
    const stageName = activeStage ? activeStage.name : '准备中';
    
    // 计算最后更新时间
    const lastUpdateTime = getTimeDifference(new Date(currentTrackingData.lastUpdated), new Date());
    
    statusInfo.innerHTML = `当前状态：<span class="status-active">${stageName}</span> · 更新于 ${lastUpdateTime}`;
    trackingPanel.appendChild(statusInfo);
    
    // 添加进度概要
    const progressSummary = document.createElement('div');
    progressSummary.classList.add('progress-summary');
    
    // 根据用户身份显示不同的进度概要
    const isSeller = currentTrackingData.isSeller;
    const isBuyer = currentTrackingData.isBuyer;
    
    // 获取买卖需求类型
    const needTypeDisplay = currentTrackingData.needType ? currentTrackingData.needType : '等待确认';
    const productTypeDisplay = currentTrackingData.productType ? currentTrackingData.productType : '等待确认';
    
    let summaryHTML = '';
    if (isSeller) {
      summaryHTML = `
        <h4>出售信息摘要</h4>
        <ul>
          <li>商品类型: ${productTypeDisplay}</li>
          <li>库存数量: ${currentTrackingData.quantity || '等待确认'}</li>
          <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
        </ul>
      `;
    } else if (isBuyer) {
      summaryHTML = `
        <h4>采购信息摘要</h4>
        <ul>
          <li>需求类型: ${needTypeDisplay}</li>
          <li>产品类型: ${productTypeDisplay}</li>
          <li>预算范围: ${currentTrackingData.budgetRange || '等待确认'}</li>
          <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
        </ul>
      `;
    } else {
      summaryHTML = `
        <h4>对接信息摘要</h4>
        <ul>
          <li>请在聊天中说明您是需要出售还是采购</li>
          <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
        </ul>
      `;
    }
    
    progressSummary.innerHTML = summaryHTML;
    trackingPanel.appendChild(progressSummary);
    
    // 添加刷新按钮
    const refreshButton = document.createElement('button');
    refreshButton.classList.add('refresh-tracking');
    refreshButton.textContent = '请求更新进度';
    refreshButton.addEventListener('click', function() {
      // 请求平台更新进度
      updateTrackingProgress();
      
      // 添加刷新动画
      this.classList.add('refreshing');
      // 更改按钮文本
      this.textContent = '正在请求平台确认...';
      setTimeout(() => {
        this.classList.remove('refreshing');
        this.textContent = '请求更新进度';
      }, 2000);
    });
    
    // 添加平台确认说明
    const confirmNote = document.createElement('div');
    confirmNote.classList.add('platform-note');
    confirmNote.innerHTML = '提示：所有进度更新需要平台确认后才能生效';
    
    trackingPanel.appendChild(refreshButton);
    trackingPanel.appendChild(confirmNote);
  }
  
  // 根据聊天内容更新对接进度
  function updateTrackingFromChat(message, isSeller, isBuyer) {
    // 获取当前进度数据
    let trackingData = JSON.parse(localStorage.getItem('trackingData'));
    
    if (!trackingData) {
      // 如果没有数据，初始化默认数据
      trackingData = {
        currentStage: 1,
        stages: [
          { id: 1, name: '需求提交', status: 'pending', timestamp: new Date().toISOString() },
          { id: 2, name: '匹配库存', status: 'pending', timestamp: null },
          { id: 3, name: '卖家确认', status: 'pending', timestamp: null },
          { id: 4, name: '买家确认', status: 'pending', timestamp: null },
          { id: 5, name: '确认对接', status: 'pending', timestamp: null }
        ],
        lastUpdated: new Date().toISOString(),
        isSeller: false,
        isBuyer: false,
        needType: '',
        productType: '',
        quantity: '',
        budgetRange: ''
      };
    }
    
    // 更新买卖身份
    if (isSeller !== undefined) {
      trackingData.isSeller = isSeller;
    }
    
    if (isBuyer !== undefined) {
      trackingData.isBuyer = isBuyer;
    }
    
    // 处理阶段1：需求提交
    if (trackingData.stages[0].status !== 'completed') {
      // 只要有消息，就认为需求已提交
      trackingData.stages[0].status = 'completed';
      trackingData.stages[0].timestamp = new Date().toISOString();
      
      // 进入第二阶段
      trackingData.stages[1].status = 'active';
      trackingData.currentStage = 2;
    }
    
    // 提取产品类型信息
    const productTypes = ['牛仔', '丝绸', '棉麻', '羊毛', '尼龙', '涤纶'];
    for (const type of productTypes) {
      if (message.includes(type)) {
        trackingData.productType = type;
        break;
      }
    }
    
    // 提取需求类型
    if (message.includes('面料') || message.includes('布料') || message.includes('布')) {
      trackingData.needType = '面料';
    } else if (message.includes('服装') || message.includes('衣服') || message.includes('成衣')) {
      trackingData.needType = '服装';
    }
    
    // 提取数量信息
    const quantityMatch = message.match(/(\d+)([件条米吨个])/);
    if (quantityMatch) {
      trackingData.quantity = quantityMatch[0];
    }
    
    // 提取价格/预算信息
    if (message.includes('价格') || message.includes('多少钱') || message.includes('预算')) {
      const priceMatch = message.match(/(\d+)[-~到至](\d+)[元块]/);
      if (priceMatch) {
        trackingData.budgetRange = priceMatch[0];
      }
    }
    
    // 阶段2：匹配库存 - 根据关键词判断
    if (trackingData.currentStage === 2 && trackingData.stages[1].status === 'active') {
      // 当用户提供了具体的产品和需求类型时，进入到下一阶段
      if (trackingData.productType && trackingData.needType) {
        if (message.includes('匹配') || message.includes('库存') || message.includes('资源') || 
            message.includes('找到') || message.includes('有货') || containsSpecificProductInfo(message)) {
          trackingData.stages[1].status = 'completed';
          trackingData.stages[1].timestamp = new Date().toISOString();
          
          // 根据用户身份决定下一步
          if (trackingData.isSeller) {
            // 卖家寻找买家，进入到买家确认阶段
            trackingData.stages[3].status = 'active';
            trackingData.currentStage = 4;
          } else if (trackingData.isBuyer) {
            // 买家寻找卖家，进入到卖家确认阶段
            trackingData.stages[2].status = 'active';
            trackingData.currentStage = 3;
          }
        }
      }
    }
    
    // 阶段3：卖家确认
    if (trackingData.currentStage === 3 && trackingData.stages[2].status === 'active') {
      if (message.includes('卖家确认') || message.includes('供应商确认') || message.includes('已确认') || 
          message.includes('可以供应') || message.includes('有库存')) {
        trackingData.stages[2].status = 'completed';
        trackingData.stages[2].timestamp = new Date().toISOString();
        
        // 进入买家确认阶段
        trackingData.stages[3].status = 'active';
        trackingData.currentStage = 4;
      }
    }
    
    // 阶段4：买家确认
    if (trackingData.currentStage === 4 && trackingData.stages[3].status === 'active') {
      if (message.includes('买家确认') || message.includes('客户确认') || message.includes('确认购买') || 
          message.includes('接受') || message.includes('满意')) {
        trackingData.stages[3].status = 'completed';
        trackingData.stages[3].timestamp = new Date().toISOString();
        
        // 进入最终确认阶段
        trackingData.stages[4].status = 'active';
        trackingData.currentStage = 5;
      }
    }
    
    // 阶段5：确认对接
    if (trackingData.currentStage === 5 && trackingData.stages[4].status === 'active') {
      if (message.includes('交易成功') || message.includes('已对接') || message.includes('成交') || 
          message.includes('已完成') || message.includes('感谢合作')) {
        trackingData.stages[4].status = 'completed';
        trackingData.stages[4].timestamp = new Date().toISOString();
      }
    }
    
    // 更新最后更新时间
    trackingData.lastUpdated = new Date().toISOString();
    
    // 保存更新后的数据
    localStorage.setItem('trackingData', JSON.stringify(trackingData));
    
    // 重新初始化进度面板以显示最新状态
    initTrackingPanel();
  }
  
  // 显示阶段详细信息
  function showStageDetail(stage, trackingData) {
    const wechatContact = '<strong>JJ1598929032</strong>';
    const modal = document.createElement('div');
    modal.classList.add('progress-modal');
    
    const modalContent = document.createElement('div');
    modalContent.classList.add('modal-content');
    
    // 添加关闭按钮
    const closeBtn = document.createElement('button');
    closeBtn.classList.add('close-modal');
    closeBtn.innerHTML = '&times;';
    closeBtn.addEventListener('click', function() {
      document.body.removeChild(modal);
    });
    
    // 阶段详情内容
    const stageContent = document.createElement('div');
    stageContent.classList.add('stage-detail');
    
    const stageTitle = document.createElement('h3');
    stageTitle.innerHTML = `阶段 ${stage.id}: ${stage.name} <span class="stage-status status-${stage.status}">${getStatusText(stage.status)}</span>`;
    
    const stageTimestamp = document.createElement('div');
    stageTimestamp.classList.add('stage-timestamp');
    if (stage.timestamp) {
      const date = new Date(stage.timestamp);
      stageTimestamp.textContent = `更新时间: ${formatDateTime(date)}`;
    } else {
      stageTimestamp.textContent = '尚未开始';
    }
    
    const stageDescription = document.createElement('p');
    let descriptionText = '';
    
    // 根据不同阶段和用户身份显示不同内容
    const isSeller = trackingData.isSeller;
    const isBuyer = trackingData.isBuyer;
    
    switch(stage.id) {
      case 1:
        if (stage.status === 'completed') {
          descriptionText = `您的${isSeller ? '出售' : isBuyer ? '采购' : ''}需求已成功提交！我们的系统正在进行初步分析，以便更好地匹配合适的${isSeller ? '买家' : '资源'}。如需补充具体要求或查询进度，请添加客服微信：${wechatContact}`;
        } else {
          descriptionText = `请在聊天框中说明您的${isSeller ? '出售' : isBuyer ? '采购' : '需求'}意向，系统将自动为您匹配${isSeller ? '买家' : '资源'}。您可以随时添加客服微信：${wechatContact} 获取帮助。`;
        }
        break;
      case 2:
        if (stage.status === 'completed') {
          descriptionText = `系统已成功为您匹配到符合要求的${isSeller ? '潜在买家' : '库存资源'}。现在进入${isSeller ? '买家' : '卖家'}确认阶段。如需了解匹配详情，请添加微信：${wechatContact}`;
        } else if (stage.status === 'active') {
          descriptionText = `系统正在根据您提供的要求匹配${isSeller ? '买家资源' : '库存'}。这个过程通常需要12小时内完成。如需加快进度或提供更详细的需求，请立即添加微信：${wechatContact}`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在需求提交后自动为您匹配${isSeller ? '买家' : '库存资源'}。`;
        }
        break;
      case 3:
        if (stage.status === 'completed') {
          descriptionText = `卖家已确认库存有效，现在等待买家最终确认。如有任何问题，请添加微信：${wechatContact}`;
        } else if (stage.status === 'active') {
          descriptionText = `我们已找到符合要求的库存，正在等待卖家确认。通常会在24小时内得到回复。如想优先处理或了解更多详情，请添加微信：${wechatContact}`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在匹配到合适库存后联系卖家确认。`;
        }
        break;
      case 4:
        if (stage.status === 'completed') {
          descriptionText = `买家已确认购买意向，现在进入最终确认阶段。请添加微信：${wechatContact} 完成交易细节确认。`;
        } else if (stage.status === 'active') {
          descriptionText = `卖家已确认库存有效，等待您的最终确认。为确保交易顺利进行，请添加微信：${wechatContact} 进行后续沟通`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在卖家确认后联系买家最终确认。`;
        }
        break;
      case 5:
        if (stage.status === 'completed') {
          descriptionText = `恭喜！交易已成功对接。请通过微信：${wechatContact} 完成后续交易流程。`;
        } else if (stage.status === 'active') {
          descriptionText = `恭喜！双方已达成对接意向。为保障交易安全和顺利完成后续流程，请立即添加微信：${wechatContact} 获取详细指导`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在买家确认后进入最终对接确认阶段。`;
        }
        break;
      default:
        descriptionText = `当前阶段状态更新中。如需及时了解最新进展，请添加客服微信：${wechatContact}`;
    }
    
    stageDescription.innerHTML = descriptionText;
    
    const nextStepsTitle = document.createElement('h4');
    nextStepsTitle.textContent = '下一步操作';
    
    const nextStepsList = document.createElement('ul');
    const nextSteps = getNextSteps(stage.id, stage.status, trackingData);
    
    nextSteps.forEach(step => {
      const listItem = document.createElement('li');
      listItem.innerHTML = step;
      nextStepsList.appendChild(listItem);
    });
    
    // 添加平台确认提示
    const platformConfirmNote = document.createElement('div');
    platformConfirmNote.classList.add('platform-confirmation-note');
    platformConfirmNote.innerHTML = `<i>注意：对接进度由平台根据实际情况确认更新，阶段进度无法手动修改。如需加速进度，请添加客服微信：${wechatContact}</i>`;
    
    stageContent.appendChild(stageTitle);
    stageContent.appendChild(stageTimestamp);
    stageContent.appendChild(stageDescription);
    stageContent.appendChild(nextStepsTitle);
    stageContent.appendChild(nextStepsList);
    stageContent.appendChild(platformConfirmNote);
    
    modalContent.appendChild(closeBtn);
    modalContent.appendChild(stageContent);
    modal.appendChild(modalContent);
    
    document.body.appendChild(modal);
  }
  
  // 更新对接进度
  function updateTrackingProgress() {
    let trackingData = JSON.parse(localStorage.getItem('trackingData'));
    
    if (!trackingData) return;
    
    // 获取当前活跃阶段
    let currentActiveIndex = trackingData.stages.findIndex(stage => stage.status === 'active');
    
    // 显示进度更新中消息
    showProgressUpdateMessage();
    
    // 模拟平台确认过程（实际环境中应通过后端API获取确认结果）
    setTimeout(() => {
      // 平台审核确认后，更新进度
      // 注意：在实际环境中，这个确认过程应该来自服务器
      const platformConfirmed = Math.random() > 0.5; // 模拟平台确认结果
      
      if (platformConfirmed && currentActiveIndex !== -1 && currentActiveIndex < trackingData.stages.length - 1) {
        // 当前阶段完成
        trackingData.stages[currentActiveIndex].status = 'completed';
        trackingData.stages[currentActiveIndex].timestamp = new Date().toISOString();
        
        // 下一阶段激活
        trackingData.stages[currentActiveIndex + 1].status = 'active';
        trackingData.currentStage = currentActiveIndex + 2; // +2是因为stage id从1开始
        
        // 显示成功消息
        showNotification("进度已更新", "平台已确认您的进度更新", "success");
      } else {
        // 平台未确认
        showNotification("进度更新等待中", "您的进度更新请求正在等待平台确认", "info");
      }
      
      // 随机更新其他信息
      if (!trackingData.productType && Math.random() > 0.7) {
        const products = ['牛仔', '丝绸', '棉麻', '羊毛'];
        trackingData.productType = products[Math.floor(Math.random() * products.length)];
      }
      
      if (!trackingData.needType && Math.random() > 0.7) {
        trackingData.needType = Math.random() > 0.5 ? '面料' : '服装';
      }
      
      if (!trackingData.quantity && trackingData.isSeller && Math.random() > 0.7) {
        const units = ['件', '米', '条'];
        trackingData.quantity = `${Math.floor(Math.random() * 1000) + 10}${units[Math.floor(Math.random() * units.length)]}`;
      }
      
      if (!trackingData.budgetRange && trackingData.isBuyer && Math.random() > 0.7) {
        const min = Math.floor(Math.random() * 500) + 50;
        const max = min + Math.floor(Math.random() * 500) + 50;
        trackingData.budgetRange = `${min}-${max}元`;
      }
      
      // 更新最后更新时间
      trackingData.lastUpdated = new Date().toISOString();
      
      // 保存更新后的数据
      localStorage.setItem('trackingData', JSON.stringify(trackingData));
      
      // 重新初始化进度面板
      initTrackingPanel();
    }, 2000); // 模拟平台确认延迟
  }
  
  // 显示进度更新中的消息
  function showProgressUpdateMessage() {
    const notification = document.createElement('div');
    notification.classList.add('progress-notification', 'updating');
    notification.innerHTML = `
      <div class="notification-icon">
        <div class="loading-spinner"></div>
      </div>
      <div class="notification-content">
        <h4>进度更新请求已提交</h4>
        <p>正在等待平台确认，这可能需要一些时间...</p>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // 1.5秒后移除通知
    setTimeout(() => {
      notification.classList.add('fade-out');
      setTimeout(() => {
        if (document.body.contains(notification)) {
          document.body.removeChild(notification);
        }
      }, 500);
    }, 1500);
  }
  
  // 显示通知
  function showNotification(title, message, type = "info") {
    const notification = document.createElement('div');
    notification.classList.add('progress-notification', type);
    
    let icon = '';
    if (type === 'success') {
      icon = '<div class="notification-icon success">✓</div>';
    } else if (type === 'error') {
      icon = '<div class="notification-icon error">✗</div>';
    } else {
      icon = '<div class="notification-icon info">i</div>';
    }
    
    notification.innerHTML = `
      ${icon}
      <div class="notification-content">
        <h4>${title}</h4>
        <p>${message}</p>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // 3秒后移除通知
    setTimeout(() => {
      notification.classList.add('fade-out');
      setTimeout(() => {
        if (document.body.contains(notification)) {
          document.body.removeChild(notification);
        }
      }, 500);
    }, 3000);
  }
  
  // 获取状态文本描述
  function getStatusText(status) {
    switch(status) {
      case 'pending': return '等待中';
      case 'active': return '进行中';
      case 'completed': return '已完成';
      default: return '未知状态';
    }
  }
  
  // 格式化日期时间
  function formatDateTime(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    
    return `${year}-${month}-${day} ${hours}:${minutes}`;
  }
  
  // 获取时间差异的友好描述
  function getTimeDifference(oldDate, newDate) {
    const diffMs = newDate - oldDate;
    const diffSec = Math.floor(diffMs / 1000);
    const diffMin = Math.floor(diffSec / 60);
    const diffHour = Math.floor(diffMin / 60);
    const diffDay = Math.floor(diffHour / 24);
    
    if (diffSec < 60) {
      return '刚刚';
    } else if (diffMin < 60) {
      return `${diffMin}分钟前`;
    } else if (diffHour < 24) {
      return `${diffHour}小时前`;
    } else if (diffDay < 30) {
      return `${diffDay}天前`;
    } else {
      const month = String(oldDate.getMonth() + 1).padStart(2, '0');
      const day = String(oldDate.getDate()).padStart(2, '0');
      return `${month}-${day}`;
    }
  }
  
  // 获取已完成阶段的数量
  function getCompletedStages(stages) {
    return stages.filter(stage => stage.status === 'completed').length;
  }
  
  // 判断消息是否包含具体产品信息
  function containsSpecificProductInfo(message) {
    // 匹配具体的产品描述
    const patterns = [
      /\d+[件条米吨]/,  // 匹配数量单位
      /款式|型号|规格|尺寸|颜色|成分/,  // 匹配产品属性
      /牌|品牌|厂家|生产商/,  // 匹配品牌信息
      /价格|报价|元\/[米件条]/  // 匹配价格信息
    ];
    
    return patterns.some(pattern => pattern.test(message));
  }
  
  // 根据不同阶段和用户身份获取下一步操作指引
  function getNextSteps(stageId, stageStatus, trackingData) {
    const wechatContact = '<strong>JJ1598929032</strong>';
    const isSeller = trackingData.isSeller;
    const isBuyer = trackingData.isBuyer;
    
    // 如果阶段已完成，返回空步骤列表
    if (stageStatus === 'completed') {
      return [`此阶段已完成，请继续推进下一阶段`, `如有问题请添加微信：${wechatContact} 咨询`];
    }
    
    // 如果阶段未开始，返回等待指引
    if (stageStatus === 'pending') {
      return [`请等待前序阶段完成后再进行此阶段`, `如需加速进度，请添加微信：${wechatContact}`];
    }
    
    // 阶段处于活跃状态，根据不同情况返回指引
    if (isSeller) {
      switch(stageId) {
        case 1:
          return [
            `详细描述您要出售的产品类型、数量和期望价格`,
            `提供产品图片或详细规格说明`,
            `添加微信：${wechatContact} 加速对接进程`
          ];
        case 2:
          return [
            `耐心等待系统为您匹配潜在买家`,
            `完善您的产品细节信息以提高匹配率`,
            `添加微信：${wechatContact} 获取实时匹配进度`
          ];
        case 3:
          return [
            `准备好详细的产品说明和价格资料`,
            `确认您的发货能力和库存情况`,
            `添加微信：${wechatContact} 了解买家需求细节`
          ];
        case 4:
          return [
            `准备详细的产品资料和报价单`,
            `确认您的仓库库存和物流配送方案`,
            `添加微信：${wechatContact} 与买家直接沟通`
          ];
        case 5:
          return [
            `确认交易细节和付款方式`,
            `准备产品发货和售后服务方案`,
            `必须添加微信：${wechatContact} 完成最终交易`
          ];
        default:
          return [`添加微信：${wechatContact} 获取指导`];
      }
    } else if (isBuyer) {
      switch(stageId) {
        case 1:
          return [
            `详细描述您需要的产品类型、数量和预算`,
            `说明您对产品质量和规格的要求`,
            `添加微信：${wechatContact} 加速对接进程`
          ];
        case 2:
          return [
            `耐心等待系统为您匹配合适库存`,
            `完善您的需求细节以提高匹配精准度`,
            `添加微信：${wechatContact} 获取实时匹配进度`
          ];
        case 3:
          return [
            `准备好与卖家沟通的具体问题`,
            `确认您的采购预算和付款方式`,
            `添加微信：${wechatContact} 了解卖家确认进度`
          ];
        case 4:
          return [
            `仔细评估卖家提供的产品信息`,
            `确认产品是否满足您的需求`,
            `添加微信：${wechatContact} 与卖家直接沟通`
          ];
        case 5:
          return [
            `确认交易细节和收货地址`,
            `准备付款和验收产品`,
            `必须添加微信：${wechatContact} 完成最终交易`
          ];
        default:
          return [`添加微信：${wechatContact} 获取指导`];
      }
    } else {
      // 用户身份未确定
      switch(stageId) {
        case 1:
          return [
            `请在聊天框中说明您是希望出售还是采购`,
            `详细描述您的需求或产品信息`,
            `添加微信：${wechatContact} 获取专业指导`
          ];
        default:
          return [
            `请先明确您的身份（买家/卖家）`,
            `添加微信：${wechatContact} 获取帮助`
          ];
      }
    }
  }
  
  // 为动画添加稳定性修复
  function animateStats() {
    const statValues = document.querySelectorAll('.stat-value');
    
    statValues.forEach(statValue => {
      const targetValue = parseInt(statValue.textContent, 10);
      let currentValue = 0;
      const duration = 2000;
      const stepTime = 20;
      const totalSteps = duration / stepTime;
      const stepValue = targetValue / totalSteps;
      
      function updateValue() {
        currentValue += stepValue;
        
        if (currentValue < targetValue) {
          statValue.textContent = Math.floor(currentValue);
          requestAnimationFrame(updateValue);
        } else {
          statValue.textContent = targetValue;
          
          // 添加以防止数字变化导致布局移动
          statValue.style.minWidth = statValue.offsetWidth + 'px';
        }
      }
      
      // 当元素进入视口时启动动画
      const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            updateValue();
            observer.unobserve(entry.target);
          }
        });
      });
      
      observer.observe(statValue);
    });
  }
  
  // 导航栏初始化与滚动效果
  function initNavbar() {
    const navbar = document.querySelector('.navbar');
    
    // 滚动监听
    window.addEventListener('scroll', function() {
      if (window.scrollY > 50) {
        navbar.classList.add('scrolled');
      } else {
        navbar.classList.remove('scrolled');
      }
    });
    
    // 导航菜单项点击激活效果
    const navLinks = document.querySelectorAll('.main-nav a');
    
    navLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        // 获取目标部分的ID
        const targetId = this.getAttribute('href');
        
        // 仅对页内锚点链接进行处理
        if (targetId.startsWith('#')) {
          e.preventDefault();
          
          const targetSection = document.querySelector(targetId);
          
          if (targetSection) {
            // 平滑滚动到目标部分
            window.scrollTo({
              top: targetSection.offsetTop - 70, // 减去导航栏高度
              behavior: 'smooth'
            });
            
            // 更新URL锚点，但不跳转
            history.pushState(null, null, targetId);
            
            // 移除所有active类
            navLinks.forEach(item => {
              item.parentElement.classList.remove('active');
            });
            
            // 为当前点击项添加active类
            this.parentElement.classList.add('active');
          }
        }
      });
    });
  }
  
  // 添加滚动监听，高亮当前视图中的部分
  function initScrollSpy() {
    // 获取所有主要部分
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.main-nav a');
    
    // 添加滚动监听
    window.addEventListener('scroll', function() {
      // 当前滚动位置
      const scrollPosition = window.scrollY + 100; // 添加一些偏移以提前激活
      
      // 检查每个部分的位置
      sections.forEach(section => {
        // 获取部分的顶部和底部位置
        const sectionTop = section.offsetTop;
        const sectionBottom = sectionTop + section.offsetHeight;
        
        // 检查当前滚动位置是否在该部分
        if (scrollPosition >= sectionTop && scrollPosition < sectionBottom) {
          // 找到对应的导航链接
          const targetId = '#' + section.getAttribute('id');
          
          // 移除所有active类
          navLinks.forEach(link => {
            link.parentElement.classList.remove('active');
            
            // 为当前部分的链接添加active类
            if (link.getAttribute('href') === targetId) {
              link.parentElement.classList.add('active');
            }
          });
        }
      });
    });
  }
  
  // 平滑滚动效果
  function addSmoothScrolling() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function(e) {
        const targetId = this.getAttribute('href');
        
        if (targetId === '#') return;
        
        const target = document.querySelector(targetId);
        
        if (target) {
          e.preventDefault();
          
          window.scrollTo({
            top: target.offsetTop - 70, // 减去导航栏高度
            behavior: 'smooth'
          });
          
          // 更新URL锚点，但不跳转
          history.pushState(null, null, targetId);
        }
      });
    });
  }
  
  // 初始化深色模式
  function initDarkMode() {
    const darkModeToggle = document.querySelector('.dark-mode-toggle');
    if (darkModeToggle) {
      darkModeToggle.addEventListener('click', function() {
        document.body.classList.toggle('dark-mode');
        if (document.body.classList.contains('dark-mode')) {
          this.textContent = '☀️';
        } else {
          this.textContent = '🌙';
        }
      });
    }
  }
});
  
  // 初始化对接进度面板
  function initTrackingPanel() {
    const trackingPanel = document.querySelector('.process-flow');
    if (!trackingPanel) return;
  
    // 初始化进度流程图 - 从localStorage获取当前状态
    let currentTrackingData = JSON.parse(localStorage.getItem('trackingData'));
    
    // 如果没有保存的跟踪数据或者是新会话，初始化默认数据
    if (!currentTrackingData) {
      currentTrackingData = {
        currentStage: 1,
        stages: [
          { id: 1, name: '需求提交', status: 'pending', timestamp: new Date().toISOString() },
          { id: 2, name: '匹配库存', status: 'pending', timestamp: null },
          { id: 3, name: '卖家确认', status: 'pending', timestamp: null },
          { id: 4, name: '买家确认', status: 'pending', timestamp: null },
          { id: 5, name: '确认对接', status: 'pending', timestamp: null }
        ],
        lastUpdated: new Date().toISOString(),
        isSeller: false,
        isBuyer: false,
        needType: '',
        productType: '',
        quantity: '',
        budgetRange: ''
      };
      
      // 保存初始数据
      localStorage.setItem('trackingData', JSON.stringify(currentTrackingData));
    }
    
    // 清空默认内容
    trackingPanel.innerHTML = '';
    
    // 创建进度条
    const progressBar = document.createElement('div');
    progressBar.classList.add('progress-bar');
    
    // 添加各个阶段
    currentTrackingData.stages.forEach(stage => {
      const stageElement = document.createElement('div');
      stageElement.classList.add('progress-stage', `status-${stage.status}`);
      stageElement.dataset.stageId = stage.id;
      
      const stageNumber = document.createElement('div');
      stageNumber.classList.add('stage-number');
      stageNumber.textContent = stage.id;
      
      const stageName = document.createElement('div');
      stageName.classList.add('stage-name');
      stageName.textContent = stage.name;
      
      stageElement.appendChild(stageNumber);
      stageElement.appendChild(stageName);
      
      // 点击阶段显示详情
      stageElement.addEventListener('click', () => showStageDetail(stage, currentTrackingData));
      
      progressBar.appendChild(stageElement);
      
      // 添加连接线（除了最后一个阶段）
      if (stage.id < currentTrackingData.stages.length) {
        const connector = document.createElement('div');
        connector.classList.add('stage-connector', `status-${stage.status}`);
        progressBar.appendChild(connector);
      }
    });
    
    trackingPanel.appendChild(progressBar);
    
    // 添加说明文字
    const statusInfo = document.createElement('div');
    statusInfo.classList.add('status-info');
    
    // 找到当前活跃的阶段
    const activeStage = currentTrackingData.stages.find(stage => stage.status === 'active');
    const stageName = activeStage ? activeStage.name : '准备中';
    
    // 计算最后更新时间
    const lastUpdateTime = getTimeDifference(new Date(currentTrackingData.lastUpdated), new Date());
    
    statusInfo.innerHTML = `当前状态：<span class="status-active">${stageName}</span> · 更新于 ${lastUpdateTime}`;
    trackingPanel.appendChild(statusInfo);
    
    // 添加进度概要
    const progressSummary = document.createElement('div');
    progressSummary.classList.add('progress-summary');
    
    // 根据用户身份显示不同的进度概要
    const isSeller = currentTrackingData.isSeller;
    const isBuyer = currentTrackingData.isBuyer;
    
    // 获取买卖需求类型
    const needTypeDisplay = currentTrackingData.needType ? currentTrackingData.needType : '等待确认';
    const productTypeDisplay = currentTrackingData.productType ? currentTrackingData.productType : '等待确认';
    
    let summaryHTML = '';
    if (isSeller) {
      summaryHTML = `
        <h4>出售信息摘要</h4>
        <ul>
          <li>商品类型: ${productTypeDisplay}</li>
          <li>库存数量: ${currentTrackingData.quantity || '等待确认'}</li>
          <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
        </ul>
      `;
    } else if (isBuyer) {
      summaryHTML = `
        <h4>采购信息摘要</h4>
        <ul>
          <li>需求类型: ${needTypeDisplay}</li>
          <li>产品类型: ${productTypeDisplay}</li>
          <li>预算范围: ${currentTrackingData.budgetRange || '等待确认'}</li>
          <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
        </ul>
      `;
    } else {
      summaryHTML = `
        <h4>对接信息摘要</h4>
        <ul>
          <li>请在聊天中说明您是需要出售还是采购</li>
          <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
        </ul>
      `;
    }
    
    progressSummary.innerHTML = summaryHTML;
    trackingPanel.appendChild(progressSummary);
    
    // 添加刷新按钮
    const refreshButton = document.createElement('button');
    refreshButton.classList.add('refresh-tracking');
    refreshButton.textContent = '请求更新进度';
    refreshButton.addEventListener('click', function() {
      // 请求平台更新进度
      updateTrackingProgress();
      
      // 添加刷新动画
      this.classList.add('refreshing');
      // 更改按钮文本
      this.textContent = '正在请求平台确认...';
      setTimeout(() => {
        this.classList.remove('refreshing');
        this.textContent = '请求更新进度';
      }, 2000);
    });
    
    // 添加平台确认说明
    const confirmNote = document.createElement('div');
    confirmNote.classList.add('platform-note');
    confirmNote.innerHTML = '提示：所有进度更新需要平台确认后才能生效';
    
    trackingPanel.appendChild(refreshButton);
    trackingPanel.appendChild(confirmNote);
  }
  
  // 根据聊天内容更新对接进度
  function updateTrackingFromChat(message, isSeller, isBuyer) {
    // 获取当前进度数据
    let trackingData = JSON.parse(localStorage.getItem('trackingData'));
    
    if (!trackingData) {
      // 如果没有数据，初始化默认数据
      trackingData = {
        currentStage: 1,
        stages: [
          { id: 1, name: '需求提交', status: 'pending', timestamp: new Date().toISOString() },
          { id: 2, name: '匹配库存', status: 'pending', timestamp: null },
          { id: 3, name: '卖家确认', status: 'pending', timestamp: null },
          { id: 4, name: '买家确认', status: 'pending', timestamp: null },
          { id: 5, name: '确认对接', status: 'pending', timestamp: null }
        ],
        lastUpdated: new Date().toISOString(),
        isSeller: false,
        isBuyer: false,
        needType: '',
        productType: '',
        quantity: '',
        budgetRange: ''
      };
    }
    
    // 更新买卖身份
    if (isSeller !== undefined) {
      trackingData.isSeller = isSeller;
    }
    
    if (isBuyer !== undefined) {
      trackingData.isBuyer = isBuyer;
    }
    
    // 处理阶段1：需求提交
    if (trackingData.stages[0].status !== 'completed') {
      // 只要有消息，就认为需求已提交
      trackingData.stages[0].status = 'completed';
      trackingData.stages[0].timestamp = new Date().toISOString();
      
      // 进入第二阶段
      trackingData.stages[1].status = 'active';
      trackingData.currentStage = 2;
    }
    
    // 提取产品类型信息
    const productTypes = ['牛仔', '丝绸', '棉麻', '羊毛', '尼龙', '涤纶'];
    for (const type of productTypes) {
      if (message.includes(type)) {
        trackingData.productType = type;
        break;
      }
    }
    
    // 提取需求类型
    if (message.includes('面料') || message.includes('布料') || message.includes('布')) {
      trackingData.needType = '面料';
    } else if (message.includes('服装') || message.includes('衣服') || message.includes('成衣')) {
      trackingData.needType = '服装';
    }
    
    // 提取数量信息
    const quantityMatch = message.match(/(\d+)([件条米吨个])/);
    if (quantityMatch) {
      trackingData.quantity = quantityMatch[0];
    }
    
    // 提取价格/预算信息
    if (message.includes('价格') || message.includes('多少钱') || message.includes('预算')) {
      const priceMatch = message.match(/(\d+)[-~到至](\d+)[元块]/);
      if (priceMatch) {
        trackingData.budgetRange = priceMatch[0];
      }
    }
    
    // 阶段2：匹配库存 - 根据关键词判断
    if (trackingData.currentStage === 2 && trackingData.stages[1].status === 'active') {
      // 当用户提供了具体的产品和需求类型时，进入到下一阶段
      if (trackingData.productType && trackingData.needType) {
        if (message.includes('匹配') || message.includes('库存') || message.includes('资源') || 
            message.includes('找到') || message.includes('有货') || containsSpecificProductInfo(message)) {
          trackingData.stages[1].status = 'completed';
          trackingData.stages[1].timestamp = new Date().toISOString();
          
          // 根据用户身份决定下一步
          if (trackingData.isSeller) {
            // 卖家寻找买家，进入到买家确认阶段
            trackingData.stages[3].status = 'active';
            trackingData.currentStage = 4;
          } else if (trackingData.isBuyer) {
            // 买家寻找卖家，进入到卖家确认阶段
            trackingData.stages[2].status = 'active';
            trackingData.currentStage = 3;
          }
        }
      }
    }
    
    // 阶段3：卖家确认
    if (trackingData.currentStage === 3 && trackingData.stages[2].status === 'active') {
      if (message.includes('卖家确认') || message.includes('供应商确认') || message.includes('已确认') || 
          message.includes('可以供应') || message.includes('有库存')) {
        trackingData.stages[2].status = 'completed';
        trackingData.stages[2].timestamp = new Date().toISOString();
        
        // 进入买家确认阶段
        trackingData.stages[3].status = 'active';
        trackingData.currentStage = 4;
      }
    }
    
    // 阶段4：买家确认
    if (trackingData.currentStage === 4 && trackingData.stages[3].status === 'active') {
      if (message.includes('买家确认') || message.includes('客户确认') || message.includes('确认购买') || 
          message.includes('接受') || message.includes('满意')) {
        trackingData.stages[3].status = 'completed';
        trackingData.stages[3].timestamp = new Date().toISOString();
        
        // 进入最终确认阶段
        trackingData.stages[4].status = 'active';
        trackingData.currentStage = 5;
      }
    }
    
    // 阶段5：确认对接
    if (trackingData.currentStage === 5 && trackingData.stages[4].status === 'active') {
      if (message.includes('交易成功') || message.includes('已对接') || message.includes('成交') || 
          message.includes('已完成') || message.includes('感谢合作')) {
        trackingData.stages[4].status = 'completed';
        trackingData.stages[4].timestamp = new Date().toISOString();
      }
    }
    
    // 更新最后更新时间
    trackingData.lastUpdated = new Date().toISOString();
    
    // 保存更新后的数据
    localStorage.setItem('trackingData', JSON.stringify(trackingData));
    
    // 重新初始化进度面板以显示最新状态
    initTrackingPanel();
  }
  
  // 显示阶段详细信息
  function showStageDetail(stage, trackingData) {
    const wechatContact = '<strong>JJ1598929032</strong>';
    const modal = document.createElement('div');
    modal.classList.add('progress-modal');
    
    const modalContent = document.createElement('div');
    modalContent.classList.add('modal-content');
    
    // 添加关闭按钮
    const closeBtn = document.createElement('button');
    closeBtn.classList.add('close-modal');
    closeBtn.innerHTML = '&times;';
    closeBtn.addEventListener('click', function() {
      document.body.removeChild(modal);
    });
    
    // 阶段详情内容
    const stageContent = document.createElement('div');
    stageContent.classList.add('stage-detail');
    
    const stageTitle = document.createElement('h3');
    stageTitle.innerHTML = `阶段 ${stage.id}: ${stage.name} <span class="stage-status status-${stage.status}">${getStatusText(stage.status)}</span>`;
    
    const stageTimestamp = document.createElement('div');
    stageTimestamp.classList.add('stage-timestamp');
    if (stage.timestamp) {
      const date = new Date(stage.timestamp);
      stageTimestamp.textContent = `更新时间: ${formatDateTime(date)}`;
    } else {
      stageTimestamp.textContent = '尚未开始';
    }
    
    const stageDescription = document.createElement('p');
    let descriptionText = '';
    
    // 根据不同阶段和用户身份显示不同内容
    const isSeller = trackingData.isSeller;
    const isBuyer = trackingData.isBuyer;
    
    switch(stage.id) {
      case 1:
        if (stage.status === 'completed') {
          descriptionText = `您的${isSeller ? '出售' : isBuyer ? '采购' : ''}需求已成功提交！我们的系统正在进行初步分析，以便更好地匹配合适的${isSeller ? '买家' : '资源'}。如需补充具体要求或查询进度，请添加客服微信：${wechatContact}`;
        } else {
          descriptionText = `请在聊天框中说明您的${isSeller ? '出售' : isBuyer ? '采购' : '需求'}意向，系统将自动为您匹配${isSeller ? '买家' : '资源'}。您可以随时添加客服微信：${wechatContact} 获取帮助。`;
        }
        break;
      case 2:
        if (stage.status === 'completed') {
          descriptionText = `系统已成功为您匹配到符合要求的${isSeller ? '潜在买家' : '库存资源'}。现在进入${isSeller ? '买家' : '卖家'}确认阶段。如需了解匹配详情，请添加微信：${wechatContact}`;
        } else if (stage.status === 'active') {
          descriptionText = `系统正在根据您提供的要求匹配${isSeller ? '买家资源' : '库存'}。这个过程通常需要12小时内完成。如需加快进度或提供更详细的需求，请立即添加微信：${wechatContact}`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在需求提交后自动为您匹配${isSeller ? '买家' : '库存资源'}。`;
        }
        break;
      case 3:
        if (stage.status === 'completed') {
          descriptionText = `卖家已确认库存有效，现在等待买家最终确认。如有任何问题，请添加微信：${wechatContact}`;
        } else if (stage.status === 'active') {
          descriptionText = `我们已找到符合要求的库存，正在等待卖家确认。通常会在24小时内得到回复。如想优先处理或了解更多详情，请添加微信：${wechatContact}`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在匹配到合适库存后联系卖家确认。`;
        }
        break;
      case 4:
        if (stage.status === 'completed') {
          descriptionText = `买家已确认购买意向，现在进入最终确认阶段。请添加微信：${wechatContact} 完成交易细节确认。`;
        } else if (stage.status === 'active') {
          descriptionText = `卖家已确认库存有效，等待您的最终确认。为确保交易顺利进行，请添加微信：${wechatContact} 进行后续沟通`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在卖家确认后联系买家最终确认。`;
        }
        break;
      case 5:
        if (stage.status === 'completed') {
          descriptionText = `恭喜！交易已成功对接。请通过微信：${wechatContact} 完成后续交易流程。`;
        } else if (stage.status === 'active') {
          descriptionText = `恭喜！双方已达成对接意向。为保障交易安全和顺利完成后续流程，请立即添加微信：${wechatContact} 获取详细指导`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在买家确认后进入最终对接确认阶段。`;
        }
        break;
      default:
        descriptionText = `当前阶段状态更新中。如需及时了解最新进展，请添加客服微信：${wechatContact}`;
    }
    
    stageDescription.innerHTML = descriptionText;
    
    const nextStepsTitle = document.createElement('h4');
    nextStepsTitle.textContent = '下一步操作';
    
    const nextStepsList = document.createElement('ul');
    const nextSteps = getNextSteps(stage.id, stage.status, trackingData);
    
    nextSteps.forEach(step => {
      const listItem = document.createElement('li');
      listItem.innerHTML = step;
      nextStepsList.appendChild(listItem);
    });
    
    // 添加平台确认提示
    const platformConfirmNote = document.createElement('div');
    platformConfirmNote.classList.add('platform-confirmation-note');
    platformConfirmNote.innerHTML = `<i>注意：对接进度由平台根据实际情况确认更新，阶段进度无法手动修改。如需加速进度，请添加客服微信：${wechatContact}</i>`;
    
    stageContent.appendChild(stageTitle);
    stageContent.appendChild(stageTimestamp);
    stageContent.appendChild(stageDescription);
    stageContent.appendChild(nextStepsTitle);
    stageContent.appendChild(nextStepsList);
    stageContent.appendChild(platformConfirmNote);
    
    modalContent.appendChild(closeBtn);
    modalContent.appendChild(stageContent);
    modal.appendChild(modalContent);
    
    document.body.appendChild(modal);
  }
  
  // 更新对接进度
  function updateTrackingProgress() {
    let trackingData = JSON.parse(localStorage.getItem('trackingData'));
    
    if (!trackingData) return;
    
    // 获取当前活跃阶段
    let currentActiveIndex = trackingData.stages.findIndex(stage => stage.status === 'active');
    
    // 显示进度更新中消息
    showProgressUpdateMessage();
    
    // 模拟平台确认过程（实际环境中应通过后端API获取确认结果）
    setTimeout(() => {
      // 平台审核确认后，更新进度
      // 注意：在实际环境中，这个确认过程应该来自服务器
      const platformConfirmed = Math.random() > 0.5; // 模拟平台确认结果
      
      if (platformConfirmed && currentActiveIndex !== -1 && currentActiveIndex < trackingData.stages.length - 1) {
        // 当前阶段完成
        trackingData.stages[currentActiveIndex].status = 'completed';
        trackingData.stages[currentActiveIndex].timestamp = new Date().toISOString();
        
        // 下一阶段激活
        trackingData.stages[currentActiveIndex + 1].status = 'active';
        trackingData.currentStage = currentActiveIndex + 2; // +2是因为stage id从1开始
        
        // 显示成功消息
        showNotification("进度已更新", "平台已确认您的进度更新", "success");
      } else {
        // 平台未确认
        showNotification("进度更新等待中", "您的进度更新请求正在等待平台确认", "info");
      }
      
      // 随机更新其他信息
      if (!trackingData.productType && Math.random() > 0.7) {
        const products = ['牛仔', '丝绸', '棉麻', '羊毛'];
        trackingData.productType = products[Math.floor(Math.random() * products.length)];
      }
      
      if (!trackingData.needType && Math.random() > 0.7) {
        trackingData.needType = Math.random() > 0.5 ? '面料' : '服装';
      }
      
      if (!trackingData.quantity && trackingData.isSeller && Math.random() > 0.7) {
        const units = ['件', '米', '条'];
        trackingData.quantity = `${Math.floor(Math.random() * 1000) + 10}${units[Math.floor(Math.random() * units.length)]}`;
      }
      
      if (!trackingData.budgetRange && trackingData.isBuyer && Math.random() > 0.7) {
        const min = Math.floor(Math.random() * 500) + 50;
        const max = min + Math.floor(Math.random() * 500) + 50;
        trackingData.budgetRange = `${min}-${max}元`;
      }
      
      // 更新最后更新时间
      trackingData.lastUpdated = new Date().toISOString();
      
      // 保存更新后的数据
      localStorage.setItem('trackingData', JSON.stringify(trackingData));
      
      // 重新初始化进度面板
      initTrackingPanel();
    }, 2000); // 模拟平台确认延迟
  }
  
  // 显示进度更新中的消息
  function showProgressUpdateMessage() {
    const notification = document.createElement('div');
    notification.classList.add('progress-notification', 'updating');
    notification.innerHTML = `
      <div class="notification-icon">
        <div class="loading-spinner"></div>
      </div>
      <div class="notification-content">
        <h4>进度更新请求已提交</h4>
        <p>正在等待平台确认，这可能需要一些时间...</p>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // 1.5秒后移除通知
    setTimeout(() => {
      notification.classList.add('fade-out');
      setTimeout(() => {
        if (document.body.contains(notification)) {
          document.body.removeChild(notification);
        }
      }, 500);
    }, 1500);
  }
  
  // 显示通知
  function showNotification(title, message, type = "info") {
    const notification = document.createElement('div');
    notification.classList.add('progress-notification', type);
    
    let icon = '';
    if (type === 'success') {
      icon = '<div class="notification-icon success">✓</div>';
    } else if (type === 'error') {
      icon = '<div class="notification-icon error">✗</div>';
    } else {
      icon = '<div class="notification-icon info">i</div>';
    }
    
    notification.innerHTML = `
      ${icon}
      <div class="notification-content">
        <h4>${title}</h4>
        <p>${message}</p>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // 3秒后移除通知
    setTimeout(() => {
      notification.classList.add('fade-out');
      setTimeout(() => {
        if (document.body.contains(notification)) {
          document.body.removeChild(notification);
        }
      }, 500);
    }, 3000);
  }
  
  // 获取状态文本描述
  function getStatusText(status) {
    switch(status) {
      case 'pending': return '等待中';
      case 'active': return '进行中';
      case 'completed': return '已完成';
      default: return '未知状态';
    }
  }
  
  // 格式化日期时间
  function formatDateTime(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    
    return `${year}-${month}-${day} ${hours}:${minutes}`;
  }
  
  // 获取时间差异的友好描述
  function getTimeDifference(oldDate, newDate) {
    const diffMs = newDate - oldDate;
    const diffSec = Math.floor(diffMs / 1000);
    const diffMin = Math.floor(diffSec / 60);
    const diffHour = Math.floor(diffMin / 60);
    const diffDay = Math.floor(diffHour / 24);
    
    if (diffSec < 60) {
      return '刚刚';
    } else if (diffMin < 60) {
      return `${diffMin}分钟前`;
    } else if (diffHour < 24) {
      return `${diffHour}小时前`;
    } else if (diffDay < 30) {
      return `${diffDay}天前`;
    } else {
      const month = String(oldDate.getMonth() + 1).padStart(2, '0');
      const day = String(oldDate.getDate()).padStart(2, '0');
      return `${month}-${day}`;
    }
  }
  
  // 获取已完成阶段的数量
  function getCompletedStages(stages) {
    return stages.filter(stage => stage.status === 'completed').length;
  }
  
  // 判断消息是否包含具体产品信息
  function containsSpecificProductInfo(message) {
    // 匹配具体的产品描述
    const patterns = [
      /\d+[件条米吨]/,  // 匹配数量单位
      /款式|型号|规格|尺寸|颜色|成分/,  // 匹配产品属性
      /牌|品牌|厂家|生产商/,  // 匹配品牌信息
      /价格|报价|元\/[米件条]/  // 匹配价格信息
    ];
    
    return patterns.some(pattern => pattern.test(message));
  }
  
  // 根据不同阶段和用户身份获取下一步操作指引
  function getNextSteps(stageId, stageStatus, trackingData) {
    const wechatContact = '<strong>JJ1598929032</strong>';
    const isSeller = trackingData.isSeller;
    const isBuyer = trackingData.isBuyer;
    
    // 如果阶段已完成，返回空步骤列表
    if (stageStatus === 'completed') {
      return [`此阶段已完成，请继续推进下一阶段`, `如有问题请添加微信：${wechatContact} 咨询`];
    }
    
    // 如果阶段未开始，返回等待指引
    if (stageStatus === 'pending') {
      return [`请等待前序阶段完成后再进行此阶段`, `如需加速进度，请添加微信：${wechatContact}`];
    }
    
    // 阶段处于活跃状态，根据不同情况返回指引
    if (isSeller) {
      switch(stageId) {
        case 1:
          return [
            `详细描述您要出售的产品类型、数量和期望价格`,
            `提供产品图片或详细规格说明`,
            `添加微信：${wechatContact} 加速对接进程`
          ];
        case 2:
          return [
            `耐心等待系统为您匹配潜在买家`,
            `完善您的产品细节信息以提高匹配率`,
            `添加微信：${wechatContact} 获取实时匹配进度`
          ];
        case 3:
          return [
            `准备好详细的产品说明和价格资料`,
            `确认您的发货能力和库存情况`,
            `添加微信：${wechatContact} 了解买家需求细节`
          ];
        case 4:
          return [
            `准备详细的产品资料和报价单`,
            `确认您的仓库库存和物流配送方案`,
            `添加微信：${wechatContact} 与买家直接沟通`
          ];
        case 5:
          return [
            `确认交易细节和付款方式`,
            `准备产品发货和售后服务方案`,
            `必须添加微信：${wechatContact} 完成最终交易`
          ];
        default:
          return [`添加微信：${wechatContact} 获取指导`];
      }
    } else if (isBuyer) {
      switch(stageId) {
        case 1:
          return [
            `详细描述您需要的产品类型、数量和预算`,
            `说明您对产品质量和规格的要求`,
            `添加微信：${wechatContact} 加速对接进程`
          ];
        case 2:
          return [
            `耐心等待系统为您匹配合适库存`,
            `完善您的需求细节以提高匹配精准度`,
            `添加微信：${wechatContact} 获取实时匹配进度`
          ];
        case 3:
          return [
            `准备好与卖家沟通的具体问题`,
            `确认您的采购预算和付款方式`,
            `添加微信：${wechatContact} 了解卖家确认进度`
          ];
        case 4:
          return [
            `仔细评估卖家提供的产品信息`,
            `确认产品是否满足您的需求`,
            `添加微信：${wechatContact} 与卖家直接沟通`
          ];
        case 5:
          return [
            `确认交易细节和收货地址`,
            `准备付款和验收产品`,
            `必须添加微信：${wechatContact} 完成最终交易`
          ];
        default:
          return [`添加微信：${wechatContact} 获取指导`];
      }
    } else {
      // 用户身份未确定
      switch(stageId) {
        case 1:
          return [
            `请在聊天框中说明您是希望出售还是采购`,
            `详细描述您的需求或产品信息`,
            `添加微信：${wechatContact} 获取专业指导`
          ];
        default:
          return [
            `请先明确您的身份（买家/卖家）`,
            `添加微信：${wechatContact} 获取帮助`
          ];
      }
    }
  }
  
  // 为动画添加稳定性修复
  function animateStats() {
    const statValues = document.querySelectorAll('.stat-value');
    
    statValues.forEach(statValue => {
      const targetValue = parseInt(statValue.textContent, 10);
      let currentValue = 0;
      const duration = 2000;
      const stepTime = 20;
      const totalSteps = duration / stepTime;
      const stepValue = targetValue / totalSteps;
      
      function updateValue() {
        currentValue += stepValue;
        
        if (currentValue < targetValue) {
          statValue.textContent = Math.floor(currentValue);
          requestAnimationFrame(updateValue);
        } else {
          statValue.textContent = targetValue;
          
          // 添加以防止数字变化导致布局移动
          statValue.style.minWidth = statValue.offsetWidth + 'px';
        }
      }
      
      // 当元素进入视口时启动动画
      const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            updateValue();
            observer.unobserve(entry.target);
          }
        });
      });
      
      observer.observe(statValue);
    });
  }
  
  // 导航栏初始化与滚动效果
  function initNavbar() {
    const navbar = document.querySelector('.navbar');
    
    // 滚动监听
    window.addEventListener('scroll', function() {
      if (window.scrollY > 50) {
        navbar.classList.add('scrolled');
      } else {
        navbar.classList.remove('scrolled');
      }
    });
    
    // 导航菜单项点击激活效果
    const navLinks = document.querySelectorAll('.main-nav a');
    
    navLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        // 获取目标部分的ID
        const targetId = this.getAttribute('href');
        
        // 仅对页内锚点链接进行处理
        if (targetId.startsWith('#')) {
          e.preventDefault();
          
          const targetSection = document.querySelector(targetId);
          
          if (targetSection) {
            // 平滑滚动到目标部分
            window.scrollTo({
              top: targetSection.offsetTop - 70, // 减去导航栏高度
              behavior: 'smooth'
            });
            
            // 更新URL锚点，但不跳转
            history.pushState(null, null, targetId);
            
            // 移除所有active类
            navLinks.forEach(item => {
              item.parentElement.classList.remove('active');
            });
            
            // 为当前点击项添加active类
            this.parentElement.classList.add('active');
          }
        }
      });
    });
  }
  
  // 添加滚动监听，高亮当前视图中的部分
  function initScrollSpy() {
    // 获取所有主要部分
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.main-nav a');
    
    // 添加滚动监听
    window.addEventListener('scroll', function() {
      // 当前滚动位置
      const scrollPosition = window.scrollY + 100; // 添加一些偏移以提前激活
      
      // 检查每个部分的位置
      sections.forEach(section => {
        // 获取部分的顶部和底部位置
        const sectionTop = section.offsetTop;
        const sectionBottom = sectionTop + section.offsetHeight;
        
        // 检查当前滚动位置是否在该部分
        if (scrollPosition >= sectionTop && scrollPosition < sectionBottom) {
          // 找到对应的导航链接
          const targetId = '#' + section.getAttribute('id');
          
          // 移除所有active类
          navLinks.forEach(link => {
            link.parentElement.classList.remove('active');
            
            // 为当前部分的链接添加active类
            if (link.getAttribute('href') === targetId) {
              link.parentElement.classList.add('active');
            }
          });
        }
      });
    });
  }
  
  // 平滑滚动效果
  function addSmoothScrolling() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function(e) {
        const targetId = this.getAttribute('href');
        
        if (targetId === '#') return;
        
        const target = document.querySelector(targetId);
        
        if (target) {
          e.preventDefault();
          
          window.scrollTo({
            top: target.offsetTop - 70, // 减去导航栏高度
            behavior: 'smooth'
          });
          
          // 更新URL锚点，但不跳转
          history.pushState(null, null, targetId);
        }
      });
    });
  }
  
  // 初始化深色模式
  function initDarkMode() {
    const darkModeToggle = document.querySelector('.dark-mode-toggle');
    if (darkModeToggle) {
      darkModeToggle.addEventListener('click', function() {
        document.body.classList.toggle('dark-mode');
        if (document.body.classList.contains('dark-mode')) {
          this.textContent = '☀️';
        } else {
          this.textContent = '🌙';
        }
      });
    }
  }
});
  
  // 初始化对接进度面板
  function initTrackingPanel() {
    const trackingPanel = document.querySelector('.process-flow');
    if (!trackingPanel) return;
  
    // 初始化进度流程图 - 从localStorage获取当前状态
    let currentTrackingData = JSON.parse(localStorage.getItem('trackingData'));
    
    // 如果没有保存的跟踪数据或者是新会话，初始化默认数据
    if (!currentTrackingData) {
      currentTrackingData = {
        currentStage: 1,
        stages: [
          { id: 1, name: '需求提交', status: 'pending', timestamp: new Date().toISOString() },
          { id: 2, name: '匹配库存', status: 'pending', timestamp: null },
          { id: 3, name: '卖家确认', status: 'pending', timestamp: null },
          { id: 4, name: '买家确认', status: 'pending', timestamp: null },
          { id: 5, name: '确认对接', status: 'pending', timestamp: null }
        ],
        lastUpdated: new Date().toISOString(),
        isSeller: false,
        isBuyer: false,
        needType: '',
        productType: '',
        quantity: '',
        budgetRange: ''
      };
      
      // 保存初始数据
      localStorage.setItem('trackingData', JSON.stringify(currentTrackingData));
    }
    
    // 清空默认内容
    trackingPanel.innerHTML = '';
    
    // 创建进度条
    const progressBar = document.createElement('div');
    progressBar.classList.add('progress-bar');
    
    // 添加各个阶段
    currentTrackingData.stages.forEach(stage => {
      const stageElement = document.createElement('div');
      stageElement.classList.add('progress-stage', `status-${stage.status}`);
      stageElement.dataset.stageId = stage.id;
      
      const stageNumber = document.createElement('div');
      stageNumber.classList.add('stage-number');
      stageNumber.textContent = stage.id;
      
      const stageName = document.createElement('div');
      stageName.classList.add('stage-name');
      stageName.textContent = stage.name;
      
      stageElement.appendChild(stageNumber);
      stageElement.appendChild(stageName);
      
      // 点击阶段显示详情
      stageElement.addEventListener('click', () => showStageDetail(stage, currentTrackingData));
      
      progressBar.appendChild(stageElement);
      
      // 添加连接线（除了最后一个阶段）
      if (stage.id < currentTrackingData.stages.length) {
        const connector = document.createElement('div');
        connector.classList.add('stage-connector', `status-${stage.status}`);
        progressBar.appendChild(connector);
      }
    });
    
    trackingPanel.appendChild(progressBar);
    
    // 添加说明文字
    const statusInfo = document.createElement('div');
    statusInfo.classList.add('status-info');
    
    // 找到当前活跃的阶段
    const activeStage = currentTrackingData.stages.find(stage => stage.status === 'active');
    const stageName = activeStage ? activeStage.name : '准备中';
    
    // 计算最后更新时间
    const lastUpdateTime = getTimeDifference(new Date(currentTrackingData.lastUpdated), new Date());
    
    statusInfo.innerHTML = `当前状态：<span class="status-active">${stageName}</span> · 更新于 ${lastUpdateTime}`;
    trackingPanel.appendChild(statusInfo);
    
    // 添加进度概要
    const progressSummary = document.createElement('div');
    progressSummary.classList.add('progress-summary');
    
    // 根据用户身份显示不同的进度概要
    const isSeller = currentTrackingData.isSeller;
    const isBuyer = currentTrackingData.isBuyer;
    
    // 获取买卖需求类型
    const needTypeDisplay = currentTrackingData.needType ? currentTrackingData.needType : '等待确认';
    const productTypeDisplay = currentTrackingData.productType ? currentTrackingData.productType : '等待确认';
    
    let summaryHTML = '';
    if (isSeller) {
      summaryHTML = `
        <h4>出售信息摘要</h4>
        <ul>
          <li>商品类型: ${productTypeDisplay}</li>
          <li>库存数量: ${currentTrackingData.quantity || '等待确认'}</li>
          <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
        </ul>
      `;
    } else if (isBuyer) {
      summaryHTML = `
        <h4>采购信息摘要</h4>
        <ul>
          <li>需求类型: ${needTypeDisplay}</li>
          <li>产品类型: ${productTypeDisplay}</li>
          <li>预算范围: ${currentTrackingData.budgetRange || '等待确认'}</li>
          <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
        </ul>
      `;
    } else {
      summaryHTML = `
        <h4>对接信息摘要</h4>
        <ul>
          <li>请在聊天中说明您是需要出售还是采购</li>
          <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
        </ul>
      `;
    }
    
    progressSummary.innerHTML = summaryHTML;
    trackingPanel.appendChild(progressSummary);
    
    // 添加刷新按钮
    const refreshButton = document.createElement('button');
    refreshButton.classList.add('refresh-tracking');
    refreshButton.textContent = '请求更新进度';
    refreshButton.addEventListener('click', function() {
      // 请求平台更新进度
      updateTrackingProgress();
      
      // 添加刷新动画
      this.classList.add('refreshing');
      // 更改按钮文本
      this.textContent = '正在请求平台确认...';
      setTimeout(() => {
        this.classList.remove('refreshing');
        this.textContent = '请求更新进度';
      }, 2000);
    });
    
    // 添加平台确认说明
    const confirmNote = document.createElement('div');
    confirmNote.classList.add('platform-note');
    confirmNote.innerHTML = '提示：所有进度更新需要平台确认后才能生效';
    
    trackingPanel.appendChild(refreshButton);
    trackingPanel.appendChild(confirmNote);
  }
  
  // 根据聊天内容更新对接进度
  function updateTrackingFromChat(message, isSeller, isBuyer) {
    // 获取当前进度数据
    let trackingData = JSON.parse(localStorage.getItem('trackingData'));
    
    if (!trackingData) {
      // 如果没有数据，初始化默认数据
      trackingData = {
        currentStage: 1,
        stages: [
          { id: 1, name: '需求提交', status: 'pending', timestamp: new Date().toISOString() },
          { id: 2, name: '匹配库存', status: 'pending', timestamp: null },
          { id: 3, name: '卖家确认', status: 'pending', timestamp: null },
          { id: 4, name: '买家确认', status: 'pending', timestamp: null },
          { id: 5, name: '确认对接', status: 'pending', timestamp: null }
        ],
        lastUpdated: new Date().toISOString(),
        isSeller: false,
        isBuyer: false,
        needType: '',
        productType: '',
        quantity: '',
        budgetRange: ''
      };
    }
    
    // 更新买卖身份
    if (isSeller !== undefined) {
      trackingData.isSeller = isSeller;
    }
    
    if (isBuyer !== undefined) {
      trackingData.isBuyer = isBuyer;
    }
    
    // 处理阶段1：需求提交
    if (trackingData.stages[0].status !== 'completed') {
      // 只要有消息，就认为需求已提交
      trackingData.stages[0].status = 'completed';
      trackingData.stages[0].timestamp = new Date().toISOString();
      
      // 进入第二阶段
      trackingData.stages[1].status = 'active';
      trackingData.currentStage = 2;
    }
    
    // 提取产品类型信息
    const productTypes = ['牛仔', '丝绸', '棉麻', '羊毛', '尼龙', '涤纶'];
    for (const type of productTypes) {
      if (message.includes(type)) {
        trackingData.productType = type;
        break;
      }
    }
    
    // 提取需求类型
    if (message.includes('面料') || message.includes('布料') || message.includes('布')) {
      trackingData.needType = '面料';
    } else if (message.includes('服装') || message.includes('衣服') || message.includes('成衣')) {
      trackingData.needType = '服装';
    }
    
    // 提取数量信息
    const quantityMatch = message.match(/(\d+)([件条米吨个])/);
    if (quantityMatch) {
      trackingData.quantity = quantityMatch[0];
    }
    
    // 提取价格/预算信息
    if (message.includes('价格') || message.includes('多少钱') || message.includes('预算')) {
      const priceMatch = message.match(/(\d+)[-~到至](\d+)[元块]/);
      if (priceMatch) {
        trackingData.budgetRange = priceMatch[0];
      }
    }
    
    // 阶段2：匹配库存 - 根据关键词判断
    if (trackingData.currentStage === 2 && trackingData.stages[1].status === 'active') {
      // 当用户提供了具体的产品和需求类型时，进入到下一阶段
      if (trackingData.productType && trackingData.needType) {
        if (message.includes('匹配') || message.includes('库存') || message.includes('资源') || 
            message.includes('找到') || message.includes('有货') || containsSpecificProductInfo(message)) {
          trackingData.stages[1].status = 'completed';
          trackingData.stages[1].timestamp = new Date().toISOString();
          
          // 根据用户身份决定下一步
          if (trackingData.isSeller) {
            // 卖家寻找买家，进入到买家确认阶段
            trackingData.stages[3].status = 'active';
            trackingData.currentStage = 4;
          } else if (trackingData.isBuyer) {
            // 买家寻找卖家，进入到卖家确认阶段
            trackingData.stages[2].status = 'active';
            trackingData.currentStage = 3;
          }
        }
      }
    }
    
    // 阶段3：卖家确认
    if (trackingData.currentStage === 3 && trackingData.stages[2].status === 'active') {
      if (message.includes('卖家确认') || message.includes('供应商确认') || message.includes('已确认') || 
          message.includes('可以供应') || message.includes('有库存')) {
        trackingData.stages[2].status = 'completed';
        trackingData.stages[2].timestamp = new Date().toISOString();
        
        // 进入买家确认阶段
        trackingData.stages[3].status = 'active';
        trackingData.currentStage = 4;
      }
    }
    
    // 阶段4：买家确认
    if (trackingData.currentStage === 4 && trackingData.stages[3].status === 'active') {
      if (message.includes('买家确认') || message.includes('客户确认') || message.includes('确认购买') || 
          message.includes('接受') || message.includes('满意')) {
        trackingData.stages[3].status = 'completed';
        trackingData.stages[3].timestamp = new Date().toISOString();
        
        // 进入最终确认阶段
        trackingData.stages[4].status = 'active';
        trackingData.currentStage = 5;
      }
    }
    
    // 阶段5：确认对接
    if (trackingData.currentStage === 5 && trackingData.stages[4].status === 'active') {
      if (message.includes('交易成功') || message.includes('已对接') || message.includes('成交') || 
          message.includes('已完成') || message.includes('感谢合作')) {
        trackingData.stages[4].status = 'completed';
        trackingData.stages[4].timestamp = new Date().toISOString();
      }
    }
    
    // 更新最后更新时间
    trackingData.lastUpdated = new Date().toISOString();
    
    // 保存更新后的数据
    localStorage.setItem('trackingData', JSON.stringify(trackingData));
    
    // 重新初始化进度面板以显示最新状态
    initTrackingPanel();
  }
  
  // 显示阶段详细信息
  function showStageDetail(stage, trackingData) {
    const wechatContact = '<strong>JJ1598929032</strong>';
    const modal = document.createElement('div');
    modal.classList.add('progress-modal');
    
    const modalContent = document.createElement('div');
    modalContent.classList.add('modal-content');
    
    // 添加关闭按钮
    const closeBtn = document.createElement('button');
    closeBtn.classList.add('close-modal');
    closeBtn.innerHTML = '&times;';
    closeBtn.addEventListener('click', function() {
      document.body.removeChild(modal);
    });
    
    // 阶段详情内容
    const stageContent = document.createElement('div');
    stageContent.classList.add('stage-detail');
    
    const stageTitle = document.createElement('h3');
    stageTitle.innerHTML = `阶段 ${stage.id}: ${stage.name} <span class="stage-status status-${stage.status}">${getStatusText(stage.status)}</span>`;
    
    const stageTimestamp = document.createElement('div');
    stageTimestamp.classList.add('stage-timestamp');
    if (stage.timestamp) {
      const date = new Date(stage.timestamp);
      stageTimestamp.textContent = `更新时间: ${formatDateTime(date)}`;
    } else {
      stageTimestamp.textContent = '尚未开始';
    }
    
    const stageDescription = document.createElement('p');
    let descriptionText = '';
    
    // 根据不同阶段和用户身份显示不同内容
    const isSeller = trackingData.isSeller;
    const isBuyer = trackingData.isBuyer;
    
    switch(stage.id) {
      case 1:
        if (stage.status === 'completed') {
          descriptionText = `您的${isSeller ? '出售' : isBuyer ? '采购' : ''}需求已成功提交！我们的系统正在进行初步分析，以便更好地匹配合适的${isSeller ? '买家' : '资源'}。如需补充具体要求或查询进度，请添加客服微信：${wechatContact}`;
        } else {
          descriptionText = `请在聊天框中说明您的${isSeller ? '出售' : isBuyer ? '采购' : '需求'}意向，系统将自动为您匹配${isSeller ? '买家' : '资源'}。您可以随时添加客服微信：${wechatContact} 获取帮助。`;
        }
        break;
      case 2:
        if (stage.status === 'completed') {
          descriptionText = `系统已成功为您匹配到符合要求的${isSeller ? '潜在买家' : '库存资源'}。现在进入${isSeller ? '买家' : '卖家'}确认阶段。如需了解匹配详情，请添加微信：${wechatContact}`;
        } else if (stage.status === 'active') {
          descriptionText = `系统正在根据您提供的要求匹配${isSeller ? '买家资源' : '库存'}。这个过程通常需要12小时内完成。如需加快进度或提供更详细的需求，请立即添加微信：${wechatContact}`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在需求提交后自动为您匹配${isSeller ? '买家' : '库存资源'}。`;
        }
        break;
      case 3:
        if (stage.status === 'completed') {
          descriptionText = `卖家已确认库存有效，现在等待买家最终确认。如有任何问题，请添加微信：${wechatContact}`;
        } else if (stage.status === 'active') {
          descriptionText = `我们已找到符合要求的库存，正在等待卖家确认。通常会在24小时内得到回复。如想优先处理或了解更多详情，请添加微信：${wechatContact}`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在匹配到合适库存后联系卖家确认。`;
        }
        break;
      case 4:
        if (stage.status === 'completed') {
          descriptionText = `买家已确认购买意向，现在进入最终确认阶段。请添加微信：${wechatContact} 完成交易细节确认。`;
        } else if (stage.status === 'active') {
          descriptionText = `卖家已确认库存有效，等待您的最终确认。为确保交易顺利进行，请添加微信：${wechatContact} 进行后续沟通`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在卖家确认后联系买家最终确认。`;
        }
        break;
      case 5:
        if (stage.status === 'completed') {
          descriptionText = `恭喜！交易已成功对接。请通过微信：${wechatContact} 完成后续交易流程。`;
        } else if (stage.status === 'active') {
          descriptionText = `恭喜！双方已达成对接意向。为保障交易安全和顺利完成后续流程，请立即添加微信：${wechatContact} 获取详细指导`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在买家确认后进入最终对接确认阶段。`;
        }
        break;
      default:
        descriptionText = `当前阶段状态更新中。如需及时了解最新进展，请添加客服微信：${wechatContact}`;
    }
    
    stageDescription.innerHTML = descriptionText;
    
    const nextStepsTitle = document.createElement('h4');
    nextStepsTitle.textContent = '下一步操作';
    
    const nextStepsList = document.createElement('ul');
    const nextSteps = getNextSteps(stage.id, stage.status, trackingData);
    
    nextSteps.forEach(step => {
      const listItem = document.createElement('li');
      listItem.innerHTML = step;
      nextStepsList.appendChild(listItem);
    });
    
    // 添加平台确认提示
    const platformConfirmNote = document.createElement('div');
    platformConfirmNote.classList.add('platform-confirmation-note');
    platformConfirmNote.innerHTML = `<i>注意：对接进度由平台根据实际情况确认更新，阶段进度无法手动修改。如需加速进度，请添加客服微信：${wechatContact}</i>`;
    
    stageContent.appendChild(stageTitle);
    stageContent.appendChild(stageTimestamp);
    stageContent.appendChild(stageDescription);
    stageContent.appendChild(nextStepsTitle);
    stageContent.appendChild(nextStepsList);
    stageContent.appendChild(platformConfirmNote);
    
    modalContent.appendChild(closeBtn);
    modalContent.appendChild(stageContent);
    modal.appendChild(modalContent);
    
    document.body.appendChild(modal);
  }
  
  // 更新对接进度
  function updateTrackingProgress() {
    let trackingData = JSON.parse(localStorage.getItem('trackingData'));
    
    if (!trackingData) return;
    
    // 获取当前活跃阶段
    let currentActiveIndex = trackingData.stages.findIndex(stage => stage.status === 'active');
    
    // 显示进度更新中消息
    showProgressUpdateMessage();
    
    // 模拟平台确认过程（实际环境中应通过后端API获取确认结果）
    setTimeout(() => {
      // 平台审核确认后，更新进度
      // 注意：在实际环境中，这个确认过程应该来自服务器
      const platformConfirmed = Math.random() > 0.5; // 模拟平台确认结果
      
      if (platformConfirmed && currentActiveIndex !== -1 && currentActiveIndex < trackingData.stages.length - 1) {
        // 当前阶段完成
        trackingData.stages[currentActiveIndex].status = 'completed';
        trackingData.stages[currentActiveIndex].timestamp = new Date().toISOString();
        
        // 下一阶段激活
        trackingData.stages[currentActiveIndex + 1].status = 'active';
        trackingData.currentStage = currentActiveIndex + 2; // +2是因为stage id从1开始
        
        // 显示成功消息
        showNotification("进度已更新", "平台已确认您的进度更新", "success");
      } else {
        // 平台未确认
        showNotification("进度更新等待中", "您的进度更新请求正在等待平台确认", "info");
      }
      
      // 随机更新其他信息
      if (!trackingData.productType && Math.random() > 0.7) {
        const products = ['牛仔', '丝绸', '棉麻', '羊毛'];
        trackingData.productType = products[Math.floor(Math.random() * products.length)];
      }
      
      if (!trackingData.needType && Math.random() > 0.7) {
        trackingData.needType = Math.random() > 0.5 ? '面料' : '服装';
      }
      
      if (!trackingData.quantity && trackingData.isSeller && Math.random() > 0.7) {
        const units = ['件', '米', '条'];
        trackingData.quantity = `${Math.floor(Math.random() * 1000) + 10}${units[Math.floor(Math.random() * units.length)]}`;
      }
      
      if (!trackingData.budgetRange && trackingData.isBuyer && Math.random() > 0.7) {
        const min = Math.floor(Math.random() * 500) + 50;
        const max = min + Math.floor(Math.random() * 500) + 50;
        trackingData.budgetRange = `${min}-${max}元`;
      }
      
      // 更新最后更新时间
      trackingData.lastUpdated = new Date().toISOString();
      
      // 保存更新后的数据
      localStorage.setItem('trackingData', JSON.stringify(trackingData));
      
      // 重新初始化进度面板
      initTrackingPanel();
    }, 2000); // 模拟平台确认延迟
  }
  
  // 显示进度更新中的消息
  function showProgressUpdateMessage() {
    const notification = document.createElement('div');
    notification.classList.add('progress-notification', 'updating');
    notification.innerHTML = `
      <div class="notification-icon">
        <div class="loading-spinner"></div>
      </div>
      <div class="notification-content">
        <h4>进度更新请求已提交</h4>
        <p>正在等待平台确认，这可能需要一些时间...</p>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // 1.5秒后移除通知
    setTimeout(() => {
      notification.classList.add('fade-out');
      setTimeout(() => {
        if (document.body.contains(notification)) {
          document.body.removeChild(notification);
        }
      }, 500);
    }, 1500);
  }
  
  // 显示通知
  function showNotification(title, message, type = "info") {
    const notification = document.createElement('div');
    notification.classList.add('progress-notification', type);
    
    let icon = '';
    if (type === 'success') {
      icon = '<div class="notification-icon success">✓</div>';
    } else if (type === 'error') {
      icon = '<div class="notification-icon error">✗</div>';
    } else {
      icon = '<div class="notification-icon info">i</div>';
    }
    
    notification.innerHTML = `
      ${icon}
      <div class="notification-content">
        <h4>${title}</h4>
        <p>${message}</p>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // 3秒后移除通知
    setTimeout(() => {
      notification.classList.add('fade-out');
      setTimeout(() => {
        if (document.body.contains(notification)) {
          document.body.removeChild(notification);
        }
      }, 500);
    }, 3000);
  }
  
  // 获取状态文本描述
  function getStatusText(status) {
    switch(status) {
      case 'pending': return '等待中';
      case 'active': return '进行中';
      case 'completed': return '已完成';
      default: return '未知状态';
    }
  }
  
  // 格式化日期时间
  function formatDateTime(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    
    return `${year}-${month}-${day} ${hours}:${minutes}`;
  }
  
  // 获取时间差异的友好描述
  function getTimeDifference(oldDate, newDate) {
    const diffMs = newDate - oldDate;
    const diffSec = Math.floor(diffMs / 1000);
    const diffMin = Math.floor(diffSec / 60);
    const diffHour = Math.floor(diffMin / 60);
    const diffDay = Math.floor(diffHour / 24);
    
    if (diffSec < 60) {
      return '刚刚';
    } else if (diffMin < 60) {
      return `${diffMin}分钟前`;
    } else if (diffHour < 24) {
      return `${diffHour}小时前`;
    } else if (diffDay < 30) {
      return `${diffDay}天前`;
    } else {
      const month = String(oldDate.getMonth() + 1).padStart(2, '0');
      const day = String(oldDate.getDate()).padStart(2, '0');
      return `${month}-${day}`;
    }
  }
  
  // 获取已完成阶段的数量
  function getCompletedStages(stages) {
    return stages.filter(stage => stage.status === 'completed').length;
  }
  
  // 判断消息是否包含具体产品信息
  function containsSpecificProductInfo(message) {
    // 匹配具体的产品描述
    const patterns = [
      /\d+[件条米吨]/,  // 匹配数量单位
      /款式|型号|规格|尺寸|颜色|成分/,  // 匹配产品属性
      /牌|品牌|厂家|生产商/,  // 匹配品牌信息
      /价格|报价|元\/[米件条]/  // 匹配价格信息
    ];
    
    return patterns.some(pattern => pattern.test(message));
  }
  
  // 根据不同阶段和用户身份获取下一步操作指引
  function getNextSteps(stageId, stageStatus, trackingData) {
    const wechatContact = '<strong>JJ1598929032</strong>';
    const isSeller = trackingData.isSeller;
    const isBuyer = trackingData.isBuyer;
    
    // 如果阶段已完成，返回空步骤列表
    if (stageStatus === 'completed') {
      return [`此阶段已完成，请继续推进下一阶段`, `如有问题请添加微信：${wechatContact} 咨询`];
    }
    
    // 如果阶段未开始，返回等待指引
    if (stageStatus === 'pending') {
      return [`请等待前序阶段完成后再进行此阶段`, `如需加速进度，请添加微信：${wechatContact}`];
    }
    
    // 阶段处于活跃状态，根据不同情况返回指引
    if (isSeller) {
      switch(stageId) {
        case 1:
          return [
            `详细描述您要出售的产品类型、数量和期望价格`,
            `提供产品图片或详细规格说明`,
            `添加微信：${wechatContact} 加速对接进程`
          ];
        case 2:
          return [
            `耐心等待系统为您匹配潜在买家`,
            `完善您的产品细节信息以提高匹配率`,
            `添加微信：${wechatContact} 获取实时匹配进度`
          ];
        case 3:
          return [
            `准备好详细的产品说明和价格资料`,
            `确认您的发货能力和库存情况`,
            `添加微信：${wechatContact} 了解买家需求细节`
          ];
        case 4:
          return [
            `准备详细的产品资料和报价单`,
            `确认您的仓库库存和物流配送方案`,
            `添加微信：${wechatContact} 与买家直接沟通`
          ];
        case 5:
          return [
            `确认交易细节和付款方式`,
            `准备产品发货和售后服务方案`,
            `必须添加微信：${wechatContact} 完成最终交易`
          ];
        default:
          return [`添加微信：${wechatContact} 获取指导`];
      }
    } else if (isBuyer) {
      switch(stageId) {
        case 1:
          return [
            `详细描述您需要的产品类型、数量和预算`,
            `说明您对产品质量和规格的要求`,
            `添加微信：${wechatContact} 加速对接进程`
          ];
        case 2:
          return [
            `耐心等待系统为您匹配合适库存`,
            `完善您的需求细节以提高匹配精准度`,
            `添加微信：${wechatContact} 获取实时匹配进度`
          ];
        case 3:
          return [
            `准备好与卖家沟通的具体问题`,
            `确认您的采购预算和付款方式`,
            `添加微信：${wechatContact} 了解卖家确认进度`
          ];
        case 4:
          return [
            `仔细评估卖家提供的产品信息`,
            `确认产品是否满足您的需求`,
            `添加微信：${wechatContact} 与卖家直接沟通`
          ];
        case 5:
          return [
            `确认交易细节和收货地址`,
            `准备付款和验收产品`,
            `必须添加微信：${wechatContact} 完成最终交易`
          ];
        default:
          return [`添加微信：${wechatContact} 获取指导`];
      }
    } else {
      // 用户身份未确定
      switch(stageId) {
        case 1:
          return [
            `请在聊天框中说明您是希望出售还是采购`,
            `详细描述您的需求或产品信息`,
            `添加微信：${wechatContact} 获取专业指导`
          ];
        default:
          return [
            `请先明确您的身份（买家/卖家）`,
            `添加微信：${wechatContact} 获取帮助`
          ];
      }
    }
  }
  
  // 为动画添加稳定性修复
  function animateStats() {
    const statValues = document.querySelectorAll('.stat-value');
    
    statValues.forEach(statValue => {
      const targetValue = parseInt(statValue.textContent, 10);
      let currentValue = 0;
      const duration = 2000;
      const stepTime = 20;
      const totalSteps = duration / stepTime;
      const stepValue = targetValue / totalSteps;
      
      function updateValue() {
        currentValue += stepValue;
        
        if (currentValue < targetValue) {
          statValue.textContent = Math.floor(currentValue);
          requestAnimationFrame(updateValue);
        } else {
          statValue.textContent = targetValue;
          
          // 添加以防止数字变化导致布局移动
          statValue.style.minWidth = statValue.offsetWidth + 'px';
        }
      }
      
      // 当元素进入视口时启动动画
      const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            updateValue();
            observer.unobserve(entry.target);
          }
        });
      });
      
      observer.observe(statValue);
    });
  }
  
  // 导航栏初始化与滚动效果
  function initNavbar() {
    const navbar = document.querySelector('.navbar');
    
    // 滚动监听
    window.addEventListener('scroll', function() {
      if (window.scrollY > 50) {
        navbar.classList.add('scrolled');
      } else {
        navbar.classList.remove('scrolled');
      }
    });
    
    // 导航菜单项点击激活效果
    const navLinks = document.querySelectorAll('.main-nav a');
    
    navLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        // 获取目标部分的ID
        const targetId = this.getAttribute('href');
        
        // 仅对页内锚点链接进行处理
        if (targetId.startsWith('#')) {
          e.preventDefault();
          
          const targetSection = document.querySelector(targetId);
          
          if (targetSection) {
            // 平滑滚动到目标部分
            window.scrollTo({
              top: targetSection.offsetTop - 70, // 减去导航栏高度
              behavior: 'smooth'
            });
            
            // 更新URL锚点，但不跳转
            history.pushState(null, null, targetId);
            
            // 移除所有active类
            navLinks.forEach(item => {
              item.parentElement.classList.remove('active');
            });
            
            // 为当前点击项添加active类
            this.parentElement.classList.add('active');
          }
        }
      });
    });
  }
  
  // 添加滚动监听，高亮当前视图中的部分
  function initScrollSpy() {
    // 获取所有主要部分
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.main-nav a');
    
    // 添加滚动监听
    window.addEventListener('scroll', function() {
      // 当前滚动位置
      const scrollPosition = window.scrollY + 100; // 添加一些偏移以提前激活
      
      // 检查每个部分的位置
      sections.forEach(section => {
        // 获取部分的顶部和底部位置
        const sectionTop = section.offsetTop;
        const sectionBottom = sectionTop + section.offsetHeight;
        
        // 检查当前滚动位置是否在该部分
        if (scrollPosition >= sectionTop && scrollPosition < sectionBottom) {
          // 找到对应的导航链接
          const targetId = '#' + section.getAttribute('id');
          
          // 移除所有active类
          navLinks.forEach(link => {
            link.parentElement.classList.remove('active');
            
            // 为当前部分的链接添加active类
            if (link.getAttribute('href') === targetId) {
              link.parentElement.classList.add('active');
            }
          });
        }
      });
    });
  }
  
  // 平滑滚动效果
  function addSmoothScrolling() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function(e) {
        const targetId = this.getAttribute('href');
        
        if (targetId === '#') return;
        
        const target = document.querySelector(targetId);
        
        if (target) {
          e.preventDefault();
          
          window.scrollTo({
            top: target.offsetTop - 70, // 减去导航栏高度
            behavior: 'smooth'
          });
          
          // 更新URL锚点，但不跳转
          history.pushState(null, null, targetId);
        }
      });
    });
  }
  
  // 初始化深色模式
  function initDarkMode() {
    const darkModeToggle = document.querySelector('.dark-mode-toggle');
    if (darkModeToggle) {
      darkModeToggle.addEventListener('click', function() {
        document.body.classList.toggle('dark-mode');
        if (document.body.classList.contains('dark-mode')) {
          this.textContent = '☀️';
        } else {
          this.textContent = '🌙';
        }
      });
    }
  }
});
  
  // 初始化对接进度面板
  function initTrackingPanel() {
    const trackingPanel = document.querySelector('.process-flow');
    if (!trackingPanel) return;
  
    // 初始化进度流程图 - 从localStorage获取当前状态
    let currentTrackingData = JSON.parse(localStorage.getItem('trackingData'));
    
    // 如果没有保存的跟踪数据或者是新会话，初始化默认数据
    if (!currentTrackingData) {
      currentTrackingData = {
        currentStage: 1,
        stages: [
          { id: 1, name: '需求提交', status: 'pending', timestamp: new Date().toISOString() },
          { id: 2, name: '匹配库存', status: 'pending', timestamp: null },
          { id: 3, name: '卖家确认', status: 'pending', timestamp: null },
          { id: 4, name: '买家确认', status: 'pending', timestamp: null },
          { id: 5, name: '确认对接', status: 'pending', timestamp: null }
        ],
        lastUpdated: new Date().toISOString(),
        isSeller: false,
        isBuyer: false,
        needType: '',
        productType: '',
        quantity: '',
        budgetRange: ''
      };
      
      // 保存初始数据
      localStorage.setItem('trackingData', JSON.stringify(currentTrackingData));
    }
    
    // 清空默认内容
    trackingPanel.innerHTML = '';
    
    // 创建进度条
    const progressBar = document.createElement('div');
    progressBar.classList.add('progress-bar');
    
    // 添加各个阶段
    currentTrackingData.stages.forEach(stage => {
      const stageElement = document.createElement('div');
      stageElement.classList.add('progress-stage', `status-${stage.status}`);
      stageElement.dataset.stageId = stage.id;
      
      const stageNumber = document.createElement('div');
      stageNumber.classList.add('stage-number');
      stageNumber.textContent = stage.id;
      
      const stageName = document.createElement('div');
      stageName.classList.add('stage-name');
      stageName.textContent = stage.name;
      
      stageElement.appendChild(stageNumber);
      stageElement.appendChild(stageName);
      
      // 点击阶段显示详情
      stageElement.addEventListener('click', () => showStageDetail(stage, currentTrackingData));
      
      progressBar.appendChild(stageElement);
      
      // 添加连接线（除了最后一个阶段）
      if (stage.id < currentTrackingData.stages.length) {
        const connector = document.createElement('div');
        connector.classList.add('stage-connector', `status-${stage.status}`);
        progressBar.appendChild(connector);
      }
    });
    
    trackingPanel.appendChild(progressBar);
    
    // 添加说明文字
    const statusInfo = document.createElement('div');
    statusInfo.classList.add('status-info');
    
    // 找到当前活跃的阶段
    const activeStage = currentTrackingData.stages.find(stage => stage.status === 'active');
    const stageName = activeStage ? activeStage.name : '准备中';
    
    // 计算最后更新时间
    const lastUpdateTime = getTimeDifference(new Date(currentTrackingData.lastUpdated), new Date());
    
    statusInfo.innerHTML = `当前状态：<span class="status-active">${stageName}</span> · 更新于 ${lastUpdateTime}`;
    trackingPanel.appendChild(statusInfo);
    
    // 添加进度概要
    const progressSummary = document.createElement('div');
    progressSummary.classList.add('progress-summary');
    
    // 根据用户身份显示不同的进度概要
    const isSeller = currentTrackingData.isSeller;
    const isBuyer = currentTrackingData.isBuyer;
    
    // 获取买卖需求类型
    const needTypeDisplay = currentTrackingData.needType ? currentTrackingData.needType : '等待确认';
    const productTypeDisplay = currentTrackingData.productType ? currentTrackingData.productType : '等待确认';
    
    let summaryHTML = '';
    if (isSeller) {
      summaryHTML = `
        <h4>出售信息摘要</h4>
        <ul>
          <li>商品类型: ${productTypeDisplay}</li>
          <li>库存数量: ${currentTrackingData.quantity || '等待确认'}</li>
          <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
        </ul>
      `;
    } else if (isBuyer) {
      summaryHTML = `
        <h4>采购信息摘要</h4>
        <ul>
          <li>需求类型: ${needTypeDisplay}</li>
          <li>产品类型: ${productTypeDisplay}</li>
          <li>预算范围: ${currentTrackingData.budgetRange || '等待确认'}</li>
          <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
        </ul>
      `;
    } else {
      summaryHTML = `
        <h4>对接信息摘要</h4>
        <ul>
          <li>请在聊天中说明您是需要出售还是采购</li>
          <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
        </ul>
      `;
    }
    
    progressSummary.innerHTML = summaryHTML;
    trackingPanel.appendChild(progressSummary);
    
    // 添加刷新按钮
    const refreshButton = document.createElement('button');
    refreshButton.classList.add('refresh-tracking');
    refreshButton.textContent = '请求更新进度';
    refreshButton.addEventListener('click', function() {
      // 请求平台更新进度
      updateTrackingProgress();
      
      // 添加刷新动画
      this.classList.add('refreshing');
      // 更改按钮文本
      this.textContent = '正在请求平台确认...';
      setTimeout(() => {
        this.classList.remove('refreshing');
        this.textContent = '请求更新进度';
      }, 2000);
    });
    
    // 添加平台确认说明
    const confirmNote = document.createElement('div');
    confirmNote.classList.add('platform-note');
    confirmNote.innerHTML = '提示：所有进度更新需要平台确认后才能生效';
    
    trackingPanel.appendChild(refreshButton);
    trackingPanel.appendChild(confirmNote);
  }
  
  // 根据聊天内容更新对接进度
  function updateTrackingFromChat(message, isSeller, isBuyer) {
    // 获取当前进度数据
    let trackingData = JSON.parse(localStorage.getItem('trackingData'));
    
    if (!trackingData) {
      // 如果没有数据，初始化默认数据
      trackingData = {
        currentStage: 1,
        stages: [
          { id: 1, name: '需求提交', status: 'pending', timestamp: new Date().toISOString() },
          { id: 2, name: '匹配库存', status: 'pending', timestamp: null },
          { id: 3, name: '卖家确认', status: 'pending', timestamp: null },
          { id: 4, name: '买家确认', status: 'pending', timestamp: null },
          { id: 5, name: '确认对接', status: 'pending', timestamp: null }
        ],
        lastUpdated: new Date().toISOString(),
        isSeller: false,
        isBuyer: false,
        needType: '',
        productType: '',
        quantity: '',
        budgetRange: ''
      };
    }
    
    // 更新买卖身份
    if (isSeller !== undefined) {
      trackingData.isSeller = isSeller;
    }
    
    if (isBuyer !== undefined) {
      trackingData.isBuyer = isBuyer;
    }
    
    // 处理阶段1：需求提交
    if (trackingData.stages[0].status !== 'completed') {
      // 只要有消息，就认为需求已提交
      trackingData.stages[0].status = 'completed';
      trackingData.stages[0].timestamp = new Date().toISOString();
      
      // 进入第二阶段
      trackingData.stages[1].status = 'active';
      trackingData.currentStage = 2;
    }
    
    // 提取产品类型信息
    const productTypes = ['牛仔', '丝绸', '棉麻', '羊毛', '尼龙', '涤纶'];
    for (const type of productTypes) {
      if (message.includes(type)) {
        trackingData.productType = type;
        break;
      }
    }
    
    // 提取需求类型
    if (message.includes('面料') || message.includes('布料') || message.includes('布')) {
      trackingData.needType = '面料';
    } else if (message.includes('服装') || message.includes('衣服') || message.includes('成衣')) {
      trackingData.needType = '服装';
    }
    
    // 提取数量信息
    const quantityMatch = message.match(/(\d+)([件条米吨个])/);
    if (quantityMatch) {
      trackingData.quantity = quantityMatch[0];
    }
    
    // 提取价格/预算信息
    if (message.includes('价格') || message.includes('多少钱') || message.includes('预算')) {
      const priceMatch = message.match(/(\d+)[-~到至](\d+)[元块]/);
      if (priceMatch) {
        trackingData.budgetRange = priceMatch[0];
      }
    }
    
    // 阶段2：匹配库存 - 根据关键词判断
    if (trackingData.currentStage === 2 && trackingData.stages[1].status === 'active') {
      // 当用户提供了具体的产品和需求类型时，进入到下一阶段
      if (trackingData.productType && trackingData.needType) {
        if (message.includes('匹配') || message.includes('库存') || message.includes('资源') || 
            message.includes('找到') || message.includes('有货') || containsSpecificProductInfo(message)) {
          trackingData.stages[1].status = 'completed';
          trackingData.stages[1].timestamp = new Date().toISOString();
          
          // 根据用户身份决定下一步
          if (trackingData.isSeller) {
            // 卖家寻找买家，进入到买家确认阶段
            trackingData.stages[3].status = 'active';
            trackingData.currentStage = 4;
          } else if (trackingData.isBuyer) {
            // 买家寻找卖家，进入到卖家确认阶段
            trackingData.stages[2].status = 'active';
            trackingData.currentStage = 3;
          }
        }
      }
    }
    
    // 阶段3：卖家确认
    if (trackingData.currentStage === 3 && trackingData.stages[2].status === 'active') {
      if (message.includes('卖家确认') || message.includes('供应商确认') || message.includes('已确认') || 
          message.includes('可以供应') || message.includes('有库存')) {
        trackingData.stages[2].status = 'completed';
        trackingData.stages[2].timestamp = new Date().toISOString();
        
        // 进入买家确认阶段
        trackingData.stages[3].status = 'active';
        trackingData.currentStage = 4;
      }
    }
    
    // 阶段4：买家确认
    if (trackingData.currentStage === 4 && trackingData.stages[3].status === 'active') {
      if (message.includes('买家确认') || message.includes('客户确认') || message.includes('确认购买') || 
          message.includes('接受') || message.includes('满意')) {
        trackingData.stages[3].status = 'completed';
        trackingData.stages[3].timestamp = new Date().toISOString();
        
        // 进入最终确认阶段
        trackingData.stages[4].status = 'active';
        trackingData.currentStage = 5;
      }
    }
    
    // 阶段5：确认对接
    if (trackingData.currentStage === 5 && trackingData.stages[4].status === 'active') {
      if (message.includes('交易成功') || message.includes('已对接') || message.includes('成交') || 
          message.includes('已完成') || message.includes('感谢合作')) {
        trackingData.stages[4].status = 'completed';
        trackingData.stages[4].timestamp = new Date().toISOString();
      }
    }
    
    // 更新最后更新时间
    trackingData.lastUpdated = new Date().toISOString();
    
    // 保存更新后的数据
    localStorage.setItem('trackingData', JSON.stringify(trackingData));
    
    // 重新初始化进度面板以显示最新状态
    initTrackingPanel();
  }
  
  // 显示阶段详细信息
  function showStageDetail(stage, trackingData) {
    const wechatContact = '<strong>JJ1598929032</strong>';
    const modal = document.createElement('div');
    modal.classList.add('progress-modal');
    
    const modalContent = document.createElement('div');
    modalContent.classList.add('modal-content');
    
    // 添加关闭按钮
    const closeBtn = document.createElement('button');
    closeBtn.classList.add('close-modal');
    closeBtn.innerHTML = '&times;';
    closeBtn.addEventListener('click', function() {
      document.body.removeChild(modal);
    });
    
    // 阶段详情内容
    const stageContent = document.createElement('div');
    stageContent.classList.add('stage-detail');
    
    const stageTitle = document.createElement('h3');
    stageTitle.innerHTML = `阶段 ${stage.id}: ${stage.name} <span class="stage-status status-${stage.status}">${getStatusText(stage.status)}</span>`;
    
    const stageTimestamp = document.createElement('div');
    stageTimestamp.classList.add('stage-timestamp');
    if (stage.timestamp) {
      const date = new Date(stage.timestamp);
      stageTimestamp.textContent = `更新时间: ${formatDateTime(date)}`;
    } else {
      stageTimestamp.textContent = '尚未开始';
    }
    
    const stageDescription = document.createElement('p');
    let descriptionText = '';
    
    // 根据不同阶段和用户身份显示不同内容
    const isSeller = trackingData.isSeller;
    const isBuyer = trackingData.isBuyer;
    
    switch(stage.id) {
      case 1:
        if (stage.status === 'completed') {
          descriptionText = `您的${isSeller ? '出售' : isBuyer ? '采购' : ''}需求已成功提交！我们的系统正在进行初步分析，以便更好地匹配合适的${isSeller ? '买家' : '资源'}。如需补充具体要求或查询进度，请添加客服微信：${wechatContact}`;
        } else {
          descriptionText = `请在聊天框中说明您的${isSeller ? '出售' : isBuyer ? '采购' : '需求'}意向，系统将自动为您匹配${isSeller ? '买家' : '资源'}。您可以随时添加客服微信：${wechatContact} 获取帮助。`;
        }
        break;
      case 2:
        if (stage.status === 'completed') {
          descriptionText = `系统已成功为您匹配到符合要求的${isSeller ? '潜在买家' : '库存资源'}。现在进入${isSeller ? '买家' : '卖家'}确认阶段。如需了解匹配详情，请添加微信：${wechatContact}`;
        } else if (stage.status === 'active') {
          descriptionText = `系统正在根据您提供的要求匹配${isSeller ? '买家资源' : '库存'}。这个过程通常需要12小时内完成。如需加快进度或提供更详细的需求，请立即添加微信：${wechatContact}`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在需求提交后自动为您匹配${isSeller ? '买家' : '库存资源'}。`;
        }
        break;
      case 3:
        if (stage.status === 'completed') {
          descriptionText = `卖家已确认库存有效，现在等待买家最终确认。如有任何问题，请添加微信：${wechatContact}`;
        } else if (stage.status === 'active') {
          descriptionText = `我们已找到符合要求的库存，正在等待卖家确认。通常会在24小时内得到回复。如想优先处理或了解更多详情，请添加微信：${wechatContact}`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在匹配到合适库存后联系卖家确认。`;
        }
        break;
      case 4:
        if (stage.status === 'completed') {
          descriptionText = `买家已确认购买意向，现在进入最终确认阶段。请添加微信：${wechatContact} 完成交易细节确认。`;
        } else if (stage.status === 'active') {
          descriptionText = `卖家已确认库存有效，等待您的最终确认。为确保交易顺利进行，请添加微信：${wechatContact} 进行后续沟通`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在卖家确认后联系买家最终确认。`;
        }
        break;
      case 5:
        if (stage.status === 'completed') {
          descriptionText = `恭喜！交易已成功对接。请通过微信：${wechatContact} 完成后续交易流程。`;
        } else if (stage.status === 'active') {
          descriptionText = `恭喜！双方已达成对接意向。为保障交易安全和顺利完成后续流程，请立即添加微信：${wechatContact} 获取详细指导`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在买家确认后进入最终对接确认阶段。`;
        }
        break;
      default:
        descriptionText = `当前阶段状态更新中。如需及时了解最新进展，请添加客服微信：${wechatContact}`;
    }
    
    stageDescription.innerHTML = descriptionText;
    
    const nextStepsTitle = document.createElement('h4');
    nextStepsTitle.textContent = '下一步操作';
    
    const nextStepsList = document.createElement('ul');
    const nextSteps = getNextSteps(stage.id, stage.status, trackingData);
    
    nextSteps.forEach(step => {
      const listItem = document.createElement('li');
      listItem.innerHTML = step;
      nextStepsList.appendChild(listItem);
    });
    
    // 添加平台确认提示
    const platformConfirmNote = document.createElement('div');
    platformConfirmNote.classList.add('platform-confirmation-note');
    platformConfirmNote.innerHTML = `<i>注意：对接进度由平台根据实际情况确认更新，阶段进度无法手动修改。如需加速进度，请添加客服微信：${wechatContact}</i>`;
    
    stageContent.appendChild(stageTitle);
    stageContent.appendChild(stageTimestamp);
    stageContent.appendChild(stageDescription);
    stageContent.appendChild(nextStepsTitle);
    stageContent.appendChild(nextStepsList);
    stageContent.appendChild(platformConfirmNote);
    
    modalContent.appendChild(closeBtn);
    modalContent.appendChild(stageContent);
    modal.appendChild(modalContent);
    
    document.body.appendChild(modal);
  }
  
  // 更新对接进度
  function updateTrackingProgress() {
    let trackingData = JSON.parse(localStorage.getItem('trackingData'));
    
    if (!trackingData) return;
    
    // 获取当前活跃阶段
    let currentActiveIndex = trackingData.stages.findIndex(stage => stage.status === 'active');
    
    // 显示进度更新中消息
    showProgressUpdateMessage();
    
    // 模拟平台确认过程（实际环境中应通过后端API获取确认结果）
    setTimeout(() => {
      // 平台审核确认后，更新进度
      // 注意：在实际环境中，这个确认过程应该来自服务器
      const platformConfirmed = Math.random() > 0.5; // 模拟平台确认结果
      
      if (platformConfirmed && currentActiveIndex !== -1 && currentActiveIndex < trackingData.stages.length - 1) {
        // 当前阶段完成
        trackingData.stages[currentActiveIndex].status = 'completed';
        trackingData.stages[currentActiveIndex].timestamp = new Date().toISOString();
        
        // 下一阶段激活
        trackingData.stages[currentActiveIndex + 1].status = 'active';
        trackingData.currentStage = currentActiveIndex + 2; // +2是因为stage id从1开始
        
        // 显示成功消息
        showNotification("进度已更新", "平台已确认您的进度更新", "success");
      } else {
        // 平台未确认
        showNotification("进度更新等待中", "您的进度更新请求正在等待平台确认", "info");
      }
      
      // 随机更新其他信息
      if (!trackingData.productType && Math.random() > 0.7) {
        const products = ['牛仔', '丝绸', '棉麻', '羊毛'];
        trackingData.productType = products[Math.floor(Math.random() * products.length)];
      }
      
      if (!trackingData.needType && Math.random() > 0.7) {
        trackingData.needType = Math.random() > 0.5 ? '面料' : '服装';
      }
      
      if (!trackingData.quantity && trackingData.isSeller && Math.random() > 0.7) {
        const units = ['件', '米', '条'];
        trackingData.quantity = `${Math.floor(Math.random() * 1000) + 10}${units[Math.floor(Math.random() * units.length)]}`;
      }
      
      if (!trackingData.budgetRange && trackingData.isBuyer && Math.random() > 0.7) {
        const min = Math.floor(Math.random() * 500) + 50;
        const max = min + Math.floor(Math.random() * 500) + 50;
        trackingData.budgetRange = `${min}-${max}元`;
      }
      
      // 更新最后更新时间
      trackingData.lastUpdated = new Date().toISOString();
      
      // 保存更新后的数据
      localStorage.setItem('trackingData', JSON.stringify(trackingData));
      
      // 重新初始化进度面板
      initTrackingPanel();
    }, 2000); // 模拟平台确认延迟
  }
  
  // 显示进度更新中的消息
  function showProgressUpdateMessage() {
    const notification = document.createElement('div');
    notification.classList.add('progress-notification', 'updating');
    notification.innerHTML = `
      <div class="notification-icon">
        <div class="loading-spinner"></div>
      </div>
      <div class="notification-content">
        <h4>进度更新请求已提交</h4>
        <p>正在等待平台确认，这可能需要一些时间...</p>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // 1.5秒后移除通知
    setTimeout(() => {
      notification.classList.add('fade-out');
      setTimeout(() => {
        if (document.body.contains(notification)) {
          document.body.removeChild(notification);
        }
      }, 500);
    }, 1500);
  }
  
  // 显示通知
  function showNotification(title, message, type = "info") {
    const notification = document.createElement('div');
    notification.classList.add('progress-notification', type);
    
    let icon = '';
    if (type === 'success') {
      icon = '<div class="notification-icon success">✓</div>';
    } else if (type === 'error') {
      icon = '<div class="notification-icon error">✗</div>';
    } else {
      icon = '<div class="notification-icon info">i</div>';
    }
    
    notification.innerHTML = `
      ${icon}
      <div class="notification-content">
        <h4>${title}</h4>
        <p>${message}</p>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // 3秒后移除通知
    setTimeout(() => {
      notification.classList.add('fade-out');
      setTimeout(() => {
        if (document.body.contains(notification)) {
          document.body.removeChild(notification);
        }
      }, 500);
    }, 3000);
  }
  
  // 获取状态文本描述
  function getStatusText(status) {
    switch(status) {
      case 'pending': return '等待中';
      case 'active': return '进行中';
      case 'completed': return '已完成';
      default: return '未知状态';
    }
  }
  
  // 格式化日期时间
  function formatDateTime(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    
    return `${year}-${month}-${day} ${hours}:${minutes}`;
  }
  
  // 获取时间差异的友好描述
  function getTimeDifference(oldDate, newDate) {
    const diffMs = newDate - oldDate;
    const diffSec = Math.floor(diffMs / 1000);
    const diffMin = Math.floor(diffSec / 60);
    const diffHour = Math.floor(diffMin / 60);
    const diffDay = Math.floor(diffHour / 24);
    
    if (diffSec < 60) {
      return '刚刚';
    } else if (diffMin < 60) {
      return `${diffMin}分钟前`;
    } else if (diffHour < 24) {
      return `${diffHour}小时前`;
    } else if (diffDay < 30) {
      return `${diffDay}天前`;
    } else {
      const month = String(oldDate.getMonth() + 1).padStart(2, '0');
      const day = String(oldDate.getDate()).padStart(2, '0');
      return `${month}-${day}`;
    }
  }
  
  // 获取已完成阶段的数量
  function getCompletedStages(stages) {
    return stages.filter(stage => stage.status === 'completed').length;
  }
  
  // 判断消息是否包含具体产品信息
  function containsSpecificProductInfo(message) {
    // 匹配具体的产品描述
    const patterns = [
      /\d+[件条米吨]/,  // 匹配数量单位
      /款式|型号|规格|尺寸|颜色|成分/,  // 匹配产品属性
      /牌|品牌|厂家|生产商/,  // 匹配品牌信息
      /价格|报价|元\/[米件条]/  // 匹配价格信息
    ];
    
    return patterns.some(pattern => pattern.test(message));
  }
  
  // 根据不同阶段和用户身份获取下一步操作指引
  function getNextSteps(stageId, stageStatus, trackingData) {
    const wechatContact = '<strong>JJ1598929032</strong>';
    const isSeller = trackingData.isSeller;
    const isBuyer = trackingData.isBuyer;
    
    // 如果阶段已完成，返回空步骤列表
    if (stageStatus === 'completed') {
      return [`此阶段已完成，请继续推进下一阶段`, `如有问题请添加微信：${wechatContact} 咨询`];
    }
    
    // 如果阶段未开始，返回等待指引
    if (stageStatus === 'pending') {
      return [`请等待前序阶段完成后再进行此阶段`, `如需加速进度，请添加微信：${wechatContact}`];
    }
    
    // 阶段处于活跃状态，根据不同情况返回指引
    if (isSeller) {
      switch(stageId) {
        case 1:
          return [
            `详细描述您要出售的产品类型、数量和期望价格`,
            `提供产品图片或详细规格说明`,
            `添加微信：${wechatContact} 加速对接进程`
          ];
        case 2:
          return [
            `耐心等待系统为您匹配潜在买家`,
            `完善您的产品细节信息以提高匹配率`,
            `添加微信：${wechatContact} 获取实时匹配进度`
          ];
        case 3:
          return [
            `准备好详细的产品说明和价格资料`,
            `确认您的发货能力和库存情况`,
            `添加微信：${wechatContact} 了解买家需求细节`
          ];
        case 4:
          return [
            `准备详细的产品资料和报价单`,
            `确认您的仓库库存和物流配送方案`,
            `添加微信：${wechatContact} 与买家直接沟通`
          ];
        case 5:
          return [
            `确认交易细节和付款方式`,
            `准备产品发货和售后服务方案`,
            `必须添加微信：${wechatContact} 完成最终交易`
          ];
        default:
          return [`添加微信：${wechatContact} 获取指导`];
      }
    } else if (isBuyer) {
      switch(stageId) {
        case 1:
          return [
            `详细描述您需要的产品类型、数量和预算`,
            `说明您对产品质量和规格的要求`,
            `添加微信：${wechatContact} 加速对接进程`
          ];
        case 2:
          return [
            `耐心等待系统为您匹配合适库存`,
            `完善您的需求细节以提高匹配精准度`,
            `添加微信：${wechatContact} 获取实时匹配进度`
          ];
        case 3:
          return [
            `准备好与卖家沟通的具体问题`,
            `确认您的采购预算和付款方式`,
            `添加微信：${wechatContact} 了解卖家确认进度`
          ];
        case 4:
          return [
            `仔细评估卖家提供的产品信息`,
            `确认产品是否满足您的需求`,
            `添加微信：${wechatContact} 与卖家直接沟通`
          ];
        case 5:
          return [
            `确认交易细节和收货地址`,
            `准备付款和验收产品`,
            `必须添加微信：${wechatContact} 完成最终交易`
          ];
        default:
          return [`添加微信：${wechatContact} 获取指导`];
      }
    } else {
      // 用户身份未确定
      switch(stageId) {
        case 1:
          return [
            `请在聊天框中说明您是希望出售还是采购`,
            `详细描述您的需求或产品信息`,
            `添加微信：${wechatContact} 获取专业指导`
          ];
        default:
          return [
            `请先明确您的身份（买家/卖家）`,
            `添加微信：${wechatContact} 获取帮助`
          ];
      }
    }
  }
  
  // 为动画添加稳定性修复
  function animateStats() {
    const statValues = document.querySelectorAll('.stat-value');
    
    statValues.forEach(statValue => {
      const targetValue = parseInt(statValue.textContent, 10);
      let currentValue = 0;
      const duration = 2000;
      const stepTime = 20;
      const totalSteps = duration / stepTime;
      const stepValue = targetValue / totalSteps;
      
      function updateValue() {
        currentValue += stepValue;
        
        if (currentValue < targetValue) {
          statValue.textContent = Math.floor(currentValue);
          requestAnimationFrame(updateValue);
        } else {
          statValue.textContent = targetValue;
          
          // 添加以防止数字变化导致布局移动
          statValue.style.minWidth = statValue.offsetWidth + 'px';
        }
      }
      
      // 当元素进入视口时启动动画
      const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            updateValue();
            observer.unobserve(entry.target);
          }
        });
      });
      
      observer.observe(statValue);
    });
  }
  
  // 导航栏初始化与滚动效果
  function initNavbar() {
    const navbar = document.querySelector('.navbar');
    
    // 滚动监听
    window.addEventListener('scroll', function() {
      if (window.scrollY > 50) {
        navbar.classList.add('scrolled');
      } else {
        navbar.classList.remove('scrolled');
      }
    });
    
    // 导航菜单项点击激活效果
    const navLinks = document.querySelectorAll('.main-nav a');
    
    navLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        // 获取目标部分的ID
        const targetId = this.getAttribute('href');
        
        // 仅对页内锚点链接进行处理
        if (targetId.startsWith('#')) {
          e.preventDefault();
          
          const targetSection = document.querySelector(targetId);
          
          if (targetSection) {
            // 平滑滚动到目标部分
            window.scrollTo({
              top: targetSection.offsetTop - 70, // 减去导航栏高度
              behavior: 'smooth'
            });
            
            // 更新URL锚点，但不跳转
            history.pushState(null, null, targetId);
            
            // 移除所有active类
            navLinks.forEach(item => {
              item.parentElement.classList.remove('active');
            });
            
            // 为当前点击项添加active类
            this.parentElement.classList.add('active');
          }
        }
      });
    });
  }
  
  // 添加滚动监听，高亮当前视图中的部分
  function initScrollSpy() {
    // 获取所有主要部分
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.main-nav a');
    
    // 添加滚动监听
    window.addEventListener('scroll', function() {
      // 当前滚动位置
      const scrollPosition = window.scrollY + 100; // 添加一些偏移以提前激活
      
      // 检查每个部分的位置
      sections.forEach(section => {
        // 获取部分的顶部和底部位置
        const sectionTop = section.offsetTop;
        const sectionBottom = sectionTop + section.offsetHeight;
        
        // 检查当前滚动位置是否在该部分
        if (scrollPosition >= sectionTop && scrollPosition < sectionBottom) {
          // 找到对应的导航链接
          const targetId = '#' + section.getAttribute('id');
          
          // 移除所有active类
          navLinks.forEach(link => {
            link.parentElement.classList.remove('active');
            
            // 为当前部分的链接添加active类
            if (link.getAttribute('href') === targetId) {
              link.parentElement.classList.add('active');
            }
          });
        }
      });
    });
  }
  
  // 平滑滚动效果
  function addSmoothScrolling() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function(e) {
        const targetId = this.getAttribute('href');
        
        if (targetId === '#') return;
        
        const target = document.querySelector(targetId);
        
        if (target) {
          e.preventDefault();
          
          window.scrollTo({
            top: target.offsetTop - 70, // 减去导航栏高度
            behavior: 'smooth'
          });
          
          // 更新URL锚点，但不跳转
          history.pushState(null, null, targetId);
        }
      });
    });
  }
  
  // 初始化深色模式
  function initDarkMode() {
    const darkModeToggle = document.querySelector('.dark-mode-toggle');
    if (darkModeToggle) {
      darkModeToggle.addEventListener('click', function() {
        document.body.classList.toggle('dark-mode');
        if (document.body.classList.contains('dark-mode')) {
          this.textContent = '☀️';
        } else {
          this.textContent = '🌙';
        }
      });
    }
  }
});
  
  // 初始化对接进度面板
  function initTrackingPanel() {
    const trackingPanel = document.querySelector('.process-flow');
    if (!trackingPanel) return;
  
    // 初始化进度流程图 - 从localStorage获取当前状态
    let currentTrackingData = JSON.parse(localStorage.getItem('trackingData'));
    
    // 如果没有保存的跟踪数据或者是新会话，初始化默认数据
    if (!currentTrackingData) {
      currentTrackingData = {
        currentStage: 1,
        stages: [
          { id: 1, name: '需求提交', status: 'pending', timestamp: new Date().toISOString() },
          { id: 2, name: '匹配库存', status: 'pending', timestamp: null },
          { id: 3, name: '卖家确认', status: 'pending', timestamp: null },
          { id: 4, name: '买家确认', status: 'pending', timestamp: null },
          { id: 5, name: '确认对接', status: 'pending', timestamp: null }
        ],
        lastUpdated: new Date().toISOString(),
        isSeller: false,
        isBuyer: false,
        needType: '',
        productType: '',
        quantity: '',
        budgetRange: ''
      };
      
      // 保存初始数据
      localStorage.setItem('trackingData', JSON.stringify(currentTrackingData));
    }
    
    // 清空默认内容
    trackingPanel.innerHTML = '';
    
    // 创建进度条
    const progressBar = document.createElement('div');
    progressBar.classList.add('progress-bar');
    
    // 添加各个阶段
    currentTrackingData.stages.forEach(stage => {
      const stageElement = document.createElement('div');
      stageElement.classList.add('progress-stage', `status-${stage.status}`);
      stageElement.dataset.stageId = stage.id;
      
      const stageNumber = document.createElement('div');
      stageNumber.classList.add('stage-number');
      stageNumber.textContent = stage.id;
      
      const stageName = document.createElement('div');
      stageName.classList.add('stage-name');
      stageName.textContent = stage.name;
      
      stageElement.appendChild(stageNumber);
      stageElement.appendChild(stageName);
      
      // 点击阶段显示详情
      stageElement.addEventListener('click', () => showStageDetail(stage, currentTrackingData));
      
      progressBar.appendChild(stageElement);
      
      // 添加连接线（除了最后一个阶段）
      if (stage.id < currentTrackingData.stages.length) {
        const connector = document.createElement('div');
        connector.classList.add('stage-connector', `status-${stage.status}`);
        progressBar.appendChild(connector);
      }
    });
    
    trackingPanel.appendChild(progressBar);
    
    // 添加说明文字
    const statusInfo = document.createElement('div');
    statusInfo.classList.add('status-info');
    
    // 找到当前活跃的阶段
    const activeStage = currentTrackingData.stages.find(stage => stage.status === 'active');
    const stageName = activeStage ? activeStage.name : '准备中';
    
    // 计算最后更新时间
    const lastUpdateTime = getTimeDifference(new Date(currentTrackingData.lastUpdated), new Date());
    
    statusInfo.innerHTML = `当前状态：<span class="status-active">${stageName}</span> · 更新于 ${lastUpdateTime}`;
    trackingPanel.appendChild(statusInfo);
    
    // 添加进度概要
    const progressSummary = document.createElement('div');
    progressSummary.classList.add('progress-summary');
    
    // 根据用户身份显示不同的进度概要
    const isSeller = currentTrackingData.isSeller;
    const isBuyer = currentTrackingData.isBuyer;
    
    // 获取买卖需求类型
    const needTypeDisplay = currentTrackingData.needType ? currentTrackingData.needType : '等待确认';
    const productTypeDisplay = currentTrackingData.productType ? currentTrackingData.productType : '等待确认';
    
    let summaryHTML = '';
    if (isSeller) {
      summaryHTML = `
        <h4>出售信息摘要</h4>
        <ul>
          <li>商品类型: ${productTypeDisplay}</li>
          <li>库存数量: ${currentTrackingData.quantity || '等待确认'}</li>
          <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
        </ul>
      `;
    } else if (isBuyer) {
      summaryHTML = `
        <h4>采购信息摘要</h4>
        <ul>
          <li>需求类型: ${needTypeDisplay}</li>
          <li>产品类型: ${productTypeDisplay}</li>
          <li>预算范围: ${currentTrackingData.budgetRange || '等待确认'}</li>
          <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
        </ul>
      `;
    } else {
      summaryHTML = `
        <h4>对接信息摘要</h4>
        <ul>
          <li>请在聊天中说明您是需要出售还是采购</li>
          <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
        </ul>
      `;
    }
    
    progressSummary.innerHTML = summaryHTML;
    trackingPanel.appendChild(progressSummary);
    
    // 添加刷新按钮
    const refreshButton = document.createElement('button');
    refreshButton.classList.add('refresh-tracking');
    refreshButton.textContent = '请求更新进度';
    refreshButton.addEventListener('click', function() {
      // 请求平台更新进度
      updateTrackingProgress();
      
      // 添加刷新动画
      this.classList.add('refreshing');
      // 更改按钮文本
      this.textContent = '正在请求平台确认...';
      setTimeout(() => {
        this.classList.remove('refreshing');
        this.textContent = '请求更新进度';
      }, 2000);
    });
    
    // 添加平台确认说明
    const confirmNote = document.createElement('div');
    confirmNote.classList.add('platform-note');
    confirmNote.innerHTML = '提示：所有进度更新需要平台确认后才能生效';
    
    trackingPanel.appendChild(refreshButton);
    trackingPanel.appendChild(confirmNote);
  }
  
  // 根据聊天内容更新对接进度
  function updateTrackingFromChat(message, isSeller, isBuyer) {
    // 获取当前进度数据
    let trackingData = JSON.parse(localStorage.getItem('trackingData'));
    
    if (!trackingData) {
      // 如果没有数据，初始化默认数据
      trackingData = {
        currentStage: 1,
        stages: [
          { id: 1, name: '需求提交', status: 'pending', timestamp: new Date().toISOString() },
          { id: 2, name: '匹配库存', status: 'pending', timestamp: null },
          { id: 3, name: '卖家确认', status: 'pending', timestamp: null },
          { id: 4, name: '买家确认', status: 'pending', timestamp: null },
          { id: 5, name: '确认对接', status: 'pending', timestamp: null }
        ],
        lastUpdated: new Date().toISOString(),
        isSeller: false,
        isBuyer: false,
        needType: '',
        productType: '',
        quantity: '',
        budgetRange: ''
      };
    }
    
    // 更新买卖身份
    if (isSeller !== undefined) {
      trackingData.isSeller = isSeller;
    }
    
    if (isBuyer !== undefined) {
      trackingData.isBuyer = isBuyer;
    }
    
    // 处理阶段1：需求提交
    if (trackingData.stages[0].status !== 'completed') {
      // 只要有消息，就认为需求已提交
      trackingData.stages[0].status = 'completed';
      trackingData.stages[0].timestamp = new Date().toISOString();
      
      // 进入第二阶段
      trackingData.stages[1].status = 'active';
      trackingData.currentStage = 2;
    }
    
    // 提取产品类型信息
    const productTypes = ['牛仔', '丝绸', '棉麻', '羊毛', '尼龙', '涤纶'];
    for (const type of productTypes) {
      if (message.includes(type)) {
        trackingData.productType = type;
        break;
      }
    }
    
    // 提取需求类型
    if (message.includes('面料') || message.includes('布料') || message.includes('布')) {
      trackingData.needType = '面料';
    } else if (message.includes('服装') || message.includes('衣服') || message.includes('成衣')) {
      trackingData.needType = '服装';
    }
    
    // 提取数量信息
    const quantityMatch = message.match(/(\d+)([件条米吨个])/);
    if (quantityMatch) {
      trackingData.quantity = quantityMatch[0];
    }
    
    // 提取价格/预算信息
    if (message.includes('价格') || message.includes('多少钱') || message.includes('预算')) {
      const priceMatch = message.match(/(\d+)[-~到至](\d+)[元块]/);
      if (priceMatch) {
        trackingData.budgetRange = priceMatch[0];
      }
    }
    
    // 阶段2：匹配库存 - 根据关键词判断
    if (trackingData.currentStage === 2 && trackingData.stages[1].status === 'active') {
      // 当用户提供了具体的产品和需求类型时，进入到下一阶段
      if (trackingData.productType && trackingData.needType) {
        if (message.includes('匹配') || message.includes('库存') || message.includes('资源') || 
            message.includes('找到') || message.includes('有货') || containsSpecificProductInfo(message)) {
          trackingData.stages[1].status = 'completed';
          trackingData.stages[1].timestamp = new Date().toISOString();
          
          // 根据用户身份决定下一步
          if (trackingData.isSeller) {
            // 卖家寻找买家，进入到买家确认阶段
            trackingData.stages[3].status = 'active';
            trackingData.currentStage = 4;
          } else if (trackingData.isBuyer) {
            // 买家寻找卖家，进入到卖家确认阶段
            trackingData.stages[2].status = 'active';
            trackingData.currentStage = 3;
          }
        }
      }
    }
    
    // 阶段3：卖家确认
    if (trackingData.currentStage === 3 && trackingData.stages[2].status === 'active') {
      if (message.includes('卖家确认') || message.includes('供应商确认') || message.includes('已确认') || 
          message.includes('可以供应') || message.includes('有库存')) {
        trackingData.stages[2].status = 'completed';
        trackingData.stages[2].timestamp = new Date().toISOString();
        
        // 进入买家确认阶段
        trackingData.stages[3].status = 'active';
        trackingData.currentStage = 4;
      }
    }
    
    // 阶段4：买家确认
    if (trackingData.currentStage === 4 && trackingData.stages[3].status === 'active') {
      if (message.includes('买家确认') || message.includes('客户确认') || message.includes('确认购买') || 
          message.includes('接受') || message.includes('满意')) {
        trackingData.stages[3].status = 'completed';
        trackingData.stages[3].timestamp = new Date().toISOString();
        
        // 进入最终确认阶段
        trackingData.stages[4].status = 'active';
        trackingData.currentStage = 5;
      }
    }
    
    // 阶段5：确认对接
    if (trackingData.currentStage === 5 && trackingData.stages[4].status === 'active') {
      if (message.includes('交易成功') || message.includes('已对接') || message.includes('成交') || 
          message.includes('已完成') || message.includes('感谢合作')) {
        trackingData.stages[4].status = 'completed';
        trackingData.stages[4].timestamp = new Date().toISOString();
      }
    }
    
    // 更新最后更新时间
    trackingData.lastUpdated = new Date().toISOString();
    
    // 保存更新后的数据
    localStorage.setItem('trackingData', JSON.stringify(trackingData));
    
    // 重新初始化进度面板以显示最新状态
    initTrackingPanel();
  }
  
  // 显示阶段详细信息
  function showStageDetail(stage, trackingData) {
    const wechatContact = '<strong>JJ1598929032</strong>';
    const modal = document.createElement('div');
    modal.classList.add('progress-modal');
    
    const modalContent = document.createElement('div');
    modalContent.classList.add('modal-content');
    
    // 添加关闭按钮
    const closeBtn = document.createElement('button');
    closeBtn.classList.add('close-modal');
    closeBtn.innerHTML = '&times;';
    closeBtn.addEventListener('click', function() {
      document.body.removeChild(modal);
    });
    
    // 阶段详情内容
    const stageContent = document.createElement('div');
    stageContent.classList.add('stage-detail');
    
    const stageTitle = document.createElement('h3');
    stageTitle.innerHTML = `阶段 ${stage.id}: ${stage.name} <span class="stage-status status-${stage.status}">${getStatusText(stage.status)}</span>`;
    
    const stageTimestamp = document.createElement('div');
    stageTimestamp.classList.add('stage-timestamp');
    if (stage.timestamp) {
      const date = new Date(stage.timestamp);
      stageTimestamp.textContent = `更新时间: ${formatDateTime(date)}`;
    } else {
      stageTimestamp.textContent = '尚未开始';
    }
    
    const stageDescription = document.createElement('p');
    let descriptionText = '';
    
    // 根据不同阶段和用户身份显示不同内容
    const isSeller = trackingData.isSeller;
    const isBuyer = trackingData.isBuyer;
    
    switch(stage.id) {
      case 1:
        if (stage.status === 'completed') {
          descriptionText = `您的${isSeller ? '出售' : isBuyer ? '采购' : ''}需求已成功提交！我们的系统正在进行初步分析，以便更好地匹配合适的${isSeller ? '买家' : '资源'}。如需补充具体要求或查询进度，请添加客服微信：${wechatContact}`;
        } else {
          descriptionText = `请在聊天框中说明您的${isSeller ? '出售' : isBuyer ? '采购' : '需求'}意向，系统将自动为您匹配${isSeller ? '买家' : '资源'}。您可以随时添加客服微信：${wechatContact} 获取帮助。`;
        }
        break;
      case 2:
        if (stage.status === 'completed') {
          descriptionText = `系统已成功为您匹配到符合要求的${isSeller ? '潜在买家' : '库存资源'}。现在进入${isSeller ? '买家' : '卖家'}确认阶段。如需了解匹配详情，请添加微信：${wechatContact}`;
        } else if (stage.status === 'active') {
          descriptionText = `系统正在根据您提供的要求匹配${isSeller ? '买家资源' : '库存'}。这个过程通常需要12小时内完成。如需加快进度或提供更详细的需求，请立即添加微信：${wechatContact}`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在需求提交后自动为您匹配${isSeller ? '买家' : '库存资源'}。`;
        }
        break;
      case 3:
        if (stage.status === 'completed') {
          descriptionText = `卖家已确认库存有效，现在等待买家最终确认。如有任何问题，请添加微信：${wechatContact}`;
        } else if (stage.status === 'active') {
          descriptionText = `我们已找到符合要求的库存，正在等待卖家确认。通常会在24小时内得到回复。如想优先处理或了解更多详情，请添加微信：${wechatContact}`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在匹配到合适库存后联系卖家确认。`;
        }
        break;
      case 4:
        if (stage.status === 'completed') {
          descriptionText = `买家已确认购买意向，现在进入最终确认阶段。请添加微信：${wechatContact} 完成交易细节确认。`;
        } else if (stage.status === 'active') {
          descriptionText = `卖家已确认库存有效，等待您的最终确认。为确保交易顺利进行，请添加微信：${wechatContact} 进行后续沟通`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在卖家确认后联系买家最终确认。`;
        }
        break;
      case 5:
        if (stage.status === 'completed') {
          descriptionText = `恭喜！交易已成功对接。请通过微信：${wechatContact} 完成后续交易流程。`;
        } else if (stage.status === 'active') {
          descriptionText = `恭喜！双方已达成对接意向。为保障交易安全和顺利完成后续流程，请立即添加微信：${wechatContact} 获取详细指导`;
        } else {
          descriptionText = `此阶段尚未开始。系统将在买家确认后进入最终对接确认阶段。`;
        }
        break;
      default:
        descriptionText = `当前阶段状态更新中。如需及时了解最新进展，请添加客服微信：${wechatContact}`;
    }
    
    stageDescription.innerHTML = descriptionText;
    
    const nextStepsTitle = document.createElement('h4');
    nextStepsTitle.textContent = '下一步操作';
    
    const nextStepsList = document.createElement('ul');
    const nextSteps = getNextSteps(stage.id, stage.status, trackingData);
    
    nextSteps.forEach(step => {
      const listItem = document.createElement('li');
      listItem.innerHTML = step;
      nextStepsList.appendChild(listItem);
    });
    
    // 添加平台确认提示
    const platformConfirmNote = document.createElement('div');
    platformConfirmNote.classList.add('platform-confirmation-note');
    platformConfirmNote.innerHTML = `<i>注意：对接进度由平台根据实际情况确认更新，阶段进度无法手动修改。如需加速进度，请添加客服微信：${wechatContact}</i>`;
    
    stageContent.appendChild(stageTitle);
    stageContent.appendChild(stageTimestamp);
    stageContent.appendChild(stageDescription);
    stageContent.appendChild(nextStepsTitle);
    stageContent.appendChild(nextStepsList);
    stageContent.appendChild(platformConfirmNote);
    
    modalContent.appendChild(closeBtn);
    modalContent.appendChild(stageContent);
    modal.appendChild(modalContent);
    
    document.body.appendChild(modal);
  }
  
  // 更新对接进度
  function updateTrackingProgress() {
    let trackingData = JSON.parse(localStorage.getItem('trackingData'));
    
    if (!trackingData) return;
    
    // 获取当前活跃阶段
    let currentActiveIndex = trackingData.stages.findIndex(stage => stage.status === 'active');
    
    // 显示进度更新中消息
    showProgressUpdateMessage();
    
    // 模拟平台确认过程（实际环境中应通过后端API获取确认结果）
    setTimeout(() => {
      // 平台审核确认后，更新进度
      // 注意：在实际环境中，这个确认过程应该来自服务器
      const platformConfirmed = Math.random() > 0.5; // 模拟平台确认结果
      
      if (platformConfirmed && currentActiveIndex !== -1 && currentActiveIndex < trackingData.stages.length - 1) {
        // 当前阶段完成
        trackingData.stages[currentActiveIndex].status = 'completed';
        trackingData.stages[currentActiveIndex].timestamp = new Date().toISOString();
        
        // 下一阶段激活
        trackingData.stages[currentActiveIndex + 1].status = 'active';
        trackingData.currentStage = currentActiveIndex + 2; // +2是因为stage id从1开始
        
        // 显示成功消息
        showNotification("进度已更新", "平台已确认您的进度更新", "success");
      } else {
        // 平台未确认
        showNotification("进度更新等待中", "您的进度更新请求正在等待平台确认", "info");
      }
      
      // 随机更新其他信息
      if (!trackingData.productType && Math.random() > 0.7) {
        const products = ['牛仔', '丝绸', '棉麻', '羊毛'];
        trackingData.productType = products[Math.floor(Math.random() * products.length)];
      }
      
      if (!trackingData.needType && Math.random() > 0.7) {
        trackingData.needType = Math.random() > 0.5 ? '面料' : '服装';
      }
      
      if (!trackingData.quantity && trackingData.isSeller && Math.random() > 0.7) {
        const units = ['件', '米', '条'];
        trackingData.quantity = `${Math.floor(Math.random() * 1000) + 10}${units[Math.floor(Math.random() * units.length)]}`;
      }
      
      if (!trackingData.budgetRange && trackingData.isBuyer && Math.random() > 0.7) {
        const min = Math.floor(Math.random() * 500) + 50;
// DOM Elements
document.addEventListener('DOMContentLoaded', function() {
  // 导航栏滚动效果
  const navbar = document.querySelector('.navbar');
  const heroSection = document.querySelector('.hero');
  
  if (navbar && heroSection) {
    const heroHeight = heroSection.offsetHeight;
    
    window.addEventListener('scroll', function() {
      if (window.scrollY > 100) {
        navbar.style.backgroundColor = 'rgba(47, 47, 47, 0.95)';
        navbar.style.color = '#FAF9F6';
      } else {
        navbar.style.backgroundColor = 'rgba(250, 249, 246, 0.95)';
        navbar.style.color = '#2F2F2F';
      }
    });
  }

  // 切换主题模式
  const themeSwitch = document.querySelector('.theme-switch');
  if (themeSwitch) {
    themeSwitch.addEventListener('click', function() {
      document.body.classList.toggle('dark-mode');
      if (document.body.classList.contains('dark-mode')) {
        themeSwitch.textContent = '☀️';
      } else {
        themeSwitch.textContent = '🌙';
      }
    });
  }

  // 语言切换
  const langSwitch = document.querySelector('.lang-switch');
  if (langSwitch) {
    langSwitch.addEventListener('click', function() {
      if (langSwitch.textContent === 'EN') {
        langSwitch.textContent = 'CN';
        // 这里添加实际语言切换逻辑
      } else {
        langSwitch.textContent = 'EN';
        // 这里添加实际语言切换逻辑
      }
    });
  }

  // 按钮波纹效果
  const buttons = document.querySelectorAll('button:not(.tag)');
  buttons.forEach(button => {
    button.classList.add('ripple-button');
    button.addEventListener('click', createRipple);
  });

  function createRipple(event) {
    const button = event.currentTarget;
    const ripple = document.createElement('span');
    const rect = button.getBoundingClientRect();
    
    const size = Math.max(rect.width, rect.height);
    const x = event.clientX - rect.left - size / 2;
    const y = event.clientY - rect.top - size / 2;
    
    ripple.style.width = ripple.style.height = `${size}px`;
    ripple.style.left = `${x}px`;
    ripple.style.top = `${y}px`;
    
    button.appendChild(ripple);
    
    setTimeout(() => {
      ripple.remove();
    }, 600);
  }

  // 材料标签交互
  const materialTags = document.querySelectorAll('.material-tags .tag');
  if (materialTags.length > 0) {
    materialTags.forEach(tag => {
      tag.addEventListener('click', function() {
        materialTags.forEach(t => t.classList.remove('active'));
        this.classList.add('active');
        
        // 标签缝合动画效果
        const tagText = this.textContent;
        const filterDisplay = document.createElement('div');
        filterDisplay.classList.add('active-filter');
        filterDisplay.textContent = `已筛选: ${tagText}`;
        
        const filterContainer = document.querySelector('.material-tags');
        const existingFilter = document.querySelector('.active-filter');
        
        if (existingFilter) {
          filterContainer.removeChild(existingFilter);
        }
        
        if (tagText !== '全部') {
          filterContainer.appendChild(filterDisplay);
        }
        
        // 这里添加实际过滤逻辑
        filterProjects(tagText);
      });
    });
  }

  // 模拟项目过滤功能
  function filterProjects(category) {
    console.log(`Filtering projects by: ${category}`);
    // 实际项目中这里会根据类别过滤DOM元素或从服务器请求数据
  }

  // 生成3D展示墙
  initShowcase3D();

  // 生成项目展示卡片
  generateProjectCards();

  // 聊天界面交互
  initChatInterface();
  
  // 确保聊天界面加载完成后有默认消息
  setTimeout(function() {
    const chatMessages = document.querySelector('#chat-messages');
    if (chatMessages && chatMessages.children.length === 0) {
      console.log("Chat interface still empty after initialization, retrying...");
      initChatInterface();
    }
  }, 500);

  // 视差滚动效果
  initParallaxEffect();

  // 初始化对接进度面板
  initTrackingPanel();

  // 初始化统计数字动画
  animateStats();
  
  // 确保标题不会因滚动或动画而移动
  const sectionHeaders = document.querySelectorAll('.section-header');
  sectionHeaders.forEach(header => {
    // 为标题元素添加固定位置类
    header.classList.add('stable-position');
  });

  // 对所有标题应用固定样式
  const allHeadings = document.querySelectorAll('h2, h3');
  allHeadings.forEach(heading => {
    heading.style.minHeight = heading.offsetHeight + 'px';
  });

  // 初始化导航栏
  initNavbar();
  
  // 初始化语言切换
  initLanguageSwitch();
  
  // 初始化深色模式
  initDarkMode();
  
  // 初始化聊天界面
  initChatInterface();
  
  // 初始化对接进度面板
  initTrackingPanel();
  
  // 为页面添加平滑滚动
  addSmoothScrolling();
  
  // 滚动监听，高亮当前活动的导航菜单项
  initScrollSpy();
});

// 3D展示墙初始化
function initShowcase3D() {
  const container = document.querySelector('.showcase-container');
  if (!container) return;

  // 移除占位符
  const placeholder = container.querySelector('.placeholder-3d');
  if (placeholder) {
    container.removeChild(placeholder);
  }

  // 创建3D展示墙 - 简化版模拟
  // 在完整实现中，这里应该使用Three.js库
  
  // 创建6个展示卡片作为立方体的面
  const cube = document.createElement('div');
  cube.classList.add('showcase-cube');
  
  for (let i = 0; i < 6; i++) {
    const face = document.createElement('div');
    face.classList.add('cube-face', `face-${i+1}`);
    
    const image = document.createElement('img');
    image.src = `assets/project-${i+1}.jpg`;
    image.alt = `改造项目 ${i+1}`;
    
    face.appendChild(image);
    cube.appendChild(face);
    
    // 点击展开详情
    face.addEventListener('click', function() {
      showProjectDetail(i+1);
    });
  }
  
  container.appendChild(cube);
  
  // 添加拖动交互
  let isDragging = false;
  let previousX = 0;
  let previousY = 0;
  let rotX = 0;
  let rotY = 0;
  
  container.addEventListener('mousedown', function(e) {
    isDragging = true;
    previousX = e.clientX;
    previousY = e.clientY;
    container.style.cursor = 'grabbing';
  });
  
  window.addEventListener('mousemove', function(e) {
    if (isDragging) {
      const dx = e.clientX - previousX;
      const dy = e.clientY - previousY;
      
      rotY += dx * 0.5;
      rotX -= dy * 0.5;
      
      cube.style.transform = `rotateX(${rotX}deg) rotateY(${rotY}deg)`;
      
      previousX = e.clientX;
      previousY = e.clientY;
    }
  });
  
  window.addEventListener('mouseup', function() {
    isDragging = false;
    container.style.cursor = 'grab';
  });
}

// 项目详情弹窗
function showProjectDetail(projectId) {
  // 创建模态框
  const modal = document.createElement('div');
  modal.classList.add('project-modal');
  
  const modalContent = document.createElement('div');
  modalContent.classList.add('modal-content');
  
  // 添加关闭按钮
  const closeBtn = document.createElement('button');
  closeBtn.classList.add('close-modal');
  closeBtn.innerHTML = '&times;';
  closeBtn.addEventListener('click', function() {
    document.body.removeChild(modal);
  });
  
  // 添加项目内容
  const projectContent = document.createElement('div');
  projectContent.classList.add('project-detail');
  
  const projectTitle = document.createElement('h3');
  projectTitle.textContent = `改造项目 ${projectId}`;
  
  const beforeAfterContainer = document.createElement('div');
  beforeAfterContainer.classList.add('before-after-slider');
  
  // 这里简化实现，实际项目中应该使用更复杂的滑块对比组件
  const beforeImg = document.createElement('img');
  beforeImg.src = `assets/project-${projectId}-before.jpg`;
  beforeImg.alt = '改造前';
  
  const afterImg = document.createElement('img');
  afterImg.src = `assets/project-${projectId}-after.jpg`;
  afterImg.alt = '改造后';
  
  beforeAfterContainer.appendChild(beforeImg);
  beforeAfterContainer.appendChild(afterImg);
  
  const projectDesc = document.createElement('p');
  projectDesc.textContent = '这是一个旧牛仔裤改造项目，通过拼接剪裁和手工装饰，将废旧牛仔裤变成时尚单肩包。采用零浪费设计原则，甚至将拉链和纽扣也重新利用。';
  
  const designSketch = document.createElement('img');
  designSketch.classList.add('design-sketch');
  designSketch.src = `assets/sketch-${projectId}.jpg`;
  designSketch.alt = '设计草图';
  
  projectContent.appendChild(projectTitle);
  projectContent.appendChild(beforeAfterContainer);
  projectContent.appendChild(projectDesc);
  projectContent.appendChild(designSketch);
  
  modalContent.appendChild(closeBtn);
  modalContent.appendChild(projectContent);
  modal.appendChild(modalContent);
  
  document.body.appendChild(modal);
}

// 生成项目卡片
function generateProjectCards() {
  const projectsGrid = document.querySelector('.projects-grid');
  if (!projectsGrid) return;
  
  // 模拟数据
  const projectsData = [
    { id: 1, title: '牛仔外套改造', material: '牛仔', difficulty: 4, imageUrl: 'assets/project-1.jpg' },
    { id: 2, title: '丝质围巾变裙', material: '丝绸', difficulty: 3, imageUrl: 'assets/project-2.jpg' },
    { id: 3, title: '亚麻衬衫翻新', material: '棉麻', difficulty: 2, imageUrl: 'assets/project-3.jpg' },
    { id: 4, title: '皮夹克改造', material: '皮革', difficulty: 5, imageUrl: 'assets/project-4.jpg' },
    { id: 5, title: '针织衫重构', material: '针织', difficulty: 3, imageUrl: 'assets/project-5.jpg' },
    { id: 6, title: '牛仔裤变包', material: '牛仔', difficulty: 4, imageUrl: 'assets/project-6.jpg' },
    { id: 7, title: '丝巾再造', material: '丝绸', difficulty: 2, imageUrl: 'assets/project-7.jpg' },
    { id: 8, title: '棉布拼接', material: '棉麻', difficulty: 3, imageUrl: 'assets/project-8.jpg' }
  ];
  
  projectsData.forEach(project => {
    const card = document.createElement('div');
    card.classList.add('project-card', 'card-3d');
    card.dataset.material = project.material;
    
    const cardInner = document.createElement('div');
    cardInner.classList.add('card-inner');
    
    // 卡片正面
    const cardFront = document.createElement('div');
    cardFront.classList.add('card-front');
    
    const image = document.createElement('img');
    image.src = project.imageUrl;
    image.alt = project.title;
    
    const title = document.createElement('h4');
    title.textContent = project.title;
    
    const difficultyContainer = document.createElement('div');
    difficultyContainer.classList.add('difficulty-stars');
    
    // 添加难度星级
    for (let i = 0; i < 5; i++) {
      const star = document.createElement('span');
      star.classList.add('star');
      if (i < project.difficulty) {
        star.classList.add('filled');
      }
      difficultyContainer.appendChild(star);
    }
    
    cardFront.appendChild(image);
    cardFront.appendChild(title);
    cardFront.appendChild(difficultyContainer);
    
    // 卡片背面
    const cardBack = document.createElement('div');
    cardBack.classList.add('card-back');
    
    const materialChart = document.createElement('div');
    materialChart.classList.add('material-chart');
    materialChart.innerHTML = `<h5>材料成分</h5>
      <div class="chart-container">
        <canvas class="radar-chart" width="150" height="150"></canvas>
      </div>
      <p>主要材质: ${project.material}</p>`;
    
    const storyPreview = document.createElement('div');
    storyPreview.classList.add('story-preview');
    storyPreview.innerHTML = `<p>这是一个关于如何给旧衣物赋予新生命的故事，点击查看完整改造过程...</p>`;
    
    const viewButton = document.createElement('button');
    viewButton.classList.add('view-button');
    viewButton.textContent = '查看详情';
    viewButton.addEventListener('click', function() {
      showProjectDetail(project.id);
    });
    
    cardBack.appendChild(materialChart);
    cardBack.appendChild(storyPreview);
    cardBack.appendChild(viewButton);
    
    cardInner.appendChild(cardFront);
    cardInner.appendChild(cardBack);
    card.appendChild(cardInner);
    
    projectsGrid.appendChild(card);
  });
}

// 聊天界面交互
function initChatInterface() {
  console.log("Initializing chat interface...");
  
  const chatInterface = document.querySelector('.chat-interface');
  if (!chatInterface) {
    console.error("Chat interface not found");
    return;
  }
  
  const chatMessages = document.querySelector('#chat-messages');
  const chatInput = document.querySelector('.chat-input input');
  const sendButton = document.querySelector('.send-button');
  const chatSidebar = document.querySelector('.chat-sidebar');
  
  if (!chatMessages || !chatInput || !sendButton) {
    console.error("Chat components missing:", {
      messages: !!chatMessages,
      input: !!chatInput,
      button: !!sendButton
    });
    return;
  }
  
  console.log("Chat components found, continuing initialization");
  
  // 变量用于存储当前会话状态
  let currentSessionId = localStorage.getItem('currentSessionId');
  let currentSessionTitle = "新对话";
  let previousTopics = {
    fabric: false,
    clothing: false,
    price: false,
    contact: false,
    seller: false,
    buyer: false
  };
  
  // 初始化聊天界面
  if (chatSidebar) {
    initChatHistory(chatSidebar);
  }
  
  // 如果有当前会话ID，加载该会话
  if (currentSessionId) {
    const chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || {};
    if (chatHistory[currentSessionId]) {
      loadSession(currentSessionId);
    } else {
      // 如果保存的会话ID不存在历史记录中，创建新会话
      startNewSession();
    }
  } else {
    // 无会话ID，创建新会话
    startNewSession();
  }
  
  // 检查聊天界面是否为空，如果是则重新初始化
  checkChatInterfaceEmpty();
  
  // 添加事件监听器
  if (sendButton) {
    sendButton.addEventListener('click', sendMessage);
  }
  
  if (chatInput) {
    chatInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        sendMessage();
      }
    });
    
    // 添加输入时的动态效果
    chatInput.addEventListener('focus', function() {
      if (this.parentElement) {
        this.parentElement.classList.add('input-active');
      }
    });
    
    chatInput.addEventListener('blur', function() {
      if (this.parentElement) {
        this.parentElement.classList.remove('input-active');
      }
    });
  }
  
  // 初始调整高度
  adjustChatHeight();
  
  // 监听窗口大小变化，重新调整高度
  window.addEventListener('resize', adjustChatHeight);
  
  // 如果聊天框为空，添加一个新会话
  function checkChatInterfaceEmpty() {
    if (!chatMessages || chatMessages.children.length === 0) {
      console.log("Chat interface is empty, reinitializing...");
      startNewSession();
    }
  }

  // 发送消息
  function sendMessage() {
    if (!chatInput || !chatMessages) {
      console.error("Cannot send message: UI elements not found");
      return;
    }
    
    const message = chatInput.value.trim();
    if (message === '') return;
    
    console.log("Sending message:", message);
    
    // 创建用户消息
    const userMessage = document.createElement('div');
    userMessage.classList.add('message', 'user-message');
    userMessage.textContent = message;
    
    chatMessages.appendChild(userMessage);
    
    // 清空输入框
    chatInput.value = '';
    
    // 滚动到底部
    chatMessages.scrollTop = chatMessages.scrollHeight;
    
    // 确保聊天界面高度适应内容
    adjustChatHeight();
    
    // 保存用户消息到当前会话
    saveMessageToHistory(currentSessionId, 'user', message);
    
    // 如果这是新会话的第一条消息，根据内容生成标题
    if (currentSessionTitle === "新对话") {
      currentSessionTitle = generateSessionTitle(message);
      updateSessionList();
    }
    
    // 模拟系统回复
    setTimeout(function() {
      // 获取自动回复
      const autoReply = getAutoReply(message);
      
      // 创建系统消息
      const systemMessage = document.createElement('div');
      systemMessage.classList.add('message', 'system-message');
      
      const needleIcon = document.createElement('span');
      needleIcon.classList.add('needle-icon');
      needleIcon.innerHTML = '🧵';
      
      const messageText = document.createElement('span');
      systemMessage.appendChild(needleIcon);
      systemMessage.appendChild(messageText);
      
      chatMessages.appendChild(systemMessage);
      
      // 添加内容
      messageText.innerHTML = autoReply;
      
      // 保存系统回复到当前会话
      saveMessageToHistory(currentSessionId, 'system', autoReply);
      
      // 添加打字动画效果
      addTypingAnimation(messageText);
      
      // 滚动到底部
      chatMessages.scrollTop = chatMessages.scrollHeight;
      
      // 再次调整聊天界面高度
      adjustChatHeight();
      
      // 基于系统回复再次更新对接进度
      updateTrackingFromChat(autoReply);
    }, 1000);
  }

  // 生成唯一的会话ID
  function generateSessionId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  }
  
  // 根据用户首条消息内容生成会话标题
  function generateSessionTitle(message) {
    // 提取消息的前10个字符作为标题，如果消息太短则全部使用
    const titleText = message.length > 10 ? message.substring(0, 10) + '...' : message;
    return titleText;
  }
  
  // 保存消息到本地存储
  function saveMessageToHistory(sessionId, sender, content) {
    // 从本地存储获取已有历史记录
    let chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || {};
    
    // 如果会话不存在，则创建新会话
    if (!chatHistory[sessionId]) {
      chatHistory[sessionId] = {
        id: sessionId,
        title: currentSessionTitle,
        date: new Date().toISOString(),
        messages: []
      };
    }
    
    // 添加新消息
    chatHistory[sessionId].messages.push({
      sender: sender,
      content: content,
      timestamp: new Date().toISOString()
    });
    
    // 更新最后活动时间
    chatHistory[sessionId].lastActive = new Date().toISOString();
    
    // 更新会话标题（如果已生成）
    if (currentSessionTitle !== "新对话") {
      chatHistory[sessionId].title = currentSessionTitle;
    }
    
    // 保存回本地存储
    localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
    
    // 更新当前会话ID到localStorage
    localStorage.setItem('currentSessionId', sessionId);
    
    // 更新会话列表
    updateSessionList();
  }
  
  // 添加打字动画效果
  function addTypingAnimation(element) {
    const text = element.innerHTML;
    element.innerHTML = '';
    let i = 0;
    
    function typeWriter() {
      if (i < text.length) {
        element.innerHTML += text.charAt(i);
        i++;
        // 随机打字速度，让效果更自然
        setTimeout(typeWriter, Math.random() * 10 + 20);
      }
    }
    
    // 考虑到文本较长且有HTML标签，这里简化不使用真实的打字效果
    element.innerHTML = text;
    element.style.opacity = '0';
    setTimeout(() => {
      element.style.transition = 'opacity 0.5s';
      element.style.opacity = '1';
    }, 100);
  }
  
  // 初始化聊天历史
  function initChatHistory(sidebar) {
    // 确保历史会话标题已添加
    if (!sidebar.querySelector('.sidebar-header')) {
      const header = document.createElement('div');
      header.classList.add('sidebar-header');
      header.innerHTML = '历史会话<span class="current-time"></span>';
      sidebar.appendChild(header);
    }
    
    // 更新当前北京时间显示
    updateCurrentTime();
    
    // 更新会话列表
    updateSessionList();
    
    // 每秒更新一次时间
    setInterval(updateCurrentTime, 1000);
  }
  
  // 更新当前北京时间显示
  function updateCurrentTime() {
    const now = new Date();
    now.setTime(now.getTime() + (8 * 60 * 60 * 1000)); // 调整为UTC+8
    const hours = String(now.getUTCHours()).padStart(2, '0');
    const minutes = String(now.getUTCMinutes()).padStart(2, '0');
    const seconds = String(now.getUTCSeconds()).padStart(2, '0');
    const currentTime = `${hours}:${minutes}:${seconds}`;
    
    const timeElement = chatSidebar.querySelector('.sidebar-header .current-time');
    if (timeElement) {
      timeElement.textContent = `北京时间 ${currentTime}`;
    }
  }
  
  // 格式化日期为更友好的格式
  function formatDate(dateString) {
    const date = new Date(dateString);
    // 调整为北京时间
    date.setTime(date.getTime() + (8 * 60 * 60 * 1000));
    
    const now = new Date();
    now.setTime(now.getTime() + (8 * 60 * 60 * 1000));
    
    const today = new Date(now);
    today.setUTCHours(0, 0, 0, 0);
    
    const yesterday = new Date(today);
    yesterday.setUTCDate(yesterday.getUTCDate() - 1);
    
    // 检查是否是今天
    if (date >= today) {
      const hours = String(date.getUTCHours()).padStart(2, '0');
      const minutes = String(date.getUTCMinutes()).padStart(2, '0');
      return `今天 ${hours}:${minutes}`;
    }
    
    // 检查是否是昨天
    if (date >= yesterday && date < today) {
      return "昨天";
    }
    
    // 一周内显示星期
    const weekDays = ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];
    const diffDays = Math.floor((today - date) / (1000 * 60 * 60 * 24));
    
    if (diffDays < 7) {
      return weekDays[date.getUTCDay()];
    }
    
    // 更早的日期显示完整日期
    const year = date.getUTCFullYear();
    const month = String(date.getUTCMonth() + 1).padStart(2, '0');
    const day = String(date.getUTCDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }
  
  // 更新会话列表
  function updateSessionList() {
    // 从本地存储获取历史记录
    const chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || {};
    
    // 获取所有会话并按最后活动时间排序
    const sessions = Object.values(chatHistory).sort((a, b) => 
      new Date(b.lastActive || b.date) - new Date(a.lastActive || a.date)
    );
    
    // 清空已有的历史会话项目
    chatSidebar.querySelectorAll('.session-item').forEach(item => item.remove());
    
    // 如果没有历史会话记录，添加新会话按钮
    if (sessions.length === 0) {
      const newChatButton = document.createElement('div');
      newChatButton.classList.add('session-item', 'new-chat');
      newChatButton.innerHTML = '<div class="session-title">开始新对话</div>';
      
      newChatButton.addEventListener('click', () => {
        startNewSession();
      });
      
      chatSidebar.appendChild(newChatButton);
      return;
    }
    
    // 添加新会话按钮
    const newChatButton = document.createElement('div');
    newChatButton.classList.add('session-item', 'new-chat');
    newChatButton.innerHTML = '<div class="session-title">开始新对话</div>';
    
    newChatButton.addEventListener('click', () => {
      startNewSession();
    });
    
    chatSidebar.appendChild(newChatButton);
    
    // 添加历史会话
    sessions.forEach(session => {
      const sessionItem = document.createElement('div');
      sessionItem.classList.add('session-item');
      sessionItem.dataset.sessionId = session.id;
      
      if (session.id === currentSessionId) {
        sessionItem.classList.add('active');
      }
      
      const sessionTitle = document.createElement('div');
      sessionTitle.classList.add('session-title');
      sessionTitle.textContent = session.title || "无标题对话";
      
      const sessionDate = document.createElement('div');
      sessionDate.classList.add('session-date');
      
      const formattedDate = formatDate(session.lastActive || session.date);
      sessionDate.innerHTML = `<span class="date-icon">🕒</span> ${formattedDate}`;
      
      // 完整日期作为悬停提示
      const fullDate = new Date(session.lastActive || session.date);
      fullDate.setTime(fullDate.getTime() + (8 * 60 * 60 * 1000)); // 调整为北京时间
      
      const fullDateStr = `${fullDate.getUTCFullYear()}-${String(fullDate.getUTCMonth() + 1).padStart(2, '0')}-${String(fullDate.getUTCDate()).padStart(2, '0')} ${String(fullDate.getUTCHours()).padStart(2, '0')}:${String(fullDate.getUTCMinutes()).padStart(2, '0')}`;
      sessionDate.title = fullDateStr;
      
      // 添加删除按钮
      const deleteButton = document.createElement('span');
      deleteButton.classList.add('delete-session');
      deleteButton.innerHTML = '✕';
      deleteButton.title = '删除对话';
      deleteButton.onclick = (e) => {
        e.stopPropagation(); // 阻止事件冒泡，避免触发会话点击事件
        deleteSession(session.id);
      };
      
      sessionItem.appendChild(sessionTitle);
      sessionItem.appendChild(sessionDate);
      sessionItem.appendChild(deleteButton);
      
      // 点击切换会话
      sessionItem.addEventListener('click', () => {
        loadSession(session.id);
      });
      
      chatSidebar.appendChild(sessionItem);
    });
  }
  
  // 删除会话
  function deleteSession(sessionId) {
    if (confirm('确认删除这个对话记录吗？此操作无法撤销。')) {
      // 从本地存储中获取会话数据
      const chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || {};
      
      // 删除指定会话
      if (chatHistory[sessionId]) {
        delete chatHistory[sessionId];
        
        // 保存更新后的会话数据
        localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
        
        // 如果删除的是当前会话，则开始新会话
        if (sessionId === currentSessionId) {
          startNewSession();
        } else {
          // 仅更新会话列表
          updateSessionList();
        }
      }
    }
  }
  
  // 加载指定会话
  function loadSession(sessionId) {
    console.log("Loading session:", sessionId);
    
    const chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || {};
    
    if (!chatHistory[sessionId]) {
      console.error("Session not found:", sessionId);
      startNewSession();
      return;
    }
    
    // 更新当前会话
    currentSessionId = sessionId;
    localStorage.setItem('currentSessionId', currentSessionId);
    
    // 更新会话标题
    currentSessionTitle = chatHistory[sessionId].title || "未命名对话";
    
    // 清空当前消息区域
    if (chatMessages) {
      chatMessages.innerHTML = '';
      
      // 恢复历史消息
      if (chatHistory[sessionId].messages && chatHistory[sessionId].messages.length > 0) {
        chatHistory[sessionId].messages.forEach(msgObj => {
          const messageElement = document.createElement('div');
          
          if (msgObj.sender === 'user') {
            messageElement.classList.add('message', 'user-message');
            messageElement.textContent = msgObj.content;
          } else {
            messageElement.classList.add('message', 'system-message');
            
            const needleIcon = document.createElement('span');
            needleIcon.classList.add('needle-icon');
            needleIcon.innerHTML = '🧵';
            
            const messageText = document.createElement('span');
            messageText.innerHTML = msgObj.content;
            
            messageElement.appendChild(needleIcon);
            messageElement.appendChild(messageText);
          }
          
          chatMessages.appendChild(messageElement);
        });
      } else {
        // 如果没有消息，添加默认欢迎消息
        const systemMessage = document.createElement('div');
        systemMessage.classList.add('message', 'system-message');
        
        const needleIcon = document.createElement('span');
        needleIcon.classList.add('needle-icon');
        needleIcon.innerHTML = '🧵';
        
        const messageText = document.createElement('span');
        messageText.innerHTML = '欢迎回来！有什么我可以帮助您的吗？';
        
        systemMessage.appendChild(needleIcon);
        systemMessage.appendChild(messageText);
        
        chatMessages.appendChild(systemMessage);
        
        // 保存欢迎消息
        saveMessageToHistory(currentSessionId, 'system', messageText.innerHTML);
      }
      
      // 更新会话列表中的活动状态
      updateSessionList();
      
      // 滚动到底部
      chatMessages.scrollTop = chatMessages.scrollHeight;
      
      // 调整聊天界面高度
      adjustChatHeight();
    } else {
      console.error("Chat messages container not found when loading session");
    }
  }
  
  // 开始新会话
  function startNewSession() {
    console.log("Starting new session");
    
    // 生成新的会话ID
    currentSessionId = generateSessionId();
    localStorage.setItem('currentSessionId', currentSessionId);
    
    currentSessionTitle = "新对话";
    
    // 清空消息区域
    if (chatMessages) {
      chatMessages.innerHTML = '';
      
      // 添加默认欢迎消息
      const systemMessage = document.createElement('div');
      systemMessage.classList.add('message', 'system-message');
      
      const needleIcon = document.createElement('span');
      needleIcon.classList.add('needle-icon');
      needleIcon.innerHTML = '🧵';
      
      const messageText = document.createElement('span');
      messageText.innerHTML = '欢迎来到Fashion Reborn服装改造艺术空间！我是您的顾问，有任何关于清理库存、收购库存，改造成衣或面料的问题都可以咨询我。如需直接联系，请添加微信：<strong>JJ1598929032</strong>';
      
      systemMessage.appendChild(needleIcon);
      systemMessage.appendChild(messageText);
      
      chatMessages.appendChild(systemMessage);
      
      // 保存欢迎消息到历史记录
      saveMessageToHistory(currentSessionId, 'system', messageText.innerHTML);
      
      // 更新会话列表
      updateSessionList();
      
      // 滚动到底部
      chatMessages.scrollTop = chatMessages.scrollHeight;
      
      // 调整高度
      adjustChatHeight();
    } else {
      console.error("Chat messages container not found");
    }
  }
  
  // 调整聊天界面高度以适应内容
  function adjustChatHeight() {
    // 确保我们有必要的DOM元素
    if (!chatInterface || !chatMessages) {
      console.error("Cannot adjust chat height: Required elements not found");
      return;
    }
    
    // 确保对话框内容完全显示
    chatMessages.style.maxHeight = '520px'; // 保持最大高度限制
    
    // 确保整个聊天界面不遮挡对接进度面板
    const trackingPanel = document.querySelector('.tracking-panel');
    if (trackingPanel) {
      const chatBottom = chatInterface.getBoundingClientRect().bottom;
      const trackingTop = trackingPanel.getBoundingClientRect().top;
      
      // 如果聊天界面底部超出跟踪面板顶部，增加上边距
      if (chatBottom > trackingTop) {
        const currentMargin = parseInt(getComputedStyle(trackingPanel).marginTop) || 0;
        trackingPanel.style.marginTop = (currentMargin + (chatBottom - trackingTop) + 20) + 'px';
      }
    }
    
    // 为消息添加动画效果
    const messages = document.querySelectorAll('.message');
    messages.forEach((message, index) => {
      if (!message.style.animationDelay) {
        message.style.animationDelay = `${index * 0.1}s`;
      }
    });
  }
}

// 视差滚动效果
function initParallaxEffect() {
  const sections = document.querySelectorAll('section');
  
  window.addEventListener('scroll', function() {
    const scrollPosition = window.scrollY;
    
    sections.forEach(section => {
      // 排除标题元素，只对内容区域应用视差效果
      const contentElements = section.querySelectorAll('.showcase-container, .projects-grid, .community-market, .challenge-entries, .resources-grid');
      
      contentElements.forEach(element => {
        const distance = element.getBoundingClientRect().top;
        const speed = 0.1;
        
        if (Math.abs(distance) < window.innerHeight) {
          // 只在元素进入视口时应用微小的视差效果，避免影响布局
          const translate = distance * speed;
          element.style.transform = `translateY(${translate}px)`;
        }
      });
      
      // 确保标题元素保持稳定
      const sectionHeader = section.querySelector('.section-header');
      if (sectionHeader) {
        sectionHeader.style.transform = 'none';
      }
    });
  });
}

// 对接进度面板功能
function initTrackingPanel() {
  const trackingPanel = document.querySelector('.process-flow');
  if (!trackingPanel) return;

  // 初始化进度流程图 - 从localStorage获取当前状态
  let currentTrackingData = JSON.parse(localStorage.getItem('trackingData'));
  
  // 如果没有保存的跟踪数据或者是新会话，初始化默认数据
  if (!currentTrackingData) {
    currentTrackingData = {
      currentStage: 1,
      stages: [
        { id: 1, name: '需求提交', status: 'pending', timestamp: new Date().toISOString() },
        { id: 2, name: '匹配库存', status: 'pending', timestamp: null },
        { id: 3, name: '卖家确认', status: 'pending', timestamp: null },
        { id: 4, name: '买家确认', status: 'pending', timestamp: null },
        { id: 5, name: '确认对接', status: 'pending', timestamp: null }
      ],
      lastUpdated: new Date().toISOString(),
      isSeller: false,
      isBuyer: false,
      needType: '',
      productType: '',
      quantity: '',
      budgetRange: ''
    };
    
    // 保存初始数据
    localStorage.setItem('trackingData', JSON.stringify(currentTrackingData));
  }
  
  // 清空默认内容
  trackingPanel.innerHTML = '';
  
  // 创建进度条
  const progressBar = document.createElement('div');
  progressBar.classList.add('progress-bar');
  
  // 添加各个阶段
  currentTrackingData.stages.forEach(stage => {
    const stageElement = document.createElement('div');
    stageElement.classList.add('progress-stage', `status-${stage.status}`);
    stageElement.dataset.stageId = stage.id;
    
    const stageNumber = document.createElement('div');
    stageNumber.classList.add('stage-number');
    stageNumber.textContent = stage.id;
    
    const stageName = document.createElement('div');
    stageName.classList.add('stage-name');
    stageName.textContent = stage.name;
    
    stageElement.appendChild(stageNumber);
    stageElement.appendChild(stageName);
    
    // 点击阶段显示详情
    stageElement.addEventListener('click', () => showStageDetail(stage, currentTrackingData));
    
    progressBar.appendChild(stageElement);
    
    // 添加连接线（除了最后一个阶段）
    if (stage.id < currentTrackingData.stages.length) {
      const connector = document.createElement('div');
      connector.classList.add('stage-connector', `status-${stage.status}`);
      progressBar.appendChild(connector);
    }
  });
  
  trackingPanel.appendChild(progressBar);
  
  // 添加说明文字
  const statusInfo = document.createElement('div');
  statusInfo.classList.add('status-info');
  
  // 找到当前活跃的阶段
  const activeStage = currentTrackingData.stages.find(stage => stage.status === 'active');
  const stageName = activeStage ? activeStage.name : '准备中';
  
  // 计算最后更新时间
  const lastUpdateTime = getTimeDifference(new Date(currentTrackingData.lastUpdated), new Date());
  
  statusInfo.innerHTML = `当前状态：<span class="status-active">${stageName}</span> · 更新于 ${lastUpdateTime}`;
  trackingPanel.appendChild(statusInfo);
  
  // 添加进度概要
  const progressSummary = document.createElement('div');
  progressSummary.classList.add('progress-summary');
  
  // 根据用户身份显示不同的进度概要
  const isSeller = currentTrackingData.isSeller;
  const isBuyer = currentTrackingData.isBuyer;
  
  // 获取买卖需求类型
  const needTypeDisplay = currentTrackingData.needType ? currentTrackingData.needType : '等待确认';
  const productTypeDisplay = currentTrackingData.productType ? currentTrackingData.productType : '等待确认';
  
  let summaryHTML = '';
  if (isSeller) {
    summaryHTML = `
      <h4>出售信息摘要</h4>
      <ul>
        <li>商品类型: ${productTypeDisplay}</li>
        <li>库存数量: ${currentTrackingData.quantity || '等待确认'}</li>
        <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
      </ul>
    `;
  } else if (isBuyer) {
    summaryHTML = `
      <h4>采购信息摘要</h4>
      <ul>
        <li>需求类型: ${needTypeDisplay}</li>
        <li>产品类型: ${productTypeDisplay}</li>
        <li>预算范围: ${currentTrackingData.budgetRange || '等待确认'}</li>
        <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
      </ul>
    `;
  } else {
    summaryHTML = `
      <h4>对接信息摘要</h4>
      <ul>
        <li>请在聊天中说明您是需要出售还是采购</li>
        <li>对接进度: ${Math.round((getCompletedStages(currentTrackingData.stages) / 5) * 100)}%</li>
      </ul>
    `;
  }
  
  progressSummary.innerHTML = summaryHTML;
  trackingPanel.appendChild(progressSummary);
  
  // 添加刷新按钮
  const refreshButton = document.createElement('button');
  refreshButton.classList.add('refresh-tracking');
  refreshButton.textContent = '请求更新进度';
  refreshButton.addEventListener('click', function() {
    // 请求平台更新进度
    updateTrackingProgress();
    
    // 添加刷新动画
    this.classList.add('refreshing');
    // 更改按钮文本
    this.textContent = '正在请求平台确认...';
    setTimeout(() => {
      this.classList.remove('refreshing');
      this.textContent = '请求更新进度';
    }, 2000);
  });
  
  // 添加平台确认说明
  const confirmNote = document.createElement('div');
  confirmNote.classList.add('platform-note');
  confirmNote.innerHTML = '提示：所有进度更新需要平台确认后才能生效';
  
  trackingPanel.appendChild(refreshButton);
  trackingPanel.appendChild(confirmNote);
}

// 根据聊天内容更新对接进度
function updateTrackingFromChat(message, isSeller, isBuyer) {
  // 获取当前进度数据
  let trackingData = JSON.parse(localStorage.getItem('trackingData'));
  
  if (!trackingData) {
    // 如果没有数据，初始化默认数据
    trackingData = {
      currentStage: 1,
      stages: [
        { id: 1, name: '需求提交', status: 'pending', timestamp: new Date().toISOString() },
        { id: 2, name: '匹配库存', status: 'pending', timestamp: null },
        { id: 3, name: '卖家确认', status: 'pending', timestamp: null },
        { id: 4, name: '买家确认', status: 'pending', timestamp: null },
        { id: 5, name: '确认对接', status: 'pending', timestamp: null }
      ],
      lastUpdated: new Date().toISOString(),
      isSeller: false,
      isBuyer: false,
      needType: '',
      productType: '',
      quantity: '',
      budgetRange: ''
    };
  }
  
  // 更新买卖身份
  if (isSeller !== undefined) {
    trackingData.isSeller = isSeller;
  }
  
  if (isBuyer !== undefined) {
    trackingData.isBuyer = isBuyer;
  }
  
  // 处理阶段1：需求提交
  if (trackingData.stages[0].status !== 'completed') {
    // 只要有消息，就认为需求已提交
    trackingData.stages[0].status = 'completed';
    trackingData.stages[0].timestamp = new Date().toISOString();
    
    // 进入第二阶段
    trackingData.stages[1].status = 'active';
    trackingData.currentStage = 2;
  }
  
  // 提取产品类型信息
  const productTypes = ['牛仔', '丝绸', '棉麻', '羊毛', '尼龙', '涤纶'];
  for (const type of productTypes) {
    if (message.includes(type)) {
      trackingData.productType = type;
      break;
    }
  }
  
  // 提取需求类型
  if (message.includes('面料') || message.includes('布料') || message.includes('布')) {
    trackingData.needType = '面料';
  } else if (message.includes('服装') || message.includes('衣服') || message.includes('成衣')) {
    trackingData.needType = '服装';
  }
  
  // 提取数量信息
  const quantityMatch = message.match(/(\d+)([件条米吨个])/);
  if (quantityMatch) {
    trackingData.quantity = quantityMatch[0];
  }
  
  // 提取价格/预算信息
  if (message.includes('价格') || message.includes('多少钱') || message.includes('预算')) {
    const priceMatch = message.match(/(\d+)[-~到至](\d+)[元块]/);
    if (priceMatch) {
      trackingData.budgetRange = priceMatch[0];
    }
  }
  
  // 阶段2：匹配库存 - 根据关键词判断
  if (trackingData.currentStage === 2 && trackingData.stages[1].status === 'active') {
    // 当用户提供了具体的产品和需求类型时，进入到下一阶段
    if (trackingData.productType && trackingData.needType) {
      if (message.includes('匹配') || message.includes('库存') || message.includes('资源') || 
          message.includes('找到') || message.includes('有货') || containsSpecificProductInfo(message)) {
        trackingData.stages[1].status = 'completed';
        trackingData.stages[1].timestamp = new Date().toISOString();
        
        // 根据用户身份决定下一步
        if (trackingData.isSeller) {
          // 卖家寻找买家，进入到买家确认阶段
          trackingData.stages[3].status = 'active';
          trackingData.currentStage = 4;
        } else if (trackingData.isBuyer) {
          // 买家寻找卖家，进入到卖家确认阶段
          trackingData.stages[2].status = 'active';
          trackingData.currentStage = 3;
        }
      }
    }
  }
  
  // 阶段3：卖家确认
  if (trackingData.currentStage === 3 && trackingData.stages[2].status === 'active') {
    if (message.includes('卖家确认') || message.includes('供应商确认') || message.includes('已确认') || 
        message.includes('可以供应') || message.includes('有库存')) {
      trackingData.stages[2].status = 'completed';
      trackingData.stages[2].timestamp = new Date().toISOString();
      
      // 进入买家确认阶段
      trackingData.stages[3].status = 'active';
      trackingData.currentStage = 4;
    }
  }
  
  // 阶段4：买家确认
  if (trackingData.currentStage === 4 && trackingData.stages[3].status === 'active') {
    if (message.includes('买家确认') || message.includes('客户确认') || message.includes('确认购买') || 
        message.includes('接受') || message.includes('满意')) {
      trackingData.stages[3].status = 'completed';
      trackingData.stages[3].timestamp = new Date().toISOString();
      
      // 进入最终确认阶段
      trackingData.stages[4].status = 'active';
      trackingData.currentStage = 5;
    }
  }
  
  // 阶段5：确认对接
  if (trackingData.currentStage === 5 && trackingData.stages[4].status === 'active') {
    if (message.includes('交易成功') || message.includes('已对接') || message.includes('成交') || 
        message.includes('已完成') || message.includes('感谢合作')) {
      trackingData.stages[4].status = 'completed';
      trackingData.stages[4].timestamp = new Date().toISOString();
    }
  }
  
  // 更新最后更新时间
  trackingData.lastUpdated = new Date().toISOString();
  
  // 保存更新后的数据
  localStorage.setItem('trackingData', JSON.stringify(trackingData));
  
  // 重新初始化进度面板以显示最新状态
  initTrackingPanel();
}

// 显示阶段详细信息
function showStageDetail(stage, trackingData) {
  const wechatContact = '<strong>JJ1598929032</strong>';
  const modal = document.createElement('div');
  modal.classList.add('progress-modal');
  
  const modalContent = document.createElement('div');
  modalContent.classList.add('modal-content');
  
  // 添加关闭按钮
  const closeBtn = document.createElement('button');
  closeBtn.classList.add('close-modal');
  closeBtn.innerHTML = '&times;';
  closeBtn.addEventListener('click', function() {
    document.body.removeChild(modal);
  });
  
  // 阶段详情内容
  const stageContent = document.createElement('div');
  stageContent.classList.add('stage-detail');
  
  const stageTitle = document.createElement('h3');
  stageTitle.innerHTML = `阶段 ${stage.id}: ${stage.name} <span class="stage-status status-${stage.status}">${getStatusText(stage.status)}</span>`;
  
  const stageTimestamp = document.createElement('div');
  stageTimestamp.classList.add('stage-timestamp');
  if (stage.timestamp) {
    const date = new Date(stage.timestamp);
    stageTimestamp.textContent = `更新时间: ${formatDateTime(date)}`;
  } else {
    stageTimestamp.textContent = '尚未开始';
  }
  
  const stageDescription = document.createElement('p');
  let descriptionText = '';
  
  // 根据不同阶段和用户身份显示不同内容
  const isSeller = trackingData.isSeller;
  const isBuyer = trackingData.isBuyer;
  
  switch(stage.id) {
    case 1:
      if (stage.status === 'completed') {
        descriptionText = `您的${isSeller ? '出售' : isBuyer ? '采购' : ''}需求已成功提交！我们的系统正在进行初步分析，以便更好地匹配合适的${isSeller ? '买家' : '资源'}。如需补充具体要求或查询进度，请添加客服微信：${wechatContact}`;
      } else {
        descriptionText = `请在聊天框中说明您的${isSeller ? '出售' : isBuyer ? '采购' : '需求'}意向，系统将自动为您匹配${isSeller ? '买家' : '资源'}。您可以随时添加客服微信：${wechatContact} 获取帮助。`;
      }
      break;
    case 2:
      if (stage.status === 'completed') {
        descriptionText = `系统已成功为您匹配到符合要求的${isSeller ? '潜在买家' : '库存资源'}。现在进入${isSeller ? '买家' : '卖家'}确认阶段。如需了解匹配详情，请添加微信：${wechatContact}`;
      } else if (stage.status === 'active') {
        descriptionText = `系统正在根据您提供的要求匹配${isSeller ? '买家资源' : '库存'}。这个过程通常需要12小时内完成。如需加快进度或提供更详细的需求，请立即添加微信：${wechatContact}`;
      } else {
        descriptionText = `此阶段尚未开始。系统将在需求提交后自动为您匹配${isSeller ? '买家' : '库存资源'}。`;
      }
      break;
    case 3:
      if (stage.status === 'completed') {
        descriptionText = `卖家已确认库存有效，现在等待买家最终确认。如有任何问题，请添加微信：${wechatContact}`;
      } else if (stage.status === 'active') {
        descriptionText = `我们已找到符合要求的库存，正在等待卖家确认。通常会在24小时内得到回复。如想优先处理或了解更多详情，请添加微信：${wechatContact}`;
      } else {
        descriptionText = `此阶段尚未开始。系统将在匹配到合适库存后联系卖家确认。`;
      }
      break;
    case 4:
      if (stage.status === 'completed') {
        descriptionText = `买家已确认购买意向，现在进入最终确认阶段。请添加微信：${wechatContact} 完成交易细节确认。`;
      } else if (stage.status === 'active') {
        descriptionText = `卖家已确认库存有效，等待您的最终确认。为确保交易顺利进行，请添加微信：${wechatContact} 进行后续沟通`;
      } else {
        descriptionText = `此阶段尚未开始。系统将在卖家确认后联系买家最终确认。`;
      }
      break;
    case 5:
      if (stage.status === 'completed') {
        descriptionText = `恭喜！交易已成功对接。请通过微信：${wechatContact} 完成后续交易流程。`;
      } else if (stage.status === 'active') {
        descriptionText = `恭喜！双方已达成对接意向。为保障交易安全和顺利完成后续流程，请立即添加微信：${wechatContact} 获取详细指导`;
      } else {
        descriptionText = `此阶段尚未开始。系统将在买家确认后进入最终对接确认阶段。`;
      }
      break;
    default:
      descriptionText = `当前阶段状态更新中。如需及时了解最新进展，请添加客服微信：${wechatContact}`;
  }
  
  stageDescription.innerHTML = descriptionText;
  
  const nextStepsTitle = document.createElement('h4');
  nextStepsTitle.textContent = '下一步操作';
  
  const nextStepsList = document.createElement('ul');
  const nextSteps = getNextSteps(stage.id, stage.status, trackingData);
  
  nextSteps.forEach(step => {
    const listItem = document.createElement('li');
    listItem.innerHTML = step;
    nextStepsList.appendChild(listItem);
  });
  
  // 添加平台确认提示
  const platformConfirmNote = document.createElement('div');
  platformConfirmNote.classList.add('platform-confirmation-note');
  platformConfirmNote.innerHTML = `<i>注意：对接进度由平台根据实际情况确认更新，阶段进度无法手动修改。如需加速进度，请添加客服微信：${wechatContact}</i>`;
  
  stageContent.appendChild(stageTitle);
  stageContent.appendChild(stageTimestamp);
  stageContent.appendChild(stageDescription);
  stageContent.appendChild(nextStepsTitle);
  stageContent.appendChild(nextStepsList);
  stageContent.appendChild(platformConfirmNote);
  
  modalContent.appendChild(closeBtn);
  modalContent.appendChild(stageContent);
  modal.appendChild(modalContent);
  
  document.body.appendChild(modal);
}

// 更新对接进度
function updateTrackingProgress() {
  let trackingData = JSON.parse(localStorage.getItem('trackingData'));
  
  if (!trackingData) return;
  
  // 获取当前活跃阶段
  let currentActiveIndex = trackingData.stages.findIndex(stage => stage.status === 'active');
  
  // 显示进度更新中消息
  showProgressUpdateMessage();
  
  // 模拟平台确认过程（实际环境中应通过后端API获取确认结果）
  setTimeout(() => {
    // 平台审核确认后，更新进度
    // 注意：在实际环境中，这个确认过程应该来自服务器
    const platformConfirmed = Math.random() > 0.5; // 模拟平台确认结果
    
    if (platformConfirmed && currentActiveIndex !== -1 && currentActiveIndex < trackingData.stages.length - 1) {
      // 当前阶段完成
      trackingData.stages[currentActiveIndex].status = 'completed';
      trackingData.stages[currentActiveIndex].timestamp = new Date().toISOString();
      
      // 下一阶段激活
      trackingData.stages[currentActiveIndex + 1].status = 'active';
      trackingData.currentStage = currentActiveIndex + 2; // +2是因为stage id从1开始
      
      // 显示成功消息
      showNotification("进度已更新", "平台已确认您的进度更新", "success");
    } else {
      // 平台未确认
      showNotification("进度更新等待中", "您的进度更新请求正在等待平台确认", "info");
    }
    
    // 随机更新其他信息
    if (!trackingData.productType && Math.random() > 0.7) {
      const products = ['牛仔', '丝绸', '棉麻', '羊毛'];
      trackingData.productType = products[Math.floor(Math.random() * products.length)];
    }
    
    if (!trackingData.needType && Math.random() > 0.7) {
      trackingData.needType = Math.random() > 0.5 ? '面料' : '服装';
    }
    
    if (!trackingData.quantity && trackingData.isSeller && Math.random() > 0.7) {
      const units = ['件', '米', '条'];
      trackingData.quantity = `${Math.floor(Math.random() * 1000) + 10}${units[Math.floor(Math.random() * units.length)]}`;
    }
    
    if (!trackingData.budgetRange && trackingData.isBuyer && Math.random() > 0.7) {
      const min = Math.floor(Math.random() * 500) + 50;
      const max = min + Math.floor(Math.random() * 500) + 50;
      trackingData.budgetRange = `${min}-${max}元`;
    }
    
    // 更新最后更新时间
    trackingData.lastUpdated = new Date().toISOString();
    
    // 保存更新后的数据
    localStorage.setItem('trackingData', JSON.stringify(trackingData));
    
    // 重新初始化进度面板
    initTrackingPanel();
  }, 2000); // 模拟平台确认延迟
}

// 显示进度更新中的消息
function showProgressUpdateMessage() {
  const notification = document.createElement('div');
  notification.classList.add('progress-notification', 'updating');
  notification.innerHTML = `
    <div class="notification-icon">
      <div class="loading-spinner"></div>
    </div>
    <div class="notification-content">
      <h4>进度更新请求已提交</h4>
      <p>正在等待平台确认，这可能需要一些时间...</p>
    </div>
  `;
  
  document.body.appendChild(notification);
  
  // 1.5秒后移除通知
  setTimeout(() => {
    notification.classList.add('fade-out');
    setTimeout(() => {
      if (document.body.contains(notification)) {
        document.body.removeChild(notification);
      }
    }, 500);
  }, 1500);
}

// 显示通知
function showNotification(title, message, type = "info") {
  const notification = document.createElement('div');
  notification.classList.add('progress-notification', type);
  
  let icon = '';
  if (type === 'success') {
    icon = '<div class="notification-icon success">✓</div>';
  } else if (type === 'error') {
    icon = '<div class="notification-icon error">✗</div>';
  } else {
    icon = '<div class="notification-icon info">i</div>';
  }
  
  notification.innerHTML = `
    ${icon}
    <div class="notification-content">
      <h4>${title}</h4>
      <p>${message}</p>
    </div>
  `;
  
  document.body.appendChild(notification);
  
  // 3秒后移除通知
  setTimeout(() => {
    notification.classList.add('fade-out');
    setTimeout(() => {
      if (document.body.contains(notification)) {
        document.body.removeChild(notification);
      }
    }, 500);
  }, 3000);
}

// 获取状态文本描述
function getStatusText(status) {
  switch(status) {
    case 'pending': return '等待中';
    case 'active': return '进行中';
    case 'completed': return '已完成';
    default: return '未知状态';
  }
}

// 格式化日期时间
function formatDateTime(date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  
  return `${year}-${month}-${day} ${hours}:${minutes}`;
}

// 获取时间差异的友好描述
function getTimeDifference(oldDate, newDate) {
  const diffMs = newDate - oldDate;
  const diffSec = Math.floor(diffMs / 1000);
  const diffMin = Math.floor(diffSec / 60);
  const diffHour = Math.floor(diffMin / 60);
  const diffDay = Math.floor(diffHour / 24);
  
  if (diffSec < 60) {
    return '刚刚';
  } else if (diffMin < 60) {
    return `${diffMin}分钟前`;
  } else if (diffHour < 24) {
    return `${diffHour}小时前`;
  } else if (diffDay < 30) {
    return `${diffDay}天前`;
  } else {
    const month = String(oldDate.getMonth() + 1).padStart(2, '0');
    const day = String(oldDate.getDate()).padStart(2, '0');
    return `${month}-${day}`;
  }
}

// 获取已完成阶段的数量
function getCompletedStages(stages) {
  return stages.filter(stage => stage.status === 'completed').length;
}

// 判断消息是否包含具体产品信息
function containsSpecificProductInfo(message) {
  // 匹配具体的产品描述
  const patterns = [
    /\d+[件条米吨]/,  // 匹配数量单位
    /款式|型号|规格|尺寸|颜色|成分/,  // 匹配产品属性
    /牌|品牌|厂家|生产商/,  // 匹配品牌信息
    /价格|报价|元\/[米件条]/  // 匹配价格信息
  ];
  
  return patterns.some(pattern => pattern.test(message));
}

// 根据不同阶段和用户身份获取下一步操作指引
function getNextSteps(stageId, stageStatus, trackingData) {
  const wechatContact = '<strong>JJ1598929032</strong>';
  const isSeller = trackingData.isSeller;
  const isBuyer = trackingData.isBuyer;
  
  // 如果阶段已完成，返回空步骤列表
  if (stageStatus === 'completed') {
    return [`此阶段已完成，请继续推进下一阶段`, `如有问题请添加微信：${wechatContact} 咨询`];
  }
  
  // 如果阶段未开始，返回等待指引
  if (stageStatus === 'pending') {
    return [`请等待前序阶段完成后再进行此阶段`, `如需加速进度，请添加微信：${wechatContact}`];
  }
  
  // 阶段处于活跃状态，根据不同情况返回指引
  if (isSeller) {
    switch(stageId) {
      case 1:
        return [
          `详细描述您要出售的产品类型、数量和期望价格`,
          `提供产品图片或详细规格说明`,
          `添加微信：${wechatContact} 加速对接进程`
        ];
      case 2:
        return [
          `耐心等待系统为您匹配潜在买家`,
          `完善您的产品细节信息以提高匹配率`,
          `添加微信：${wechatContact} 获取实时匹配进度`
        ];
      case 3:
        return [
          `准备好详细的产品说明和价格资料`,
          `确认您的发货能力和库存情况`,
          `添加微信：${wechatContact} 了解买家需求细节`
        ];
      case 4:
        return [
          `准备详细的产品资料和报价单`,
          `确认您的仓库库存和物流配送方案`,
          `添加微信：${wechatContact} 与买家直接沟通`
        ];
      case 5:
        return [
          `确认交易细节和付款方式`,
          `准备产品发货和售后服务方案`,
          `必须添加微信：${wechatContact} 完成最终交易`
        ];
      default:
        return [`添加微信：${wechatContact} 获取指导`];
    }
  } else if (isBuyer) {
    switch(stageId) {
      case 1:
        return [
          `详细描述您需要的产品类型、数量和预算`,
          `说明您对产品质量和规格的要求`,
          `添加微信：${wechatContact} 加速对接进程`
        ];
      case 2:
        return [
          `耐心等待系统为您匹配合适库存`,
          `完善您的需求细节以提高匹配精准度`,
          `添加微信：${wechatContact} 获取实时匹配进度`
        ];
      case 3:
        return [
          `准备好与卖家沟通的具体问题`,
          `确认您的采购预算和付款方式`,
          `添加微信：${wechatContact} 了解卖家确认进度`
        ];
      case 4:
        return [
          `仔细评估卖家提供的产品信息`,
          `确认产品是否满足您的需求`,
          `添加微信：${wechatContact} 与卖家直接沟通`
        ];
      case 5:
        return [
          `确认交易细节和收货地址`,
          `准备付款和验收产品`,
          `必须添加微信：${wechatContact} 完成最终交易`
        ];
      default:
        return [`添加微信：${wechatContact} 获取指导`];
    }
  } else {
    // 用户身份未确定
    switch(stageId) {
      case 1:
        return [
          `请在聊天框中说明您是希望出售还是采购`,
          `详细描述您的需求或产品信息`,
          `添加微信：${wechatContact} 获取专业指导`
        ];
      default:
        return [
          `请先明确您的身份（买家/卖家）`,
          `添加微信：${wechatContact} 获取帮助`
        ];
    }
  }
}

// 为动画添加稳定性修复
function animateStats() {
  const statValues = document.querySelectorAll('.stat-value');
  
  statValues.forEach(statValue => {
    const targetValue = parseInt(statValue.textContent, 10);
    let currentValue = 0;
    const duration = 2000;
    const stepTime = 20;
    const totalSteps = duration / stepTime;
    const stepValue = targetValue / totalSteps;
    
    function updateValue() {
      currentValue += stepValue;
      
      if (currentValue < targetValue) {
        statValue.textContent = Math.floor(currentValue);
        requestAnimationFrame(updateValue);
      } else {
        statValue.textContent = targetValue;
        
        // 添加以防止数字变化导致布局移动
        statValue.style.minWidth = statValue.offsetWidth + 'px';
      }
    }
    
    // 当元素进入视口时启动动画
    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          updateValue();
          observer.unobserve(entry.target);
        }
      });
    });
    
    observer.observe(statValue);
  });
}

// 导航栏初始化与滚动效果
function initNavbar() {
  const navbar = document.querySelector('.navbar');
  
  // 滚动监听
  window.addEventListener('scroll', function() {
    if (window.scrollY > 50) {
      navbar.classList.add('scrolled');
    } else {
      navbar.classList.remove('scrolled');
    }
  });
  
  // 导航菜单项点击激活效果
  const navLinks = document.querySelectorAll('.main-nav a');
  
  navLinks.forEach(link => {
    link.addEventListener('click', function(e) {
      // 获取目标部分的ID
      const targetId = this.getAttribute('href');
      
      // 仅对页内锚点链接进行处理
      if (targetId.startsWith('#')) {
        e.preventDefault();
        
        const targetSection = document.querySelector(targetId);
        
        if (targetSection) {
          // 平滑滚动到目标部分
          window.scrollTo({
            top: targetSection.offsetTop - 70, // 减去导航栏高度
            behavior: 'smooth'
          });
          
          // 更新URL锚点，但不跳转
          history.pushState(null, null, targetId);
          
          // 移除所有active类
          navLinks.forEach(item => {
            item.parentElement.classList.remove('active');
          });
          
          // 为当前点击项添加active类
          this.parentElement.classList.add('active');
        }
      }
    });
  });
}

// 添加滚动监听，高亮当前视图中的部分
function initScrollSpy() {
  // 获取所有主要部分
  const sections = document.querySelectorAll('section[id]');
  const navLinks = document.querySelectorAll('.main-nav a');
  
  // 添加滚动监听
  window.addEventListener('scroll', function() {
    // 当前滚动位置
    const scrollPosition = window.scrollY + 100; // 添加一些偏移以提前激活
    
    // 检查每个部分的位置
    sections.forEach(section => {
      // 获取部分的顶部和底部位置
      const sectionTop = section.offsetTop;
      const sectionBottom = sectionTop + section.offsetHeight;
      
      // 检查当前滚动位置是否在该部分
      if (scrollPosition >= sectionTop && scrollPosition < sectionBottom) {
        // 找到对应的导航链接
        const targetId = '#' + section.getAttribute('id');
        
        // 移除所有active类
        navLinks.forEach(link => {
          link.parentElement.classList.remove('active');
          
          // 为当前部分的链接添加active类
          if (link.getAttribute('href') === targetId) {
            link.parentElement.classList.add('active');
          }
        });
      }
    });
  });
}

// 平滑滚动效果
function addSmoothScrolling() {
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function(e) {
      const targetId = this.getAttribute('href');
      
      if (targetId === '#') return;
      
      const target = document.querySelector(targetId);
      
      if (target) {
        e.preventDefault();
        
        window.scrollTo({
          top: target.offsetTop - 70, // 减去导航栏高度
          behavior: 'smooth'
        });
        
        // 更新URL锚点，但不跳转
        history.pushState(null, null, targetId);
      }
    });
  });
} 